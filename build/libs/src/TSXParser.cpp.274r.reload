
;; Function std::exception::exception() (_ZNSt9exceptionC2Ev, funcdef_no=389, decl_uid=10294, cgraph_uid=78, symbol_order=79)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 5
   Insn 7: point = 1, n_alt = 3
   Insn 6: point = 2, n_alt = 4
   Insn 2: point = 3, n_alt = 5
 r87: [0..2]
 r88: [0..1]
Compressing live ranges: from 3 to 2 - 66%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns


std::exception::exception()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={2d,1u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 30{20d,10u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [5 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/exception.h":63 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (const:DI (plus:DI (symbol_ref:DI ("_ZTVSt9exception") [flags 0x40]  <var_decl 0x7f441b88b510 _ZTVSt9exception>)
                (const_int 16 [0x10])))) "/usr/include/c++/7/bits/exception.h":63 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [5 this+0 S8 A64])) "/usr/include/c++/7/bits/exception.h":63 81 {*movdi_internal}
     (nil))
(insn 8 7 11 2 (set (mem/f:DI (reg/f:DI 0 ax [88]) [2 this_3(D)->_vptr.exception+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/exception.h":63 81 {*movdi_internal}
     (nil))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/exception.h":63 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function void* operator new(std::size_t, void*) (_ZnwmPv, funcdef_no=439, decl_uid=10899, cgraph_uid=118, symbol_order=119)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


void* operator new(std::size_t, void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,5u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{20d,13u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 D.10897+0 S8 A64])
        (reg:DI 5 di [ D.10897 ])) "/usr/include/c++/7/new":169 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [9 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/new":169 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 14 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [9 __p+0 S8 A64])) "/usr/include/c++/7/new":169 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/new":169 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/new":169 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function void operator delete(void*, void*) (_ZdlPvS_, funcdef_no=441, decl_uid=10907, cgraph_uid=120, symbol_order=121)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void operator delete(void*, void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 27{18d,9u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [9 D.10905+0 S8 A64])
        (reg:DI 5 di [ D.10905 ])) "/usr/include/c++/7/new":174 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [9 D.10906+0 S8 A64])
        (reg:DI 4 si [ D.10906 ])) "/usr/include/c++/7/new":174 81 {*movdi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (const_int 0 [0]) "/usr/include/c++/7/new":174 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 9 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree_header::_Rb_tree_header() (_ZNSt15_Rb_tree_headerC2Ev, funcdef_no=1368, decl_uid=27864, cgraph_uid=346, symbol_order=348)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 7: point = 2, n_alt = 1
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


std::_Rb_tree_header::_Rb_tree_header()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,5u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 106{93d,13u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":173 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":175 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem:SI (reg/f:DI 0 ax [87]) [13 this_2(D)->_M_header._M_color+0 S4 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":175 82 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":176 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_tree.h":176 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt15_Rb_tree_header8_M_resetEv") [flags 0x3]  <function_decl 0x7f441ab48c00 _M_reset>) [0 _M_reset S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":176 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":177 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree_header::_M_reset() (_ZNSt15_Rb_tree_header8_M_resetEv, funcdef_no=1374, decl_uid=27854, cgraph_uid=352, symbol_order=354)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = 5
   Insn 14: point = 1, n_alt = 3
   Insn 13: point = 2, n_alt = 5
   Insn 12: point = 3, n_alt = 3
   Insn 11: point = 4, n_alt = 3
   Insn 10: point = 5, n_alt = 5
   Insn 9: point = 6, n_alt = 3
   Insn 8: point = 7, n_alt = 3
   Insn 7: point = 8, n_alt = 5
   Insn 6: point = 9, n_alt = 3
   Insn 2: point = 10, n_alt = 5
 r87: [5..7]
 r88: [2..4]
 r89: [8..9]
 r90: [5..6]
 r91: [2..3]
 r92: [0..1]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
starting the processing of deferred insns
ending the processing of deferred insns


void std::_Rb_tree_header::_M_reset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={1d} r4={1d} r5={1d,1u} r6={1d,9u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{24d,19u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89 90 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":206 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":208 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [14 this_4(D)->_M_header._M_parent+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":208 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":209 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":209 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 16 [0x10])) [14 this_4(D)->_M_header._M_left+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":209 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":210 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":210 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 24 [0x18])) [14 this_4(D)->_M_header._M_right+0 S8 A64])
        (reg/f:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_tree.h":210 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":211 81 {*movdi_internal}
     (nil))
(insn 15 14 18 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 32 [0x20])) [8 this_4(D)->_M_node_count+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":211 81 {*movdi_internal}
     (nil))
(insn 18 15 19 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":212 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 18 0 NOTE_INSN_DELETED)

;; Function rapidxml::parse_error::parse_error(const char*, void*) (_ZN8rapidxml11parse_errorC2EPKcPv, funcdef_no=1909, decl_uid=34944, cgraph_uid=356, symbol_order=360)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = 5
   Insn 18: point = 1, n_alt = 3
   Insn 17: point = 2, n_alt = 3
   Insn 16: point = 3, n_alt = 5
   Insn 15: point = 4, n_alt = 3
   Insn 14: point = 5, n_alt = 3
   Insn 13: point = 6, n_alt = 5
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 8, n_alt = 4
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 9, n_alt = -2
   Insn 8: point = 10, n_alt = 3
   Insn 4: point = 11, n_alt = 5
   Insn 3: point = 11, n_alt = 5
   Insn 2: point = 11, n_alt = 5
 r87: [9..10]
 r88: [6..8]
 r90: [6..7]
 r91: [3..5]
 r92: [3..4]
 r93: [0..2]
 r94: [0..1]
Compressing live ranges: from 11 to 8 - 72%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r90: [4..5]
 r91: [2..3]
 r92: [2..3]
 r93: [0..1]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


rapidxml::parse_error::parse_error(const char*, void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={5d,4u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,11u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{98d,26u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":77 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 what+0 S8 A64])
        (reg:DI 4 si [ what ])) "libs/src/../include/rapidxml/rapidxml.hpp":77 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 where+0 S8 A64])
        (reg:DI 1 dx [ where ])) "libs/src/../include/rapidxml/rapidxml.hpp":77 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt9exceptionC2Ev") [flags 0x3]  <function_decl 0x7f441b88d400 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":79 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca6c0 _ZTVN8rapidxml11parse_errorE>)
                (const_int 16 [0x10])))) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f:DI (reg/f:DI 0 ax [90]) [2 this_5(D)->D.34948._vptr.exception+0 S8 A64])
        (reg/f:DI 1 dx [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 what+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 8 [0x8])) [3 this_5(D)->m_what+0 S8 A64])
        (reg/f:DI 1 dx [92])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 1 dx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 where+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 19 18 22 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 16 [0x10])) [9 this_5(D)->m_where+0 S8 A64])
        (reg/f:DI 1 dx [94])) "libs/src/../include/rapidxml/rapidxml.hpp":79 81 {*movdi_internal}
     (nil))
(insn 22 19 23 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":81 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_DELETED)

;; Function virtual const char* rapidxml::parse_error::what() const (_ZNK8rapidxml11parse_error4whatEv, funcdef_no=1911, decl_uid=34920, cgraph_uid=358, symbol_order=362)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


virtual const char* rapidxml::parse_error::what() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":85 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":87 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:88 _4 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 8 [0x8])) [3 this_3(D)->m_what+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":87 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":88 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":88 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (_ZStanSt13_Ios_FmtflagsS_, funcdef_no=2094, decl_uid=37473, cgraph_uid=436, symbol_order=456)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 1 in insn 8:  (0) r  (1) 0  (2) rm {*andsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = -2
   Insn 8: point = 3, n_alt = 1
   Insn 7: point = 5, n_alt = 0
   Insn 3: point = 6, n_alt = 1
   Insn 2: point = 6, n_alt = 1
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r17={1d} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 39{22d,15u,2e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32])
        (reg:SI 5 di [ __a ])) "/usr/include/c++/7/bits/ios_base.h":84 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [20 __b+0 S4 A32])
        (reg:SI 4 si [ __b ])) "/usr/include/c++/7/bits/ios_base.h":84 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32])) "/usr/include/c++/7/bits/ios_base.h":84 82 {*movsi_internal}
     (nil))
(insn 8 7 15 2 (parallel [
            (set (reg:SI 0 ax [orig:87 _3 ] [87])
                (and:SI (reg:SI 0 ax [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [20 __b+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/ios_base.h":84 391 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [20 __b+0 S4 A32]))
        (nil)))
(insn 15 8 16 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/ios_base.h":84 82 {*movsi_internal}
     (nil))
(insn 16 15 18 2 (use (reg/i:SI 0 ax)) "/usr/include/c++/7/bits/ios_base.h":84 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 16 0 NOTE_INSN_DELETED)

;; Function constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags) (_ZStcoSt13_Ios_Fmtflags, funcdef_no=2097, decl_uid=37484, cgraph_uid=439, symbol_order=459)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =rm  (1) 0 {*one_cmplsi2_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 0
   Insn 2: point = 6, n_alt = 1
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 34{21d,12u,1e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32])
        (reg:SI 5 di [ __a ])) "/usr/include/c++/7/bits/ios_base.h":96 82 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32])) "/usr/include/c++/7/bits/ios_base.h":96 82 {*movsi_internal}
     (nil))
(insn 7 6 14 2 (set (reg:SI 0 ax [orig:87 _2 ] [87])
        (not:SI (reg:SI 0 ax [89]))) "/usr/include/c++/7/bits/ios_base.h":96 494 {*one_cmplsi2_1}
     (expr_list:REG_EQUAL (not:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [20 __a+0 S4 A32]))
        (nil)))
(insn 14 7 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/ios_base.h":96 82 {*movsi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:SI 0 ax)) "/usr/include/c++/7/bits/ios_base.h":96 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (_ZStaNRSt13_Ios_FmtflagsS_, funcdef_no=2099, decl_uid=37492, cgraph_uid=441, symbol_order=461)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -2
   Insn 16: point = 3, n_alt = 3
   Insn 15: point = 4, n_alt = 1
   Insn 14: point = 5, n_alt = 3
   Insn 13: point = 6, n_alt = -2
   Insn 12: point = 7, n_alt = 0
   Insn 11: point = 7, n_alt = -2
   Insn 10: point = 8, n_alt = -2
   Insn 9: point = 9, n_alt = 0
   Insn 8: point = 10, n_alt = 0
   Insn 7: point = 12, n_alt = 3
   Insn 3: point = 13, n_alt = 1
   Insn 2: point = 13, n_alt = 5
 r87: [7..10]
 r88: [4..6]
 r89: [2..3]
 r90: [0..1]
 r91: [11..12]
 r92: [8..9]
 r93: [4..5]
Compressing live ranges: from 13 to 10 - 76%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={7d,7u} r1={4d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{99d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [21 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/ios_base.h":104 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [20 __b+0 S4 A32])
        (reg:SI 4 si [ __b ])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [21 __a+0 S8 A64])) "/usr/include/c++/7/bits/ios_base.h":104 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (mem:SI (reg/f:DI 0 ax [91]) [20 *__a_4(D)+0 S4 A32])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [20 __b+0 S4 A32])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [92])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZStanSt13_Ios_FmtflagsS_") [flags 0x3]  <function_decl 0x7f441b3bf600 operator&>) [0 operator& S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/ios_base.h":104 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 13 12 14 2 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (reg:SI 0 ax)) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [21 __a+0 S8 A64])) "/usr/include/c++/7/bits/ios_base.h":104 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem:SI (reg/f:DI 0 ax [93]) [20 *__a_4(D)+0 S4 A32])
        (reg:SI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/ios_base.h":104 82 {*movsi_internal}
     (nil))
(insn 16 15 23 2 (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [21 __a+0 S8 A64])) "/usr/include/c++/7/bits/ios_base.h":104 81 {*movdi_internal}
     (nil))
(insn 23 16 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/bits/ios_base.h":104 81 {*movdi_internal}
     (nil))
(insn 24 23 26 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/ios_base.h":104 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function void std::ios_base::unsetf(std::ios_base::fmtflags) (_ZNSt8ios_base6unsetfESt13_Ios_Fmtflags, funcdef_no=2129, decl_uid=37792, cgraph_uid=471, symbol_order=491)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 12: point = 2, n_alt = 0
   Insn 11: point = 4, n_alt = 3
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 0
   Insn 8: point = 6, n_alt = -2
   Insn 7: point = 7, n_alt = 0
   Insn 3: point = 8, n_alt = 1
   Insn 2: point = 8, n_alt = 5
 r87: [1..5]
 r88: [0..2]
 r89: [6..7]
 r90: [3..4]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [0..3]
 r88: [0..1]
 r89: [4..5]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 12
changing reg in insn 14
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.


void std::ios_base::unsetf(std::ios_base::fmtflags)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,6u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 192{170d,21u,1e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [22 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/ios_base.h":678 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [20 __mask+0 S4 A32])
        (reg:SI 4 si [ __mask ])) "/usr/include/c++/7/bits/ios_base.h":678 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [20 __mask+0 S4 A32])) "/usr/include/c++/7/bits/ios_base.h":679 82 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [89])) "/usr/include/c++/7/bits/ios_base.h":679 82 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZStcoSt13_Ios_Fmtflags") [flags 0x3]  <function_decl 0x7f441a585c00 operator~>) [0 operator~ S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/ios_base.h":679 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 dx [orig:87 _1 ] [87])
        (reg:SI 0 ax)) "/usr/include/c++/7/bits/ios_base.h":679 82 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [22 this+0 S8 A64])) "/usr/include/c++/7/bits/ios_base.h":679 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/ios_base.h":679 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [22 this+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/ios_base.h":679 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/ios_base.h":679 81 {*movdi_internal}
     (nil))
(call_insn 15 14 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZStaNRSt13_Ios_FmtflagsS_") [flags 0x3]  <function_decl 0x7f441a590000 operator&=>) [0 operator&= S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/ios_base.h":679 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 18 15 19 2 (const_int 0 [0]) "/usr/include/c++/7/bits/ios_base.h":679 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 18 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Rb_tree_impl<_Key_compare, <anonymous> >::_Rb_tree_impl() [with _Key_compare = std::less<std::__cxx11::basic_string<char> >; bool <anonymous> = true; _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC2Ev, funcdef_no=2683, decl_uid=53576, cgraph_uid=553, symbol_order=574)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = 0
   Insn 12: point = 3, n_alt = 3
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = -2
   Insn 9: point = 5, n_alt = 3
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [4..5]
 r88: [0..1]
 r89: [6..7]
 r90: [2..3]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [0..1]
 r89: [6..7]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 13
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 15.


std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Rb_tree_impl<_Key_compare, <anonymous> >::_Rb_tree_impl() [with _Key_compare = std::less<std::__cxx11::basic_string<char> >; bool <anonymous> = true; _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,4u} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={4d} r18={3d} r19={3d} r20={1d,1u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 263{242d,20u,1e} in 12{9 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EEEC2Ev") [flags 0x3]  <function_decl 0x7f4419c4fc00 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":688 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev") [flags 0x3]  <function_decl 0x7f4419c63300 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":688 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_tree.h":688 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_tree.h":688 81 {*movdi_internal}
     (nil))
(call_insn 15 14 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt15_Rb_tree_headerC2Ev") [flags 0x3]  <function_decl 0x7f441ab4f000 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":688 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 15 19 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":688 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 18 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char> >, true>::~_Rb_tree_impl() (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED2Ev, funcdef_no=2686, decl_uid=54161, cgraph_uid=556, symbol_order=577)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char> >, true>::~_Rb_tree_impl()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":677 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [24 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":677 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_tree.h":677 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EEED2Ev") [flags 0x3]  <function_decl 0x7f4419c4fe00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":677 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":677 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Rb_tree() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC2Ev, funcdef_no=2688, decl_uid=54221, cgraph_uid=559, symbol_order=580)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Rb_tree() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":913 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":913 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":913 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev") [flags 0x3]  <function_decl 0x7f4419c6dc00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":913 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":913 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::map<_Key, _Tp, _Compare, _Alloc>::map() [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEEC2Ev, funcdef_no=2690, decl_uid=54822, cgraph_uid=562, symbol_order=583)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::map<_Key, _Tp, _Compare, _Alloc>::map() [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [26 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_map.h":177 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [26 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_map.h":177 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_map.h":177 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EEC1Ev") [flags 0x3]  <function_decl 0x7f44198bde00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_map.h":177 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_map.h":177 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::map<_Key, _Tp, _Compare, _Alloc>::~map() [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEED2Ev, funcdef_no=2693, decl_uid=54827, cgraph_uid=565, symbol_order=586)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::map<_Key, _Tp, _Compare, _Alloc>::~map() [with _Key = std::__cxx11::basic_string<char>; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [26 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_map.h":294 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [26 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_map.h":294 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_map.h":294 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED1Ev") [flags 0x3]  <function_decl 0x7f44198c1000 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_map.h":294 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_map.h":294 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::TilesetImage::TilesetImage() (_ZN3TSX6Parser12TilesetImageC2Ev, funcdef_no=2696, decl_uid=59805, cgraph_uid=568, symbol_order=589)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 0
   Insn 9: point = 3, n_alt = 3
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = -2
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [4..5]
 r88: [0..1]
 r91: [2..3]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [0..1]
 r91: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.


TSX::Parser::TilesetImage::TilesetImage()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 185{168d,16u,1e} in 9{7 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 91
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev") [flags 0x41]  <function_decl 0x7f441b161900 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":22 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [91])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":22 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev") [flags 0x41]  <function_decl 0x7f441b161900 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":22 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":22 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::TilesetImage::~TilesetImage() (_ZN3TSX6Parser12TilesetImageD2Ev, funcdef_no=2699, decl_uid=59831, cgraph_uid=571, symbol_order=592)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 3
   Insn 9: point = 2, n_alt = 0
   Insn 8: point = 2, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 12.


TSX::Parser::TilesetImage::~TilesetImage()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 185{168d,16u,1e} in 9{7 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":22 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":22 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [27 this+0 S8 A64])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":22 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":22 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":22 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Tileset::Tileset() (_ZN3TSX6Parser7TilesetC2Ev, funcdef_no=2701, decl_uid=59838, cgraph_uid=574, symbol_order=595)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = 0
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = -2
   Insn 10: point = 5, n_alt = 0
   Insn 9: point = 7, n_alt = 3
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 8, n_alt = -2
   Insn 6: point = 9, n_alt = 3
   Insn 2: point = 10, n_alt = 5
 r87: [8..9]
 r88: [4..5]
 r89: [0..1]
 r93: [6..7]
 r94: [2..3]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r87: [8..9]
 r88: [4..5]
 r89: [0..1]
 r93: [6..7]
 r94: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 16.


TSX::Parser::Tileset::Tileset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,5u} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d} r18={3d} r19={3d} r20={1d,1u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 267{244d,21u,2e} in 13{10 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 93 94
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev") [flags 0x41]  <function_decl 0x7f441b161900 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [93])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 12 11 13 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEEC1Ev") [flags 0x3]  <function_decl 0x7f4419921900 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (plus:DI (reg/f:DI 0 ax [94])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
            (const_int 104 [0x68]))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser12TilesetImageC1Ev") [flags 0x3]  <function_decl 0x7f44197d8c00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 16 20 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":29 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Tileset::~Tileset() (_ZN3TSX6Parser7TilesetD2Ev, funcdef_no=2704, decl_uid=59864, cgraph_uid=577, symbol_order=598)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = 3
   Insn 13: point = 2, n_alt = 0
   Insn 12: point = 2, n_alt = -2
   Insn 11: point = 3, n_alt = 0
   Insn 10: point = 5, n_alt = 3
   Insn 9: point = 6, n_alt = 0
   Insn 8: point = 6, n_alt = -2
   Insn 7: point = 7, n_alt = 0
   Insn 6: point = 9, n_alt = 3
   Insn 2: point = 10, n_alt = 5
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [8..9]
 r91: [4..5]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [8..9]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 16.


TSX::Parser::Tileset::~Tileset()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,5u} r1={4d} r2={4d} r4={4d} r5={7d,4u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d} r18={3d} r19={3d} r20={1d,1u,2e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 267{244d,21u,2e} in 13{10 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 104 [0x68])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
            (const_int 104 [0x68]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser12TilesetImageD1Ev") [flags 0x3]  <function_decl 0x7f44197df500 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [91])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEED1Ev") [flags 0x3]  <function_decl 0x7f4419921b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [28 this+0 S8 A64])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/TSXParser.h":29 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 16 20 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":29 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Parser(const char*) (_ZN3TSX6ParserC2EPKc, funcdef_no=2706, decl_uid=58151, cgraph_uid=580, symbol_order=601)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 4
   Insn 50: point = 0, n_alt = 0
   Insn 49: point = 0, n_alt = -2
   Insn 48: point = 1, n_alt = -2
   Insn 47: point = 3, n_alt = 0
   Insn 46: point = 3, n_alt = -2
   Insn 45: point = 4, n_alt = 0
   Insn 44: point = 6, n_alt = 3
   Insn 42: point = 7, n_alt = -2
   Insn 41: point = 9, n_alt = 0
   Insn 40: point = 9, n_alt = -2
   Insn 39: point = 10, n_alt = 0
   Insn 38: point = 12, n_alt = 3
   Insn 36: point = 13, n_alt = -2
   Insn 35: point = 15, n_alt = 0
   Insn 34: point = 15, n_alt = -2
   Insn 33: point = 16, n_alt = 0
   Insn 32: point = 18, n_alt = 3
   Insn 55: point = 19, n_alt = -2
  BB 5
  BB 3
   Insn 60: point = 20, n_alt = -1
  BB 2
   Insn 26: point = 20, n_alt = 0
   Insn 25: point = 20, n_alt = -2
   Insn 24: point = 21, n_alt = -2
   Insn 23: point = 22, n_alt = 3
   Insn 22: point = 23, n_alt = 3
   Insn 21: point = 24, n_alt = 0
   Insn 20: point = 24, n_alt = -2
   Insn 19: point = 25, n_alt = 0
   Insn 18: point = 27, n_alt = 3
   Insn 17: point = 28, n_alt = 0
   Insn 16: point = 28, n_alt = -2
   Insn 15: point = 29, n_alt = 0
   Insn 14: point = 31, n_alt = 3
   Insn 13: point = 32, n_alt = 0
   Insn 12: point = 32, n_alt = -2
   Insn 11: point = 33, n_alt = 0
   Insn 10: point = 35, n_alt = 3
   Insn 9: point = 36, n_alt = 5
   Insn 8: point = 37, n_alt = 3
   Insn 7: point = 38, n_alt = 4
   Insn 3: point = 39, n_alt = 5
   Insn 2: point = 39, n_alt = 5
 r87: [36..38]
 r88: [32..33]
 r89: [28..29]
 r90: [24..25]
 r91: [15..16]
 r92: [9..10]
 r93: [3..4]
 r94: [0..1]
 r95: [36..37]
 r96: [34..35]
 r97: [30..31]
 r98: [26..27]
 r99: [21..23]
 r100: [20..22]
 r101: [17..18]
 r102: [8..13]
 r103: [14..19]
 r106: [11..12]
 r107: [2..7]
 r109: [5..6]
Compressing live ranges: from 39 to 30 - 76%
Ranges after the compression:
 r87: [28..29]
 r88: [24..25]
 r89: [20..21]
 r90: [16..17]
 r91: [10..11]
 r92: [6..7]
 r93: [2..3]
 r94: [0..1]
 r95: [28..29]
 r96: [26..27]
 r97: [22..23]
 r98: [18..19]
 r99: [14..15]
 r100: [14..15]
 r101: [12..13]
 r102: [6..9]
 r103: [10..13]
 r106: [8..9]
 r107: [2..5]
 r109: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 25
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 42
changing reg in insn 55
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 48
changing reg in insn 44
changing reg in insn 45
deleting insn with uid = 36.
deleting insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 50.


TSX::Parser::Parser(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={25d,16u} r1={12d,2u} r2={9d} r3={1d,1u} r4={10d,2u} r5={17d,9u} r6={1d,16u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1u} r17={14d} r18={8d} r19={8d} r20={1d,2u,6e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 697{629d,62u,6e} in 39{31 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 95 96 97 98 99 100
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 filename+0 S8 A64])
        (reg:DI 4 si [ filename ])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVN3TSX6ParserE") [flags 0x2]  <var_decl 0x7f4419a92630 _ZTVN3TSX6ParserE>)
                (const_int 16 [0x10])))) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f:DI (reg/f:DI 0 ax [95]) [2 this_9(D)->_vptr.Parser+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [96])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser7TilesetC1Ev") [flags 0x3]  <function_decl 0x7f44197df800 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (plus:DI (reg/f:DI 0 ax [97])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 184 [0xb8]))
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EEC1Ev") [flags 0x3]  <function_decl 0x7f4419a5bf00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [98])
                    (const_int 208 [0xd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 208 [0xd0]))
        (nil)))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 21 20 22 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EEC1Ev") [flags 0x3]  <function_decl 0x7f44196e9800 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 2 (set (reg:DI 1 dx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 filename+0 S8 A64])) "libs/src/TSXParser.cpp":11 81 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":11 81 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [99])) "libs/src/TSXParser.cpp":11 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "libs/src/TSXParser.cpp":11 81 {*movdi_internal}
     (nil))
(call_insn 26 25 58 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN3TSX6Parser4loadEPKc") [flags 0x3]  <function_decl 0x7f4419c0bb00 load>) [0 load S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":11 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 58 26 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 60 58 61 3 (set (pc)
        (label_ref 59)) "libs/src/TSXParser.cpp":12 649 {jump}
     (nil)
 -> 59)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 61 60 54)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 101 102 103 106 107 109
(code_label/s 54 61 57 4 28 (nil) [1 uses])
(note 57 54 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 55 57 32 4 (set (reg:DI 3 bx [103])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
(insn 32 55 33 4 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [101])
                    (const_int 208 [0xd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 208 [0xd0]))
        (nil)))
(insn 34 33 35 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 35 34 38 4 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EED1Ev") [flags 0x3]  <function_decl 0x7f44196e9a00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 35 39 4 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 0 ax [106])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 184 [0xb8]))
        (nil)))
(insn 40 39 41 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 _6 ] [92])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 41 40 44 4 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EED1Ev") [flags 0x3]  <function_decl 0x7f4419a5d100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 44 41 45 4 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [109])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":9 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 46 45 47 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 _7 ] [93])) "libs/src/TSXParser.cpp":9 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 4 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser7TilesetD1Ev") [flags 0x3]  <function_decl 0x7f44197e3100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":9 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [orig:94 D.70474 ] [94])
        (reg:DI 3 bx [107])) 81 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.70474 ] [94])) 81 {*movdi_internal}
     (nil))
(call_insn 50 49 51 4 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f441c511100 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 51 50 59)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 59 51 53 5 29 (nil) [1 uses])
(note 53 59 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 62 53 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Parser() (_ZN3TSX6ParserC2Ev, funcdef_no=2709, decl_uid=58146, cgraph_uid=583, symbol_order=604)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 0
   Insn 17: point = 3, n_alt = 3
   Insn 16: point = 4, n_alt = 0
   Insn 15: point = 4, n_alt = -2
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 7, n_alt = 3
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 8, n_alt = -2
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 11, n_alt = 3
   Insn 8: point = 12, n_alt = 5
   Insn 7: point = 13, n_alt = 3
   Insn 6: point = 14, n_alt = 4
   Insn 2: point = 15, n_alt = 5
 r87: [12..14]
 r88: [8..9]
 r89: [4..5]
 r90: [0..1]
 r94: [12..13]
 r95: [10..11]
 r96: [6..7]
 r97: [2..3]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [12..13]
 r88: [8..9]
 r89: [4..5]
 r90: [0..1]
 r94: [12..13]
 r95: [10..11]
 r96: [6..7]
 r97: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 20.


TSX::Parser::Parser()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,7u} r1={5d,1u} r2={4d} r4={4d} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d} r18={3d} r19={3d} r20={1d,1u,3e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 276{248d,25u,3e} in 17{14 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 94 95 96 97
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVN3TSX6ParserE") [flags 0x2]  <var_decl 0x7f4419a92630 _ZTVN3TSX6ParserE>)
                (const_int 16 [0x10])))) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 0 ax [94]) [2 this_9(D)->_vptr.Parser+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [95])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":14 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(call_insn 12 11 13 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser7TilesetC1Ev") [flags 0x3]  <function_decl 0x7f44197df800 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":14 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (plus:DI (reg/f:DI 0 ax [96])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":14 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 184 [0xb8]))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EEC1Ev") [flags 0x3]  <function_decl 0x7f4419a5bf00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":14 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [97])
                    (const_int 208 [0xd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":14 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 208 [0xd0]))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/TSXParser.cpp":14 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EEC1Ev") [flags 0x3]  <function_decl 0x7f44196e9800 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":14 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "libs/src/TSXParser.cpp":15 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::~Parser() (_ZN3TSX6ParserD2Ev, funcdef_no=2712, decl_uid=58160, cgraph_uid=586, symbol_order=607)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 0
   Insn 17: point = 3, n_alt = 3
   Insn 16: point = 4, n_alt = 0
   Insn 15: point = 4, n_alt = -2
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 7, n_alt = 3
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 8, n_alt = -2
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 11, n_alt = 3
   Insn 8: point = 12, n_alt = 5
   Insn 7: point = 13, n_alt = 3
   Insn 6: point = 14, n_alt = 4
   Insn 2: point = 15, n_alt = 5
 r87: [12..14]
 r88: [8..9]
 r89: [4..5]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [6..7]
 r94: [2..3]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [12..13]
 r88: [8..9]
 r89: [4..5]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [6..7]
 r94: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 20.


TSX::Parser::~Parser()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,7u} r1={5d,1u} r2={4d} r4={4d} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d} r18={3d} r19={3d} r20={1d,1u,3e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 276{248d,25u,3e} in 17{14 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVN3TSX6ParserE") [flags 0x2]  <var_decl 0x7f4419a92630 _ZTVN3TSX6ParserE>)
                (const_int 16 [0x10])))) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 0 ax [91]) [2 this_6(D)->_vptr.Parser+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [92])
                    (const_int 208 [0xd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":17 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 208 [0xd0]))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(call_insn 12 11 13 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EED1Ev") [flags 0x3]  <function_decl 0x7f44196e9a00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":17 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (plus:DI (reg/f:DI 0 ax [93])
                    (const_int 184 [0xb8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":17 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 184 [0xb8]))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EED1Ev") [flags 0x3]  <function_decl 0x7f4419a5d100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":17 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [94])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":17 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser7TilesetD1Ev") [flags 0x3]  <function_decl 0x7f44197e3100 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":17 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "libs/src/TSXParser.cpp":19 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function virtual TSX::Parser::~Parser() (_ZN3TSX6ParserD0Ev, funcdef_no=2714, decl_uid=58154, cgraph_uid=588, symbol_order=609)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 2
   Insn 9: point = 1, n_alt = 3
   Insn 8: point = 2, n_alt = 0
   Insn 7: point = 2, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.


virtual TSX::Parser::~Parser()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r4={4d,1u} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 183{167d,16u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/TSXParser.cpp":17 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":19 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "libs/src/TSXParser.cpp":19 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:DI ("_ZN3TSX6ParserD1Ev") [flags 0x3]  <function_decl 0x7f4419700200 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":19 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":19 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (const_int 232 [0xe8])) "libs/src/TSXParser.cpp":19 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/TSXParser.cpp":19 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZdlPvm") [flags 0x41]  <function_decl 0x7f441c516100 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":19 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 12 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_document<>::~xml_document() (_ZN8rapidxml12xml_documentIcED2Ev, funcdef_no=2717, decl_uid=60567, cgraph_uid=590, symbol_order=611)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = -1
   Insn 9: point = 0, n_alt = 0
   Insn 8: point = 0, n_alt = -2
   Insn 7: point = 1, n_alt = 0
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [0..1]
 r88: [2..3]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [0..1]
 r88: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


rapidxml::xml_document<>::~xml_document()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{94d,12u,1e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1358 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1358 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [88])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1358 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1358 81 {*movdi_internal}
     (nil))
(call_insn 9 8 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcED2Ev") [flags 0x3]  <function_decl 0x7f441986d400 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1358 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 9 13 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1358 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 13 12 0 NOTE_INSN_DELETED)

;; Function rapidxml::file<>::~file() (_ZN8rapidxml4fileIcED2Ev, funcdef_no=2720, decl_uid=61405, cgraph_uid=593, symbol_order=614)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


rapidxml::file<>::~file()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [47 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":21 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":21 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":21 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEED1Ev") [flags 0x3]  <function_decl 0x7f44194d0500 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":21 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":21 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function bool TSX::Parser::load(const char*) (_ZN3TSX6Parser4loadEPKc, funcdef_no=2715, decl_uid=52938, cgraph_uid=595, symbol_order=616)

      Creating newreg=156
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=157
Removing SCRATCH in insn #223 (nop 3)
rescanning insn with uid = 223.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=65776, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=65744, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r156
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 21:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 113:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 133:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 146:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 153:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 171:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 178:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 195:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 198:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r157
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 214:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31

********** Pseudo live ranges #1: **********

  BB 29
   Insn 219: point = 0, n_alt = 0
   Insn 218: point = 0, n_alt = -2
   Insn 217: point = 1, n_alt = -2
   Insn 216: point = 3, n_alt = 0
   Insn 215: point = 3, n_alt = -2
   Insn 214: point = 4, n_alt = 3
  BB 27
   Insn 264: point = 6, n_alt = -1
   Insn 210: point = 6, n_alt = -2
   Insn 209: point = 8, n_alt = 0
   Insn 208: point = 8, n_alt = -2
   Insn 207: point = 9, n_alt = 3
   Insn 257: point = 10, n_alt = -2
  BB 28
   Insn 251: point = 11, n_alt = -2
  BB 30
   Insn 225: point = 12, n_alt = 0
  BB 26
   Insn 262: point = 12, n_alt = -1
  BB 31
   Insn 228: point = 12, n_alt = -1
  BB 25
   Insn 224: point = 12, n_alt = -1
   Insn 223: point = 12, n_alt = 0
   Insn 222: point = 13, n_alt = -2
   Insn 202: point = 14, n_alt = -1
   Insn 201: point = 15, n_alt = -1
   Insn 200: point = 15, n_alt = 0
   Insn 199: point = 15, n_alt = -2
   Insn 198: point = 16, n_alt = 3
   Insn 197: point = 17, n_alt = 0
   Insn 196: point = 17, n_alt = -2
   Insn 195: point = 18, n_alt = 3
  BB 24
   Insn 192: point = 19, n_alt = 1
   Insn 191: point = 20, n_alt = 3
   Insn 190: point = 21, n_alt = -2
   Insn 189: point = 22, n_alt = 0
   Insn 188: point = 22, n_alt = -2
   Insn 186: point = 23, n_alt = -2
  BB 23
   Insn 185: point = 24, n_alt = 0
   Insn 184: point = 24, n_alt = -2
   Insn 183: point = 25, n_alt = -2
   Insn 181: point = 27, n_alt = -2
  BB 22
   Insn 180: point = 28, n_alt = 0
   Insn 179: point = 28, n_alt = -2
   Insn 178: point = 29, n_alt = 4
   Insn 177: point = 29, n_alt = 2
   Insn 176: point = 29, n_alt = 0
   Insn 174: point = 29, n_alt = -2
  BB 21
   Insn 173: point = 30, n_alt = 0
   Insn 172: point = 30, n_alt = -2
   Insn 171: point = 31, n_alt = 4
   Insn 170: point = 31, n_alt = 2
   Insn 169: point = 31, n_alt = 0
   Insn 168: point = 31, n_alt = 3
   Insn 167: point = 32, n_alt = 1
   Insn 166: point = 33, n_alt = 3
   Insn 165: point = 34, n_alt = -2
   Insn 164: point = 35, n_alt = 0
   Insn 163: point = 35, n_alt = -2
   Insn 161: point = 36, n_alt = -2
  BB 20
   Insn 160: point = 37, n_alt = 0
   Insn 159: point = 37, n_alt = -2
   Insn 158: point = 38, n_alt = -2
   Insn 156: point = 40, n_alt = -2
  BB 19
   Insn 155: point = 41, n_alt = 0
   Insn 154: point = 41, n_alt = -2
   Insn 153: point = 42, n_alt = 4
   Insn 152: point = 42, n_alt = 2
   Insn 151: point = 42, n_alt = 0
   Insn 149: point = 42, n_alt = -2
  BB 18
   Insn 148: point = 43, n_alt = 0
   Insn 147: point = 43, n_alt = -2
   Insn 146: point = 44, n_alt = 4
   Insn 145: point = 44, n_alt = 2
   Insn 144: point = 44, n_alt = 0
   Insn 143: point = 44, n_alt = 3
  BB 17
   Insn 141: point = 45, n_alt = -1
   Insn 140: point = 45, n_alt = 0
   Insn 139: point = 46, n_alt = 0
   Insn 138: point = 47, n_alt = 0
   Insn 136: point = 48, n_alt = -2
  BB 16
   Insn 135: point = 49, n_alt = 0
   Insn 134: point = 49, n_alt = -2
   Insn 133: point = 50, n_alt = 4
   Insn 132: point = 50, n_alt = 2
   Insn 131: point = 50, n_alt = 0
   Insn 130: point = 50, n_alt = 3
   Insn 129: point = 51, n_alt = 1
   Insn 128: point = 52, n_alt = 3
   Insn 127: point = 53, n_alt = -2
   Insn 126: point = 55, n_alt = -2
   Insn 125: point = 56, n_alt = 0
   Insn 124: point = 56, n_alt = -2
   Insn 122: point = 57, n_alt = -2
  BB 15
   Insn 121: point = 58, n_alt = 0
   Insn 120: point = 58, n_alt = -2
   Insn 119: point = 59, n_alt = -2
   Insn 117: point = 61, n_alt = -2
  BB 14
   Insn 116: point = 62, n_alt = 0
   Insn 115: point = 62, n_alt = -2
   Insn 114: point = 63, n_alt = 4
   Insn 113: point = 63, n_alt = 2
   Insn 112: point = 63, n_alt = 0
   Insn 111: point = 63, n_alt = 3
   Insn 110: point = 64, n_alt = 1
   Insn 109: point = 65, n_alt = 3
   Insn 108: point = 66, n_alt = -2
   Insn 107: point = 68, n_alt = -2
   Insn 106: point = 69, n_alt = 0
   Insn 105: point = 69, n_alt = -2
   Insn 103: point = 70, n_alt = -2
  BB 13
   Insn 102: point = 71, n_alt = 0
   Insn 101: point = 71, n_alt = -2
   Insn 100: point = 72, n_alt = -2
   Insn 98: point = 74, n_alt = -2
  BB 12
   Insn 97: point = 75, n_alt = 0
   Insn 96: point = 75, n_alt = -2
   Insn 95: point = 76, n_alt = 4
   Insn 94: point = 76, n_alt = 2
   Insn 93: point = 76, n_alt = 0
   Insn 92: point = 76, n_alt = 3
   Insn 91: point = 77, n_alt = 1
   Insn 90: point = 78, n_alt = 3
   Insn 89: point = 79, n_alt = -2
   Insn 88: point = 81, n_alt = -2
   Insn 87: point = 82, n_alt = 0
   Insn 86: point = 82, n_alt = -2
   Insn 84: point = 83, n_alt = -2
  BB 11
   Insn 83: point = 84, n_alt = 0
   Insn 82: point = 84, n_alt = -2
   Insn 81: point = 85, n_alt = -2
   Insn 79: point = 87, n_alt = -2
  BB 10
   Insn 78: point = 88, n_alt = 0
   Insn 77: point = 88, n_alt = -2
   Insn 76: point = 89, n_alt = 4
   Insn 75: point = 89, n_alt = 2
   Insn 74: point = 89, n_alt = 0
   Insn 73: point = 89, n_alt = 3
   Insn 72: point = 90, n_alt = 1
   Insn 71: point = 91, n_alt = 3
   Insn 70: point = 92, n_alt = -2
   Insn 69: point = 94, n_alt = -2
   Insn 68: point = 95, n_alt = 0
   Insn 67: point = 95, n_alt = -2
   Insn 65: point = 96, n_alt = -2
  BB 9
   Insn 64: point = 97, n_alt = 0
   Insn 63: point = 97, n_alt = -2
   Insn 62: point = 98, n_alt = -2
   Insn 60: point = 100, n_alt = -2
  BB 8
   Insn 59: point = 101, n_alt = 0
   Insn 58: point = 101, n_alt = -2
   Insn 57: point = 102, n_alt = 4
   Insn 56: point = 102, n_alt = 2
   Insn 55: point = 102, n_alt = 0
   Insn 54: point = 102, n_alt = 3
  BB 7
   Insn 52: point = 103, n_alt = 0
   Insn 51: point = 103, n_alt = -2
   Insn 50: point = 104, n_alt = -2
   Insn 49: point = 105, n_alt = 0
   Insn 48: point = 107, n_alt = 3
   Insn 46: point = 108, n_alt = -2
  BB 6
   Insn 45: point = 109, n_alt = 0
   Insn 44: point = 109, n_alt = -2
   Insn 43: point = 110, n_alt = -2
   Insn 41: point = 112, n_alt = -2
  BB 5
   Insn 40: point = 113, n_alt = 0
   Insn 39: point = 113, n_alt = -2
   Insn 38: point = 114, n_alt = 4
   Insn 37: point = 114, n_alt = 2
   Insn 36: point = 114, n_alt = 0
   Insn 35: point = 114, n_alt = 3
   Insn 34: point = 115, n_alt = 5
   Insn 32: point = 116, n_alt = -2
  BB 4
   Insn 31: point = 117, n_alt = 0
   Insn 30: point = 117, n_alt = -2
   Insn 29: point = 118, n_alt = 4
   Insn 28: point = 118, n_alt = 2
   Insn 27: point = 118, n_alt = 0
   Insn 26: point = 118, n_alt = 3
  BB 3
   Insn 24: point = 119, n_alt = 0
   Insn 23: point = 119, n_alt = -2
   Insn 22: point = 120, n_alt = -2
   Insn 21: point = 121, n_alt = 3
   Insn 20: point = 122, n_alt = -2
   Insn 19: point = 123, n_alt = 0
   Insn 18: point = 123, n_alt = -2
   Insn 17: point = 124, n_alt = 3
  BB 2
   Insn 15: point = 125, n_alt = 0
   Insn 14: point = 125, n_alt = -2
   Insn 13: point = 126, n_alt = -2
   Insn 12: point = 127, n_alt = 3
   Insn 11: point = 128, n_alt = 3
   Insn 10: point = 129, n_alt = 0
   Insn 9: point = 129, n_alt = -2
   Insn 8: point = 130, n_alt = 3
   Insn 5: point = 131, n_alt = 0
   Insn 3: point = 133, n_alt = 5
   Insn 2: point = 133, n_alt = 5
 r87: [120..122]
 r88: [111..112]
 r89: [109..110]
 r90: [104..108]
 r91: [103..105]
 r92: [99..100]
 r93: [97..98]
 r94: [95..96]
 r95: [93..94]
 r96: [90..92]
 r97: [86..87]
 r98: [84..85]
 r99: [82..83]
 r100: [80..81]
 r101: [77..79]
 r102: [73..74]
 r103: [71..72]
 r104: [69..70]
 r105: [67..68]
 r106: [64..66]
 r107: [60..61]
 r108: [58..59]
 r109: [56..57]
 r110: [54..55]
 r111: [51..53]
 r112: [47..48]
 r113: [41..42]
 r114: [39..40]
 r115: [37..38]
 r116: [35..36]
 r117: [32..34]
 r118: [28..29]
 r119: [26..27]
 r120: [24..25]
 r121: [22..23]
 r122: [19..21]
 r123: [0..1]
 r124: [115..116]
 r125: [45..46]
 r126: [13..14]
 r127: [129..130]
 r128: [126..128]
 r129: [125..127]
 r130: [123..124]
 r131: [119..121]
 r132: [117..118]
 r133: [113..114]
 r134: [106..107]
 r135: [101..102]
 r136: [90..91]
 r137: [88..89]
 r138: [77..78]
 r139: [75..76]
 r140: [64..65]
 r141: [62..63]
 r142: [51..52]
 r143: [49..50]
 r144: [43..44]
 r145: [32..33]
 r146: [30..31]
 r147: [19..20]
 r148: [17..18]
 r149: [15..16]
 r150: [8..9]
 r151: [11..11] [2..6]
 r152: [7..10]
 r155: [3..4]
 r156: [131..132]
 r157: [12..12]
Compressing live ranges: from 133 to 116 - 87%
Ranges after the compression:
 r87: [106..107]
 r88: [98..99]
 r89: [96..97]
 r90: [92..95]
 r91: [92..93]
 r92: [88..89]
 r93: [86..87]
 r94: [84..85]
 r95: [82..83]
 r96: [80..81]
 r97: [76..77]
 r98: [74..75]
 r99: [72..73]
 r100: [70..71]
 r101: [68..69]
 r102: [64..65]
 r103: [62..63]
 r104: [60..61]
 r105: [58..59]
 r106: [56..57]
 r107: [52..53]
 r108: [50..51]
 r109: [48..49]
 r110: [46..47]
 r111: [44..45]
 r112: [40..41]
 r113: [34..35]
 r114: [32..33]
 r115: [30..31]
 r116: [28..29]
 r117: [26..27]
 r118: [22..23]
 r119: [20..21]
 r120: [18..19]
 r121: [16..17]
 r122: [14..15]
 r123: [0..1]
 r124: [102..103]
 r125: [38..39]
 r126: [8..9]
 r127: [112..113]
 r128: [110..111]
 r129: [110..111]
 r130: [108..109]
 r131: [106..107]
 r132: [104..105]
 r133: [100..101]
 r134: [94..95]
 r135: [90..91]
 r136: [80..81]
 r137: [78..79]
 r138: [68..69]
 r139: [66..67]
 r140: [56..57]
 r141: [54..55]
 r142: [44..45]
 r143: [42..43]
 r144: [36..37]
 r145: [26..27]
 r146: [24..25]
 r147: [14..15]
 r148: [12..13]
 r149: [10..11]
 r150: [4..5]
 r151: [6..6] [2..3]
 r152: [4..5]
 r155: [2..3]
 r156: [114..115]
 r157: [7..7]

********** Assignment #1: **********

	 Assigning to 156 (cl=INDEX_REGS, orig=156, freq=1, tfirst=156, tfreq=1)...
	   Assign 0 to reload r156 (freq=1)
	 Assigning to 157 (cl=INDEX_REGS, orig=157, freq=1, tfirst=157, tfreq=1)...
	   Assign 3 to reload r157 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=65776, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=65744, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 22
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 50
changing reg in insn 49
changing reg in insn 51
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 117
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 136
changing reg in insn 138
changing reg in insn 149
changing reg in insn 154
changing reg in insn 156
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 163
changing reg in insn 165
changing reg in insn 167
changing reg in insn 174
changing reg in insn 179
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 192
changing reg in insn 217
changing reg in insn 218
changing reg in insn 32
changing reg in insn 34
changing reg in insn 139
changing reg in insn 140
changing reg in insn 202
changing reg in insn 222
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 30
changing reg in insn 35
changing reg in insn 39
changing reg in insn 48
changing reg in insn 49
changing reg in insn 54
changing reg in insn 58
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 143
changing reg in insn 147
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 191
changing reg in insn 192
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 207
changing reg in insn 208
changing reg in insn 251
changing reg in insn 210
changing reg in insn 217
changing reg in insn 257
changing reg in insn 210
changing reg in insn 214
changing reg in insn 215
changing reg in insn 5
changing reg in insn 223
deleting insn with uid = 32.
deleting insn with uid = 41.
deleting insn with uid = 43.
deleting insn with uid = 60.
deleting insn with uid = 62.
deleting insn with uid = 65.
deleting insn with uid = 69.
deleting insn with uid = 79.
deleting insn with uid = 81.
deleting insn with uid = 84.
deleting insn with uid = 88.
deleting insn with uid = 98.
deleting insn with uid = 100.
deleting insn with uid = 103.
deleting insn with uid = 107.
deleting insn with uid = 117.
deleting insn with uid = 119.
deleting insn with uid = 122.
deleting insn with uid = 126.
deleting insn with uid = 136.
deleting insn with uid = 149.
deleting insn with uid = 156.
deleting insn with uid = 158.
deleting insn with uid = 161.
deleting insn with uid = 174.
deleting insn with uid = 181.
deleting insn with uid = 183.
deleting insn with uid = 186.
deleting insn with uid = 222.
deleting insn with uid = 210.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 125.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 209.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 219.
verify found no changes in insn with uid = 225.


bool TSX::Parser::load(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={68d,56u} r1={58d,20u} r2={47d,11u} r3={3d,1u} r4={50d,15u} r5={70d,35u} r6={1d,61u} r7={1d,66u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r16={2u} r17={49d,3u} r18={35d} r19={35d} r20={1d,3u,1e} r21={36d} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={36d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={35d} r37={36d} r38={36d} r39={35d} r40={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r76={35d} r77={35d} r78={35d} r79={35d} r80={35d} 
;;    total ref usage 2942{2668d,273u,1e} in 163{128 regular + 35 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 128 129
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/TSXParser.cpp":21 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65760 [0xfffffffffffeff20])) [3 filename+0 S8 A64])
        (reg:DI 4 si [ filename ])) "libs/src/TSXParser.cpp":21 81 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70476+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [156])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":21 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (parallel [
            (set (reg:DI 0 ax [127])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65696 [0xfffffffffffeff60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":23 218 {*adddi_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [127])) "libs/src/TSXParser.cpp":23 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcEC1Ev") [flags 0x3]  <function_decl 0x7f441987e700 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":23 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 1 dx [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65760 [0xfffffffffffeff20])) [3 filename+0 S8 A64])) "libs/src/TSXParser.cpp":24 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 0 ax [129])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65728 [0xfffffffffffeff40])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":24 218 {*adddi_1}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [128])) "libs/src/TSXParser.cpp":24 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [129])) "libs/src/TSXParser.cpp":24 81 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml4fileIcEC1EPKc") [flags 0x3]  <function_decl 0x7f44194d0a00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":24 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       28 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 130 131
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65728 [0xfffffffffffeff40])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":25 218 {*adddi_1}
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "libs/src/TSXParser.cpp":25 81 {*movdi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml4fileIcE4dataEv") [flags 0x3]  <function_decl 0x7f441988a000 data>) [0 data S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":25 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 3 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "libs/src/TSXParser.cpp":25 81 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 0 ax [131])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65696 [0xfffffffffffeff60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":25 218 {*adddi_1}
     (nil))
(insn 22 21 23 3 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/TSXParser.cpp":25 81 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [131])) "libs/src/TSXParser.cpp":25 81 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE5parseILi0EEEvPc") [flags 0x3]  <function_decl 0x7f44194e8800 parse>) [0 parse S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":25 655 {*call}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 132
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (parallel [
            (set (reg:DI 0 ax [132])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65696 [0xfffffffffffeff60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":27 218 {*adddi_1}
     (nil))
(insn 27 26 28 4 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":27 82 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":27 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f4418886a20 *.LC0>)) "libs/src/TSXParser.cpp":27 81 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) "libs/src/TSXParser.cpp":27 81 {*movdi_internal}
     (nil))
(call_insn 31 30 230 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":27 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              5 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124 133
(note 230 31 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 230 35 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 _48 ] [124])) "libs/src/TSXParser.cpp":27 81 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":29 82 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f4418886ab0 *.LC1>)) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(call_insn 40 39 231 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":29 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              6 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89
(note 231 40 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 231 45 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(call_insn 45 44 232 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":29 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              7 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 134
(note 232 45 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 232 48 7 (set (reg/f:DI 1 dx [orig:90 _4 ] [90])
        (reg:DI 0 ax)) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 48 46 49 7 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [134])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -65736 [0xfffffffffffeff38])) [29 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 50 49 51 7 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:90 _4 ] [90])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "libs/src/TSXParser.cpp":29 81 {*movdi_internal}
     (nil))
(call_insn 52 51 53 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc") [flags 0x41]  <function_decl 0x7f441b51e500 operator=>) [0 operator= S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":29 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":30 82 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f4418886b40 *.LC2>)) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [135])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(call_insn 59 58 233 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":30 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              9 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93
(note 233 59 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 233 64 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 _7 ] [93])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(call_insn 64 63 234 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":30 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 136 137
(note 234 64 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 234 68 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 _8 ] [94])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(call_insn/i 68 67 70 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":30 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 68 71 10 (set (reg:SI 1 dx [orig:96 _10 ] [96])
        (reg:SI 0 ax [orig:95 _9 ] [95])) "libs/src/TSXParser.cpp":30 82 {*movsi_internal}
     (nil))
(insn 71 70 72 10 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":30 81 {*movdi_internal}
     (nil))
(insn 72 71 73 10 (set (mem:SI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 40 [0x28])) [19 this_54(D)->tileset.tileWidth+0 S4 A64])
        (reg:SI 1 dx [orig:96 _10 ] [96])) "libs/src/TSXParser.cpp":30 82 {*movsi_internal}
     (nil))
(insn 73 72 74 10 (set (reg:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(insn 74 73 75 10 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":31 82 {*movsi_internal}
     (nil))
(insn 75 74 76 10 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(insn 76 75 77 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f4418886bd0 *.LC3>)) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(insn 77 76 78 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [137])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(call_insn 78 77 235 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":31 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98
(note 235 78 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 235 83 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:98 _12 ] [98])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(call_insn 83 82 236 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":31 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 138 139
(note 236 83 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 86 236 87 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:99 _13 ] [99])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(call_insn/i 87 86 89 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":31 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 89 87 90 12 (set (reg:SI 1 dx [orig:101 _15 ] [101])
        (reg:SI 0 ax [orig:100 _14 ] [100])) "libs/src/TSXParser.cpp":31 82 {*movsi_internal}
     (nil))
(insn 90 89 91 12 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":31 81 {*movdi_internal}
     (nil))
(insn 91 90 92 12 (set (mem:SI (plus:DI (reg/f:DI 0 ax [138])
                (const_int 44 [0x2c])) [19 this_54(D)->tileset.tileHeight+0 S4 A32])
        (reg:SI 1 dx [orig:101 _15 ] [101])) "libs/src/TSXParser.cpp":31 82 {*movsi_internal}
     (nil))
(insn 92 91 93 12 (set (reg:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":32 82 {*movsi_internal}
     (nil))
(insn 94 93 95 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(insn 95 94 96 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f4418886c60 *.LC4>)) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(insn 96 95 97 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(call_insn 97 96 237 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":32 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103
(note 237 97 101 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 101 237 102 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 _17 ] [103])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(call_insn 102 101 238 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":32 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              14 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 140 141
(note 238 102 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 238 106 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 _18 ] [104])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(call_insn/i 106 105 108 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":32 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 108 106 109 14 (set (reg:SI 1 dx [orig:106 _20 ] [106])
        (reg:SI 0 ax [orig:105 _19 ] [105])) "libs/src/TSXParser.cpp":32 82 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":32 81 {*movdi_internal}
     (nil))
(insn 110 109 111 14 (set (mem:SI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 48 [0x30])) [19 this_54(D)->tileset.spacing+0 S4 A64])
        (reg:SI 1 dx [orig:106 _20 ] [106])) "libs/src/TSXParser.cpp":32 82 {*movsi_internal}
     (nil))
(insn 111 110 112 14 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(insn 112 111 113 14 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":33 82 {*movsi_internal}
     (nil))
(insn 113 112 114 14 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(insn 114 113 115 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f4418886cf0 *.LC5>)) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(insn 115 114 116 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(call_insn 116 115 239 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":33 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              15 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108
(note 239 116 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 120 239 121 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:108 _22 ] [108])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(call_insn 121 120 240 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":33 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              16 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 142 143
(note 240 121 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 124 240 125 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:109 _23 ] [109])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(call_insn/i 125 124 127 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":33 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 127 125 128 16 (set (reg:SI 1 dx [orig:111 _25 ] [111])
        (reg:SI 0 ax [orig:110 _24 ] [110])) "libs/src/TSXParser.cpp":33 82 {*movsi_internal}
     (nil))
(insn 128 127 129 16 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":33 81 {*movdi_internal}
     (nil))
(insn 129 128 130 16 (set (mem:SI (plus:DI (reg/f:DI 0 ax [142])
                (const_int 52 [0x34])) [19 this_54(D)->tileset.margin+0 S4 A32])
        (reg:SI 1 dx [orig:111 _25 ] [111])) "libs/src/TSXParser.cpp":33 82 {*movsi_internal}
     (nil))
(insn 130 129 131 16 (set (reg:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":35 81 {*movdi_internal}
     (nil))
(insn 131 130 132 16 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":35 82 {*movsi_internal}
     (nil))
(insn 132 131 133 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":35 81 {*movdi_internal}
     (nil))
(insn 133 132 134 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f4418886d80 *.LC6>)) "libs/src/TSXParser.cpp":35 81 {*movdi_internal}
     (nil))
(insn 134 133 135 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [143])) "libs/src/TSXParser.cpp":35 81 {*movdi_internal}
     (nil))
(call_insn 135 134 241 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":35 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              17 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 125
(note 241 135 138 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 138 241 139 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:112 _26 ] [112])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":35 4 {*cmpdi_ccno_1}
     (nil))
(insn 139 138 140 17 (set (reg:QI 0 ax [orig:125 retval.0_78 ] [125])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":35 613 {*setcc_qi}
     (nil))
(insn 140 139 141 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:125 retval.0_78 ] [125])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":35 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 141 140 142 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) "libs/src/TSXParser.cpp":35 617 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       18 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144
(note 142 141 143 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 18 (set (reg:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 144 143 145 18 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":36 82 {*movsi_internal}
     (nil))
(insn 145 144 146 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 146 145 147 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f4418886d80 *.LC6>)) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 147 146 148 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [144])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(call_insn 148 147 242 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":36 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              19 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113
(note 242 148 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 151 242 152 19 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":36 82 {*movsi_internal}
     (nil))
(insn 152 151 153 19 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 153 152 154 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f4418886e10 *.LC7>)) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 154 153 155 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:113 _27 ] [113])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(call_insn 155 154 243 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":36 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              20 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 115
(note 243 155 159 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 159 243 160 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 _29 ] [115])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(call_insn 160 159 244 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":36 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              21 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 117 145 146
(note 244 160 163 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 163 244 164 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:116 _30 ] [116])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(call_insn/i 164 163 165 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":36 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 165 164 166 21 (set (reg:SI 1 dx [orig:117 _31 ] [117])
        (reg:SI 0 ax)) "libs/src/TSXParser.cpp":36 82 {*movsi_internal}
     (nil))
(insn 166 165 167 21 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":36 81 {*movdi_internal}
     (nil))
(insn 167 166 168 21 (set (mem:SI (plus:DI (reg/f:DI 0 ax [145])
                (const_int 56 [0x38])) [19 this_54(D)->tileset.offsetX+0 S4 A64])
        (reg:SI 1 dx [orig:117 _31 ] [117])) "libs/src/TSXParser.cpp":36 82 {*movsi_internal}
     (nil))
(insn 168 167 169 21 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65736 [0xfffffffffffeff38])) [51 root_node+0 S8 A64])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 169 168 170 21 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":37 82 {*movsi_internal}
     (nil))
(insn 170 169 171 21 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 171 170 172 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f4418886d80 *.LC6>)) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 172 171 173 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [146])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(call_insn 173 172 245 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":37 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              22 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118
(note 245 173 176 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 176 245 177 22 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":37 82 {*movsi_internal}
     (nil))
(insn 177 176 178 22 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 178 177 179 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f4418886ea0 *.LC8>)) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 179 178 180 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:118 _32 ] [118])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(call_insn 180 179 246 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":37 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              23 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119 120
(note 246 180 184 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 184 246 185 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:120 _34 ] [120])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(call_insn 185 184 247 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":37 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 (ABNORMAL,ABNORMAL_CALL,EH)
;;              24 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121 122 147
(note 247 185 188 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 188 247 189 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:121 _35 ] [121])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(call_insn/i 189 188 190 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f441b433800 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) "libs/src/TSXParser.cpp":37 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 190 189 191 24 (set (reg:SI 1 dx [orig:122 _36 ] [122])
        (reg:SI 0 ax)) "libs/src/TSXParser.cpp":37 82 {*movsi_internal}
     (nil))
(insn 191 190 192 24 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -65752 [0xfffffffffffeff28])) [29 this+0 S8 A64])) "libs/src/TSXParser.cpp":37 81 {*movdi_internal}
     (nil))
(insn 192 191 193 24 (set (mem:SI (plus:DI (reg/f:DI 0 ax [147])
                (const_int 60 [0x3c])) [19 this_54(D)->tileset.offsetY+0 S4 A32])
        (reg:SI 1 dx [orig:122 _36 ] [122])) "libs/src/TSXParser.cpp":37 82 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       17
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 126 148 149
(code_label 193 192 194 25 36 (nil) [1 uses])
(note 194 193 195 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 25 (parallel [
            (set (reg:DI 0 ax [148])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65728 [0xfffffffffffeff40])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":24 218 {*adddi_1}
     (nil))
(insn 196 195 197 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) "libs/src/TSXParser.cpp":24 81 {*movdi_internal}
     (nil))
(call_insn 197 196 198 25 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml4fileIcED1Ev") [flags 0x3]  <function_decl 0x7f44194e8300 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":24 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 198 197 199 25 (parallel [
            (set (reg:DI 0 ax [149])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65696 [0xfffffffffffeff60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":23 218 {*adddi_1}
     (nil))
(insn 199 198 200 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [149])) "libs/src/TSXParser.cpp":23 81 {*movdi_internal}
     (nil))
(call_insn 200 199 201 25 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcED1Ev") [flags 0x3]  <function_decl 0x7f4419885900 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":23 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 201 200 202 25 (clobber (reg/i:QI 0 ax)) "libs/src/TSXParser.cpp":99 -1
     (nil))
(insn 202 201 223 25 (clobber (reg:QI 0 ax [orig:126 <retval> ] [126])) "libs/src/TSXParser.cpp":99 -1
     (nil))
(insn 223 202 224 25 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70476+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [157]))
        ]) "libs/src/TSXParser.cpp":99 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 224 223 260 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) "libs/src/TSXParser.cpp":99 617 {*jcc_1}
     (nil)
 -> 227)
;;  succ:       31
;;              26 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 260 224 262 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(jump_insn 262 260 263 26 (set (pc)
        (label_ref 261)) 649 {jump}
     (nil)
 -> 261)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 263 262 256)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       3 (ABNORMAL,ABNORMAL_CALL,EH)
;;              4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              6 (ABNORMAL,ABNORMAL_CALL,EH)
;;              7 (ABNORMAL,ABNORMAL_CALL,EH)
;;              8 (ABNORMAL,ABNORMAL_CALL,EH)
;;              9 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (ABNORMAL,ABNORMAL_CALL,EH)
;;              11 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 (ABNORMAL,ABNORMAL_CALL,EH)
;;              14 (ABNORMAL,ABNORMAL_CALL,EH)
;;              15 (ABNORMAL,ABNORMAL_CALL,EH)
;;              16 (ABNORMAL,ABNORMAL_CALL,EH)
;;              18 (ABNORMAL,ABNORMAL_CALL,EH)
;;              19 (ABNORMAL,ABNORMAL_CALL,EH)
;;              20 (ABNORMAL,ABNORMAL_CALL,EH)
;;              21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              22 (ABNORMAL,ABNORMAL_CALL,EH)
;;              23 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 27 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 151 152
(code_label/s 256 263 259 27 41 (nil) [1 uses])
(note 259 256 257 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 257 259 207 27 (set (reg:DI 3 bx [152])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
(insn 207 257 208 27 (parallel [
            (set (reg:DI 0 ax [150])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65728 [0xfffffffffffeff40])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":24 218 {*adddi_1}
     (nil))
(insn 208 207 209 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) "libs/src/TSXParser.cpp":24 81 {*movdi_internal}
     (nil))
(call_insn 209 208 264 27 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml4fileIcED1Ev") [flags 0x3]  <function_decl 0x7f44194e8300 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":24 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 264 209 265 27 (set (pc)
        (label_ref 212)) 649 {jump}
     (nil)
 -> 212)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151

(barrier 265 264 250)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 28 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 151
(code_label/s 250 265 255 28 40 (nil) [1 uses])
(note 255 250 251 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 251 255 212 28 (set (reg:DI 3 bx [151])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
;;  succ:       29 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 [100.0%]  (FALLTHRU)
;;              27 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 151
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 155
(code_label 212 251 213 29 38 (nil) [1 uses])
(note 213 212 214 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 29 (parallel [
            (set (reg:DI 0 ax [155])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -65696 [0xfffffffffffeff60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/TSXParser.cpp":23 218 {*adddi_1}
     (nil))
(insn 215 214 216 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) "libs/src/TSXParser.cpp":23 81 {*movdi_internal}
     (nil))
(call_insn 216 215 217 29 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcED1Ev") [flags 0x3]  <function_decl 0x7f4419885900 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":23 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 217 216 218 29 (set (reg/f:DI 0 ax [orig:123 D.70475 ] [123])
        (reg:DI 3 bx [151])) 81 {*movdi_internal}
     (nil))
(insn 218 217 219 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:123 D.70475 ] [123])) 81 {*movdi_internal}
     (nil))
(call_insn 219 218 220 29 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f441c511100 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 261)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 261 220 248 30 42 (nil) [1 uses])
(note 248 261 225 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(call_insn 225 248 226 30 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":99 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 226 225 227)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 1, flags: (RTL, MODIFIED)
;;  pred:       25
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 227 226 249 31 39 (nil) [1 uses])
(note 249 227 228 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 228 249 266 31 (use (reg/i:QI 0 ax)) "libs/src/TSXParser.cpp":99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 266 228 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EEEC2Ev, funcdef_no=2981, decl_uid=53386, cgraph_uid=855, symbol_order=876)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [58 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [58 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEEC2Ev") [flags 0x3]  <function_decl 0x7f4419c49a00 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":131 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":131 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EEED2Ev, funcdef_no=2984, decl_uid=53391, cgraph_uid=858, symbol_order=879)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [58 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [58 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEED2Ev") [flags 0x3]  <function_decl 0x7f4419c49c00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":139 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":139 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree_key_compare<_Key_compare>::_Rb_tree_key_compare() [with _Key_compare = std::less<std::__cxx11::basic_string<char> >] (_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev, funcdef_no=2987, decl_uid=53496, cgraph_uid=861, symbol_order=882)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


std::_Rb_tree_key_compare<_Key_compare>::_Rb_tree_key_compare() [with _Key_compare = std::less<std::__cxx11::basic_string<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [59 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":146 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":150 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::~_Rb_tree() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED2Ev, funcdef_no=2990, decl_uid=54226, cgraph_uid=864, symbol_order=885)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = 3
   Insn 13: point = 2, n_alt = 0
   Insn 12: point = 2, n_alt = -2
   Insn 11: point = 3, n_alt = -2
   Insn 10: point = 4, n_alt = 3
   Insn 9: point = 5, n_alt = -2
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [3..5]
 r88: [0..1]
 r89: [6..7]
 r90: [2..4]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 16.


std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::~_Rb_tree() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={7d,4u} r1={5d,1u} r2={4d} r4={5d,1u} r5={7d,4u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 264{242d,22u,0e} in 13{10 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":948 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv") [flags 0x3]  <function_decl 0x7f4419c71400 _M_begin>) [0 _M_begin S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":949 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E") [flags 0x3]  <function_decl 0x7f4419c84100 _M_erase>) [0 _M_erase S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":949 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_tree.h":949 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev") [flags 0x3]  <function_decl 0x7f44198b5c00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":949 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 16 20 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":949 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::vector() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EEC2Ev, funcdef_no=2993, decl_uid=57038, cgraph_uid=867, symbol_order=888)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::vector<_Tp, _Alloc>::vector() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":259 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EEC2Ev") [flags 0x3]  <function_decl 0x7f4419a15400 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":263 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":263 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt6vectorIN3TSX6Parser7TerrainESaIS2_EED2Ev, funcdef_no=2996, decl_uid=57043, cgraph_uid=870, symbol_order=891)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 3
   Insn 17: point = 2, n_alt = 0
   Insn 16: point = 2, n_alt = -2
   Insn 15: point = 3, n_alt = -2
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = 3
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 8, n_alt = 3
   Insn 10: point = 10, n_alt = 3
   Insn 9: point = 11, n_alt = -2
   Insn 8: point = 12, n_alt = 0
   Insn 7: point = 12, n_alt = -2
   Insn 6: point = 13, n_alt = 3
   Insn 2: point = 14, n_alt = 5
 r87: [12..13]
 r88: [4..11]
 r89: [3..8]
 r90: [2..5]
 r91: [0..1]
 r92: [9..10]
 r93: [6..7]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [8..9]
 r88: [2..7]
 r89: [2..5]
 r90: [2..3]
 r91: [0..1]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 14
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.


std::vector<_Tp, _Alloc>::~vector() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={9d,6u} r1={5d,1u} r2={5d,1u} r4={5d,1u} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 271{245d,26u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":433 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f44199e1c00 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":435 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 2 cx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 8 [0x8])) [41 this_6(D)->D.57046._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [93]) [41 this_6(D)->D.57046._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPN3TSX6Parser7TerrainES2_EvT_S4_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419302600 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":434 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [60 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EED2Ev") [flags 0x3]  <function_decl 0x7f4419a15600 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":435 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":435 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::vector() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EEC2Ev, funcdef_no=2999, decl_uid=58133, cgraph_uid=873, symbol_order=894)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::vector<_Tp, _Alloc>::vector() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":259 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EEC2Ev") [flags 0x3]  <function_decl 0x7f44196a1d00 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":263 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":263 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt6vectorIN3TSX6Parser4TileESaIS2_EED2Ev, funcdef_no=3002, decl_uid=58138, cgraph_uid=876, symbol_order=897)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 3
   Insn 17: point = 2, n_alt = 0
   Insn 16: point = 2, n_alt = -2
   Insn 15: point = 3, n_alt = -2
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = 3
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 8, n_alt = 3
   Insn 10: point = 10, n_alt = 3
   Insn 9: point = 11, n_alt = -2
   Insn 8: point = 12, n_alt = 0
   Insn 7: point = 12, n_alt = -2
   Insn 6: point = 13, n_alt = 3
   Insn 2: point = 14, n_alt = 5
 r87: [12..13]
 r88: [4..11]
 r89: [3..8]
 r90: [2..5]
 r91: [0..1]
 r92: [9..10]
 r93: [6..7]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [8..9]
 r88: [2..7]
 r89: [2..5]
 r90: [2..3]
 r91: [0..1]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 14
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.


std::vector<_Tp, _Alloc>::~vector() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={9d,6u} r1={5d,1u} r2={5d,1u} r4={5d,1u} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 271{245d,26u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":433 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f4419a86500 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":435 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 2 cx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 8 [0x8])) [45 this_6(D)->D.58141._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [93]) [45 this_6(D)->D.58141._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPN3TSX6Parser4TileES2_EvT_S4_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419309d00 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":434 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [61 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EED2Ev") [flags 0x3]  <function_decl 0x7f44196a1f00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":435 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":435 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_document<Ch>::xml_document() [with Ch = char] (_ZN8rapidxml12xml_documentIcEC2Ev, funcdef_no=3005, decl_uid=60510, cgraph_uid=879, symbol_order=900)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = 0
   Insn 12: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = 0
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = -2
   Insn 7: point = 5, n_alt = 0
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [4..5]
 r88: [0..1]
 r90: [2..3]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [0..1]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.


rapidxml::xml_document<Ch>::xml_document() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={3d} r2={3d} r4={4d,1u} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 187{169d,17u,1e} in 10{8 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1364 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 82 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcEC2ENS_9node_typeE") [flags 0x3]  <function_decl 0x7f441985f400 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1365 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 81 {*movdi_internal}
     (nil))
(call_insn 13 12 16 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcEC2Ev") [flags 0x3]  <function_decl 0x7f441986d200 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1365 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 13 17 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1367 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 16 0 NOTE_INSN_DELETED)

;; Function rapidxml::memory_pool<Ch>::~memory_pool() [with Ch = char] (_ZN8rapidxml11memory_poolIcED2Ev, funcdef_no=3008, decl_uid=60379, cgraph_uid=882, symbol_order=903)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


rapidxml::memory_pool<Ch>::~memory_pool() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":400 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":402 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "libs/src/../include/rapidxml/rapidxml.hpp":402 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5clearEv") [flags 0x3]  <function_decl 0x7f441985fb00 clear>) [0 clear S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":402 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":403 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function rapidxml::file<Ch>::file(const char*) [with Ch = char] (_ZN8rapidxml4fileIcEC2EPKc, funcdef_no=3011, decl_uid=61377, cgraph_uid=885, symbol_order=906)

      Creating newreg=147
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=148
Removing SCRATCH in insn #178 (nop 3)
rescanning insn with uid = 178.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=656, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r147
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 49:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 57:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 60:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=1209,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) o  (1) re {*movti_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 130:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r148
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 145:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26

********** Pseudo live ranges #1: **********

  BB 24
   Insn 175: point = 0, n_alt = 0
   Insn 174: point = 0, n_alt = -2
   Insn 173: point = 1, n_alt = -2
   Insn 172: point = 3, n_alt = 0
   Insn 171: point = 3, n_alt = -2
   Insn 170: point = 4, n_alt = 3
  BB 22
   Insn 227: point = 6, n_alt = -1
   Insn 166: point = 6, n_alt = -2
   Insn 165: point = 8, n_alt = 0
   Insn 164: point = 8, n_alt = -2
   Insn 163: point = 9, n_alt = 3
  BB 20
   Insn 225: point = 11, n_alt = -1
   Insn 159: point = 11, n_alt = -2
   Insn 158: point = 13, n_alt = 0
   Insn 157: point = 13, n_alt = -2
   Insn 155: point = 14, n_alt = -2
   Insn 154: point = 16, n_alt = 0
   Insn 153: point = 16, n_alt = -2
   Insn 152: point = 17, n_alt = 3
  BB 18
   Insn 223: point = 19, n_alt = -1
   Insn 148: point = 19, n_alt = -2
   Insn 147: point = 21, n_alt = 0
   Insn 146: point = 21, n_alt = -2
   Insn 145: point = 22, n_alt = 3
  BB 16
   Insn 221: point = 24, n_alt = -1
   Insn 141: point = 24, n_alt = -2
   Insn 140: point = 26, n_alt = 0
   Insn 139: point = 26, n_alt = -2
   Insn 138: point = 27, n_alt = 3
   Insn 213: point = 28, n_alt = -2
  BB 17
   Insn 207: point = 30, n_alt = -2
  BB 19
   Insn 201: point = 32, n_alt = -2
  BB 21
   Insn 195: point = 34, n_alt = -2
  BB 8
   Insn 67: point = 35, n_alt = 0
   Insn 66: point = 35, n_alt = -2
   Insn 65: point = 36, n_alt = 4
   Insn 64: point = 36, n_alt = -2
   Insn 63: point = 37, n_alt = 3
   Insn 62: point = 38, n_alt = 0
   Insn 61: point = 38, n_alt = -2
   Insn 60: point = 39, n_alt = 3
   Insn 59: point = 40, n_alt = 0
   Insn 58: point = 40, n_alt = -2
   Insn 57: point = 41, n_alt = 3
   Insn 56: point = 42, n_alt = 0
   Insn 55: point = 42, n_alt = -2
   Insn 54: point = 43, n_alt = 3
  BB 7
   Insn 52: point = 45, n_alt = 0
   Insn 51: point = 45, n_alt = -2
   Insn 50: point = 45, n_alt = -2
   Insn 49: point = 46, n_alt = 3
  BB 6
   Insn 47: point = 48, n_alt = 0
   Insn 46: point = 48, n_alt = -2
   Insn 45: point = 49, n_alt = -2
   Insn 44: point = 50, n_alt = -2
   Insn 43: point = 51, n_alt = 3
   Insn 42: point = 52, n_alt = 3
   Insn 41: point = 53, n_alt = 3
  BB 5
   Insn 39: point = 55, n_alt = 0
   Insn 38: point = 55, n_alt = -2
   Insn 37: point = 56, n_alt = 4
   Insn 36: point = 56, n_alt = -2
   Insn 35: point = 57, n_alt = 3
   Insn 34: point = 58, n_alt = 3
   Insn 33: point = 59, n_alt = 0
   Insn 32: point = 59, n_alt = -2
   Insn 31: point = 60, n_alt = 3
   Insn 30: point = 61, n_alt = -2
   Insn 29: point = 63, n_alt = -2
   Insn 28: point = 64, n_alt = 0
   Insn 27: point = 64, n_alt = 2
  BB 23
   Insn 189: point = 64, n_alt = -2
  BB 25
   Insn 180: point = 65, n_alt = 0
  BB 15
   Insn 219: point = 65, n_alt = -1
  BB 26
  BB 14
   Insn 179: point = 65, n_alt = -1
   Insn 178: point = 65, n_alt = 0
   Insn 216: point = 66, n_alt = -1
   Insn 133: point = 66, n_alt = 0
   Insn 132: point = 66, n_alt = -2
   Insn 131: point = 67, n_alt = 3
   Insn 130: point = 68, n_alt = 6
   Insn 129: point = 69, n_alt = -2
   Insn 128: point = 70, n_alt = 0
   Insn 127: point = 70, n_alt = -2
   Insn 126: point = 71, n_alt = -2
   Insn 125: point = 72, n_alt = 3
   Insn 124: point = 73, n_alt = 3
  BB 13
   Insn 122: point = 74, n_alt = 0
   Insn 121: point = 74, n_alt = -2
   Insn 120: point = 75, n_alt = -2
   Insn 119: point = 76, n_alt = -2
   Insn 118: point = 77, n_alt = 3
   Insn 117: point = 78, n_alt = -2
   Insn 116: point = 79, n_alt = 0
   Insn 115: point = 79, n_alt = -2
   Insn 114: point = 80, n_alt = 3
   Insn 113: point = 81, n_alt = 3
  BB 12
   Insn 111: point = 82, n_alt = 0
   Insn 110: point = 82, n_alt = -2
   Insn 109: point = 83, n_alt = -2
   Insn 108: point = 84, n_alt = 0
   Insn 107: point = 86, n_alt = 3
   Insn 106: point = 87, n_alt = 3
  BB 11
   Insn 104: point = 88, n_alt = 0
   Insn 103: point = 88, n_alt = -2
   Insn 102: point = 89, n_alt = -2
   Insn 101: point = 90, n_alt = -2
   Insn 100: point = 91, n_alt = 3
   Insn 99: point = 92, n_alt = 3
   Insn 98: point = 93, n_alt = 3
   Insn 97: point = 94, n_alt = 0
   Insn 96: point = 94, n_alt = -2
   Insn 95: point = 95, n_alt = 2
   Insn 94: point = 95, n_alt = 3
   Insn 93: point = 96, n_alt = 5
   Insn 92: point = 97, n_alt = -2
   Insn 91: point = 98, n_alt = 0
   Insn 90: point = 98, n_alt = -2
   Insn 89: point = 99, n_alt = 3
   Insn 87: point = 100, n_alt = 1
   Insn 86: point = 101, n_alt = -2
   Insn 85: point = 103, n_alt = -2
  BB 10
   Insn 84: point = 104, n_alt = 0
   Insn 83: point = 104, n_alt = -2
   Insn 82: point = 105, n_alt = 3
  BB 9
   Insn 80: point = 106, n_alt = 0
   Insn 79: point = 106, n_alt = -2
   Insn 78: point = 107, n_alt = 2
   Insn 77: point = 107, n_alt = 0
   Insn 76: point = 107, n_alt = 3
   Insn 75: point = 108, n_alt = 0
   Insn 74: point = 108, n_alt = -2
   Insn 73: point = 109, n_alt = 0
   Insn 72: point = 109, n_alt = 0
   Insn 71: point = 111, n_alt = 3
  BB 4
   Insn 25: point = 112, n_alt = -1
   Insn 24: point = 112, n_alt = 0
   Insn 22: point = 113, n_alt = -2
  BB 3
   Insn 21: point = 114, n_alt = 0
   Insn 20: point = 114, n_alt = -2
   Insn 19: point = 115, n_alt = 0
   Insn 18: point = 117, n_alt = 3
  BB 2
   Insn 16: point = 118, n_alt = 0
   Insn 15: point = 118, n_alt = -2
   Insn 14: point = 119, n_alt = -2
   Insn 13: point = 120, n_alt = 0
   Insn 12: point = 120, n_alt = 3
   Insn 11: point = 121, n_alt = 3
   Insn 10: point = 122, n_alt = 0
   Insn 9: point = 122, n_alt = -2
   Insn 8: point = 123, n_alt = 3
   Insn 5: point = 124, n_alt = 0
   Insn 3: point = 126, n_alt = 5
   Insn 2: point = 126, n_alt = 5
 r87: [122..123]
 r88: [96..97]
 r89: [82..87]
 r90: [83..84]
 r91: [76..81]
 r92: [79..80]
 r93: [75..78]
 r94: [70..73]
 r95: [68..69]
 r96: [3..4]
 r97: [112..113]
 r98: [35..61] [13..33]
 r99: [0..1]
 r100: [119..121]
 r101: [118..120]
 r102: [116..117]
 r103: [114..115]
 r104: [62..63]
 r105: [59..60]
 r106: [56..58]
 r107: [55..57]
 r108: [48..53]
 r109: [50..52]
 r110: [49..51]
 r111: [45..46]
 r112: [42..43]
 r113: [40..41]
 r114: [38..39]
 r115: [36..37]
 r116: [110..111]
 r117: [108..109]
 r118: [106..107]
 r119: [104..105]
 r120: [102..103]
 r121: [100..101]
 r122: [98..99]
 r123: [94..95]
 r124: [90..93]
 r125: [89..92]
 r126: [88..91]
 r127: [85..86]
 r128: [74..77]
 r129: [71..72]
 r130: [66..67]
 r131: [26..27]
 r132: [30..30] [20..24]
 r133: [25..28]
 r136: [21..22]
 r137: [32..32] [15..19]
 r139: [16..17]
 r140: [12..14]
 r142: [34..34] [7..11]
 r144: [8..9]
 r145: [64..64] [2..6]
 r147: [124..125]
 r148: [65..65]
Compressing live ranges: from 126 to 84 - 66%
Ranges after the compression:
 r87: [80..81]
 r88: [56..57]
 r89: [48..51]
 r90: [48..49]
 r91: [44..47]
 r92: [46..47]
 r93: [44..45]
 r94: [42..43]
 r95: [40..41]
 r96: [2..3]
 r97: [72..73]
 r98: [18..33] [6..16]
 r99: [0..1]
 r100: [78..79]
 r101: [78..79]
 r102: [76..77]
 r103: [74..75]
 r104: [34..35]
 r105: [32..33]
 r106: [30..31]
 r107: [30..31]
 r108: [28..29]
 r109: [28..29]
 r110: [28..29]
 r111: [26..27]
 r112: [24..25]
 r113: [22..23]
 r114: [20..21]
 r115: [18..19]
 r116: [70..71]
 r117: [68..69]
 r118: [66..67]
 r119: [64..65]
 r120: [62..63]
 r121: [60..61]
 r122: [58..59]
 r123: [54..55]
 r124: [52..53]
 r125: [52..53]
 r126: [52..53]
 r127: [50..51]
 r128: [44..45]
 r129: [42..43]
 r130: [38..39]
 r131: [12..13]
 r132: [14..14] [10..11]
 r133: [12..13]
 r136: [10..11]
 r137: [15..15] [8..9]
 r139: [8..9]
 r140: [6..7]
 r142: [17..17] [4..5]
 r144: [4..5]
 r145: [36..36] [2..3]
 r147: [82..83]
 r148: [37..37]

********** Assignment #1: **********

	 Assigning to 147 (cl=INDEX_REGS, orig=147, freq=1, tfirst=147, tfreq=1)...
	   Assign 0 to reload r147 (freq=1)
	 Assigning to 148 (cl=INDEX_REGS, orig=148, freq=1, tfirst=148, tfreq=1)...
	   Assign 0 to reload r148 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=656, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=624, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 92
changing reg in insn 93
changing reg in insn 106
changing reg in insn 110
changing reg in insn 108
changing reg in insn 109
changing reg in insn 113
changing reg in insn 119
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 120
changing reg in insn 124
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 170
changing reg in insn 171
changing reg in insn 22
changing reg in insn 24
changing reg in insn 30
changing reg in insn 157
changing reg in insn 66
changing reg in insn 51
changing reg in insn 173
changing reg in insn 174
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 38
changing reg in insn 41
changing reg in insn 46
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 99
changing reg in insn 102
changing reg in insn 100
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
changing reg in insn 118
changing reg in insn 121
changing reg in insn 125
changing reg in insn 126
changing reg in insn 131
changing reg in insn 132
changing reg in insn 138
changing reg in insn 139
changing reg in insn 207
changing reg in insn 141
changing reg in insn 148
changing reg in insn 213
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 201
changing reg in insn 148
changing reg in insn 155
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 159
changing reg in insn 195
changing reg in insn 159
changing reg in insn 166
changing reg in insn 163
changing reg in insn 164
changing reg in insn 189
changing reg in insn 166
changing reg in insn 173
changing reg in insn 5
changing reg in insn 178
deleting insn with uid = 22.
deleting insn with uid = 29.
deleting insn with uid = 36.
deleting insn with uid = 44.
deleting insn with uid = 85.
deleting insn with uid = 86.
deleting insn with uid = 92.
deleting insn with uid = 102.
deleting insn with uid = 129.
deleting insn with uid = 141.
deleting insn with uid = 148.
deleting insn with uid = 155.
deleting insn with uid = 166.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 128.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 165.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 180.


rapidxml::file<Ch>::file(const char*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;;  ref usage 	r0={69d,41u} r1={48d,11u} r2={36d,4u} r3={5d,5u} r4={44d,13u} r5={62d,31u} r6={1d,67u} r7={1d,57u} r8={31d} r9={31d} r10={31d} r11={31d} r12={31d} r13={31d} r14={31d} r15={31d} r16={5u} r17={60d,2u} r18={31d} r19={31d} r20={1d,6u,1e} r21={32d} r22={32d} r23={32d} r24={32d} r25={32d} r26={32d} r27={32d} r28={32d} r29={31d} r30={31d} r31={31d} r32={31d} r33={31d} r34={31d} r35={31d} r36={31d} r37={32d} r38={32d} r39={31d} r40={31d} r41={3d,1u} r45={31d} r46={31d} r47={31d} r48={31d} r49={31d} r50={31d} r51={31d} r52={31d} r53={31d} r54={31d} r55={31d} r56={31d} r57={31d} r58={31d} r59={31d} r60={31d} r61={31d} r62={31d} r63={31d} r64={31d} r65={31d} r66={31d} r67={31d} r68={31d} r69={31d} r70={31d} r71={31d} r72={31d} r73={31d} r74={31d} r75={31d} r76={31d} r77={31d} r78={31d} r79={31d} r80={31d} 
;;    total ref usage 2630{2386d,243u,1e} in 141{110 regular + 31 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 100 101
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":28 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [3 filename+0 S8 A64])
        (reg:DI 4 si [ filename ])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":28 81 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70489+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [147])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":28 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEEC1Ev") [flags 0x3]  <function_decl 0x7f44194d0300 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 2 cx [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [3 filename+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:DI 0 ax [101])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 218 {*adddi_1}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [100])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref:DI ("_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode") [flags 0x41]  <function_decl 0x7f4419ba1d00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 655 {*call}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       23 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 218 {*adddi_1}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 0 ax [103])
                (plus:DI (reg:DI 0 ax [102])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 218 {*adddi_1}
     (nil))
(insn 20 19 21 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 81 {*movdi_internal}
     (nil))
(call_insn 21 20 184 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNKSt9basic_iosIcSt11char_traitsIcEEntEv") [flags 0x41]  <function_decl 0x7f441a153700 operator!>) [0 operator! S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              4 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97
(note 184 21 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 184 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _22 ] [97])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":34 617 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 104 105 106 107
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:DI 5 di)
        (const_int 16 [0x10])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 28 27 30 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 28 31 5 (set (reg/f:DI 3 bx [orig:98 _42 ] [98])
        (reg/f:DI 0 ax [104])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -617 [0xfffffffffffffd97])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref:DI ("_ZNSaIcEC1Ev") [flags 0x41]  <function_decl 0x7f441b92c600 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 5 (parallel [
            (set (reg:DI 1 dx [106])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -617 [0xfffffffffffffd97])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 35 34 37 5 (parallel [
            (set (reg:DI 0 ax [107])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 37 35 38 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f44188b83f0 *.LC9>)) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 39 38 40 5 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_") [flags 0x41]  <function_decl 0x7f441b15eb00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       19 (ABNORMAL,ABNORMAL_CALL,EH)
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 109 110
(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 6 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 42 41 43 6 (set (reg:DI 1 dx [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [3 filename+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 43 42 45 6 (parallel [
            (set (reg:DI 2 cx [110])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 45 43 46 6 (set (reg:DI 4 si)
        (reg:DI 2 cx [110])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 6 (call (mem:QI (symbol_ref/i:DI ("_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_") [flags 0x3]  <function_decl 0x7f4419c02f00 operator+>) [0 operator+ S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 4 [0x4])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       17 (ABNORMAL,ABNORMAL_CALL,EH)
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 7 (parallel [
            (set (reg:DI 0 ax [111])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 50 49 51 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [111])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:98 _42 ] [98])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 52 51 53 7 (call (mem:QI (symbol_ref:DI ("_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE") [flags 0x41]  <function_decl 0x7f441a954000 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 5 [0x5])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       16 (ABNORMAL,ABNORMAL_CALL,EH)
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (parallel [
            (set (reg:DI 0 ax [112])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 55 54 56 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 56 55 57 8 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 57 56 58 8 (parallel [
            (set (reg:DI 0 ax [113])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 58 57 59 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 59 58 60 8 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 60 59 61 8 (parallel [
            (set (reg:DI 0 ax [114])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -617 [0xfffffffffffffd97])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 61 60 62 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 62 61 63 8 (call (mem:QI (symbol_ref:DI ("_ZNSaIcED1Ev") [flags 0x41]  <function_decl 0x7f441b92c800 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 63 62 64 8 (set (reg:DI 0 ax [115])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("_ZNSt13runtime_errorD1Ev") [flags 0x41]  <function_decl 0x7f441a954300 __comp_dtor >)
                    ] UNSPEC_GOTPCREL)) [66  S8 A8])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:DI 1 dx)
        (reg:DI 0 ax [115])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZNSt13runtime_errorD1Ev") [flags 0x41]  <function_decl 0x7f441a954300 __comp_dtor >)
        (nil)))
(insn 65 64 66 8 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZTISt13runtime_error") [flags 0x40]  <var_decl 0x7f441a955000 _ZTISt13runtime_error>)) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(insn 66 65 67 8 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:98 _42 ] [98])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 67 66 68 8 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 68 67 69)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 117 118
(code_label 69 68 70 9 54 (nil) [1 uses])
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 9 (parallel [
            (set (reg:DI 0 ax [116])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":36 218 {*adddi_1}
     (nil))
(insn 72 71 73 9 (parallel [
            (set (reg:DI 0 ax [117])
                (plus:DI (reg:DI 0 ax [116])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":36 218 {*adddi_1}
     (nil))
(insn 73 72 74 9 (set (reg:SI 4 si)
        (const_int 4096 [0x1000])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":36 82 {*movsi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":36 81 {*movdi_internal}
     (nil))
(call_insn 75 74 76 9 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8ios_base6unsetfESt13_Ios_Fmtflags") [flags 0x3]  <function_decl 0x7f441a5bca00 unsetf>) [0 unsetf S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":36 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 76 75 77 9 (parallel [
            (set (reg:DI 0 ax [118])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":39 218 {*adddi_1}
     (nil))
(insn 77 76 78 9 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":39 82 {*movsi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":39 81 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":39 81 {*movdi_internal}
     (nil))
(call_insn 80 79 81 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSi5seekgElSt12_Ios_Seekdir") [flags 0x41]  <function_decl 0x7f441a2abf00 seekg>) [0 seekg S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":39 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119
(note 81 80 82 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 10 (parallel [
            (set (reg:DI 0 ax [119])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 218 {*adddi_1}
     (nil))
(insn 83 82 84 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [119])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 81 {*movdi_internal}
     (nil))
(call_insn 84 83 185 10 (set (reg:TI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSi5tellgEv") [flags 0x41]  <function_decl 0x7f441a2abd00 tellg>) [0 tellg S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 120 121 122 123 124 125 126
(note 185 84 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 185 89 11 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [0 D.63764+0 S16 A64])
        (reg:TI 0 ax [121])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 80 {*movti_internal}
     (nil))
(insn 89 87 90 11 (parallel [
            (set (reg:DI 0 ax [122])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 218 {*adddi_1}
     (nil))
(insn 90 89 91 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [122])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 81 {*movdi_internal}
     (nil))
(call_insn 91 90 93 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt4fposI11__mbstate_tEcvlEv") [flags 0x3]  <function_decl 0x7f441930fd00 operator 5>) [0 operator 5 S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 93 91 94 11 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [8 size+0 S8 A64])
        (reg:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":40 81 {*movdi_internal}
     (nil))
(insn 94 93 95 11 (parallel [
            (set (reg:DI 0 ax [123])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 218 {*adddi_1}
     (nil))
(insn 95 94 96 11 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(insn 96 95 97 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(call_insn 97 96 98 11 (call (mem:QI (symbol_ref/i:DI ("_ZNSt4fposI11__mbstate_tEC1El") [flags 0x3]  <function_decl 0x7f441931a500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 98 97 99 11 (set (reg:DI 2 cx [124])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -576 [0xfffffffffffffdc0])) [0 D.63765+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(insn 99 98 100 11 (set (reg:DI 1 dx [125])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -568 [0xfffffffffffffdc8])) [0 D.63765+8 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(insn 100 99 101 11 (parallel [
            (set (reg:DI 0 ax [126])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 218 {*adddi_1}
     (nil))
(insn 101 100 103 11 (set (reg:DI 4 si)
        (reg:DI 2 cx [124])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(insn 103 101 104 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [126])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 81 {*movdi_internal}
     (nil))
(call_insn 104 103 105 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSi5seekgESt4fposI11__mbstate_tE") [flags 0x41]  <function_decl 0x7f441a2abe00 seekg>) [0 seekg S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":41 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list (use (reg:DI 1 dx))
            (expr_list (use (reg:DI 4 si))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 127
(note 105 104 106 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 12 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 81 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:DI 1 dx [127])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 81 {*movdi_internal}
     (nil))
(insn 108 107 109 12 (parallel [
            (set (reg:DI 1 dx [orig:90 _4 ] [90])
                (plus:DI (reg:DI 1 dx [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -600 [0xfffffffffffffda8])) [8 size+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 109 108 110 12 (set (reg:DI 4 si)
        (reg:DI 1 dx [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 81 {*movdi_internal}
     (nil))
(insn 110 109 111 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 81 {*movdi_internal}
     (nil))
(call_insn 111 110 112 12 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE6resizeEm") [flags 0x3]  <function_decl 0x7f44194a1200 resize>) [0 resize S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":44 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 128
(note 112 111 113 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 13 (set (reg:DI 3 bx [orig:91 size.3_5 ] [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(insn 114 113 115 13 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(insn 115 114 116 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 _6 ] [92])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(call_insn 116 115 117 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE5frontEv") [flags 0x3]  <function_decl 0x7f44194a1e00 front>) [0 front S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 116 118 13 (set (reg/f:DI 2 cx [orig:93 _7 ] [93])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (parallel [
            (set (reg:DI 0 ax [128])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 218 {*adddi_1}
     (nil))
(insn 119 118 120 13 (set (reg:DI 1 dx)
        (reg:DI 3 bx [orig:91 size.3_5 ] [91])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(insn 120 119 121 13 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:93 _7 ] [93])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(insn 121 120 122 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [128])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 81 {*movdi_internal}
     (nil))
(call_insn 122 121 123 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSi4readEPcl") [flags 0x41]  <function_decl 0x7f441a2ab800 read>) [0 read S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":45 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 129 130
(note 123 122 124 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 14 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 81 {*movdi_internal}
     (nil))
(insn 125 124 126 14 (set (reg:DI 1 dx [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 81 {*movdi_internal}
     (nil))
(insn 126 125 127 14 (set (reg:DI 4 si)
        (reg:DI 1 dx [129])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 81 {*movdi_internal}
     (nil))
(insn 127 126 128 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 _8 ] [94])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 81 {*movdi_internal}
     (nil))
(call_insn 128 127 130 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEEixEm") [flags 0x3]  <function_decl 0x7f44194a1900 operator[]>) [0 operator[] S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 130 128 131 14 (set (mem:QI (reg/f:DI 0 ax [orig:95 _9 ] [95]) [0 *_9+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":46 84 {*movqi_internal}
     (nil))
(insn 131 130 132 14 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 218 {*adddi_1}
     (nil))
(insn 132 131 133 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 81 {*movdi_internal}
     (nil))
(call_insn 133 132 216 14 (call (mem:QI (symbol_ref:DI ("_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev") [flags 0x41]  <function_decl 0x7f4419ba5200 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 216 133 178 14 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":47 684 {nop}
     (nil))
(insn 178 216 179 14 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70489+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [148]))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":47 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 179 178 217 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":47 617 {*jcc_1}
     (nil)
 -> 182)
;;  succ:       26
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 217 179 219 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 219 217 220 15 (set (pc)
        (label_ref 218)) 649 {jump}
     (nil)
 -> 218)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 212)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       7 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 16 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 131 132 133
(code_label/s 212 220 215 16 65 (nil) [1 uses])
(note 215 212 213 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 213 215 138 16 (set (reg:DI 41 r12 [133])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
(insn 138 213 139 16 (parallel [
            (set (reg:DI 0 ax [131])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 139 138 140 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [131])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 140 139 221 16 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 221 140 222 16 (set (pc)
        (label_ref 143)) 649 {jump}
     (nil)
 -> 143)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 132

(barrier 222 221 206)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       6 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 17 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 132
(code_label/s 206 222 211 17 64 (nil) [1 uses])
(note 211 206 207 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 207 211 143 17 (set (reg:DI 41 r12 [132])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 132

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 132
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 132
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 136 137
(code_label 143 207 144 18 56 (nil) [1 uses])
(note 144 143 145 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 18 (parallel [
            (set (reg:DI 0 ax [136])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -576 [0xfffffffffffffdc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 146 145 147 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [136])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 147 146 223 18 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 223 147 224 18 (set (pc)
        (label_ref 150)) 649 {jump}
     (nil)
 -> 150)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 137

(barrier 224 223 200)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 19 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 137
(code_label/s 200 224 205 19 63 (nil) [1 uses])
(note 205 200 201 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 201 205 150 19 (set (reg:DI 41 r12 [137])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 137

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 [100.0%]  (FALLTHRU)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 137
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 137
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 140 142
(code_label 150 201 151 20 57 (nil) [1 uses])
(note 151 150 152 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 20 (parallel [
            (set (reg:DI 0 ax [139])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -617 [0xfffffffffffffd97])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 218 {*adddi_1}
     (nil))
(insn 153 152 154 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 154 153 157 20 (call (mem:QI (symbol_ref:DI ("_ZNSaIcED1Ev") [flags 0x41]  <function_decl 0x7f441b92c800 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 157 154 158 20 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:98 _42 ] [98])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 81 {*movdi_internal}
     (nil))
(call_insn 158 157 159 20 (call (mem:QI (symbol_ref:DI ("__cxa_free_exception") [flags 0x41]  <function_decl 0x7f441930fa00 __cxa_free_exception>) [0 __cxa_free_exception S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":35 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 159 158 225 20 (set (reg:DI 3 bx [142])
        (reg:DI 41 r12 [140])) 81 {*movdi_internal}
     (nil))
(jump_insn 225 159 226 20 (set (pc)
        (label_ref 161)) 649 {jump}
     (nil)
 -> 161)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142

(barrier 226 225 194)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       3 (ABNORMAL,ABNORMAL_CALL,EH)
;;              8 (ABNORMAL,ABNORMAL_CALL,EH)
;;              9 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (ABNORMAL,ABNORMAL_CALL,EH)
;;              11 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 21 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 142
(code_label/s 194 226 199 21 62 (nil) [1 uses])
(note 199 194 195 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 195 199 161 21 (set (reg:DI 3 bx [142])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              20 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145
(code_label 161 195 162 22 58 (nil) [1 uses])
(note 162 161 163 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 22 (parallel [
            (set (reg:DI 0 ax [144])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -544 [0xfffffffffffffde0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 218 {*adddi_1}
     (nil))
(insn 164 163 165 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [144])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 81 {*movdi_internal}
     (nil))
(call_insn 165 164 227 22 (call (mem:QI (symbol_ref:DI ("_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev") [flags 0x41]  <function_decl 0x7f4419ba5200 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":33 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 227 165 228 22 (set (pc)
        (label_ref 168)) 649 {jump}
     (nil)
 -> 168)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145

(barrier 228 227 188)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 23 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 145
(code_label/s 188 228 193 23 61 (nil) [1 uses])
(note 193 188 189 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 189 193 168 23 (set (reg:DI 3 bx [145])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
;;  succ:       24 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 [100.0%]  (FALLTHRU)
;;              22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 99
(code_label 168 189 169 24 59 (nil) [1 uses])
(note 169 168 170 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 24 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 81 {*movdi_internal}
     (nil))
(insn 171 170 172 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 _10 ] [96])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 81 {*movdi_internal}
     (nil))
(call_insn 172 171 173 24 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEED1Ev") [flags 0x3]  <function_decl 0x7f44194d0500 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":29 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 173 172 174 24 (set (reg/f:DI 0 ax [orig:99 D.70487 ] [99])
        (reg:DI 3 bx [145])) 81 {*movdi_internal}
     (nil))
(insn 174 173 175 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:99 D.70487 ] [99])) 81 {*movdi_internal}
     (nil))
(call_insn 175 174 176 24 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f441c511100 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 176 175 218)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       15 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 218 176 186 25 66 (nil) [1 uses])
(note 186 218 180 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(call_insn 180 186 181 25 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":47 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 182)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 182 181 187 26 60 (nil) [1 uses])
(note 187 182 229 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 229 187 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEED2Ev, funcdef_no=3014, decl_uid=61363, cgraph_uid=888, symbol_order=909)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 3
   Insn 17: point = 2, n_alt = 0
   Insn 16: point = 2, n_alt = -2
   Insn 15: point = 3, n_alt = -2
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = 3
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 8, n_alt = 3
   Insn 10: point = 10, n_alt = 3
   Insn 9: point = 11, n_alt = -2
   Insn 8: point = 12, n_alt = 0
   Insn 7: point = 12, n_alt = -2
   Insn 6: point = 13, n_alt = 3
   Insn 2: point = 14, n_alt = 5
 r87: [12..13]
 r88: [4..11]
 r89: [3..8]
 r90: [2..5]
 r91: [0..1]
 r92: [9..10]
 r93: [6..7]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [8..9]
 r88: [2..7]
 r89: [2..5]
 r90: [2..3]
 r91: [0..1]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 14
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.


std::vector<_Tp, _Alloc>::~vector() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={9d,6u} r1={5d,1u} r2={5d,1u} r4={5d,1u} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 271{245d,26u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":433 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":435 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 2 cx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 8 [0x8])) [3 this_6(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [93]) [3 this_6(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPccEvT_S1_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419321500 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":434 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEED2Ev") [flags 0x3]  <function_decl 0x7f4419487a00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":435 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":435 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function Ch* rapidxml::file<Ch>::data() [with Ch = char] (_ZN8rapidxml4fileIcE4dataEv, funcdef_no=3016, decl_uid=60586, cgraph_uid=890, symbol_order=911)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = -2
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
deleting insn with uid = 9.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


Ch* rapidxml::file<Ch>::data() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{93d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [47 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":65 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [47 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":67 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":67 81 {*movdi_internal}
     (nil))
(call_insn 8 7 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE5frontEv") [flags 0x3]  <function_decl 0x7f44194a1e00 front>) [0 front S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml_utils.hpp":67 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 8 17 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml_utils.hpp":68 81 {*movdi_internal}
     (nil))
(insn 17 16 19 2 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml_utils.hpp":68 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function rapidxml::parse_error::~parse_error() (_ZN8rapidxml11parse_errorD2Ev, funcdef_no=3019, decl_uid=34937, cgraph_uid=892, symbol_order=913)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = 3
   Insn 8: point = 2, n_alt = 5
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 4, n_alt = 4
   Insn 2: point = 5, n_alt = 5
 r87: [2..4]
 r88: [0..1]
 r89: [2..3]
Compressing live ranges: from 5 to 4 - 80%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


rapidxml::parse_error::~parse_error()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,2u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,5u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 108{94d,14u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca6c0 _ZTVN8rapidxml11parse_errorE>)
                (const_int 16 [0x10])))) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 0 ax [89]) [2 this_4(D)->D.34948._vptr.exception+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref:DI ("_ZNSt9exceptionD2Ev") [flags 0x41]  <function_decl 0x7f441b88d700 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":71 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 11 15 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":71 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function virtual rapidxml::parse_error::~parse_error() (_ZN8rapidxml11parse_errorD0Ev, funcdef_no=3021, decl_uid=34931, cgraph_uid=894, symbol_order=915)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 2
   Insn 9: point = 1, n_alt = 3
   Insn 8: point = 2, n_alt = 0
   Insn 7: point = 2, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.


virtual rapidxml::parse_error::~parse_error()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r4={4d,1u} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 183{167d,16u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":71 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [17 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/../include/rapidxml/rapidxml.hpp":71 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZdlPvm") [flags 0x41]  <function_decl 0x7f441c516100 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":71 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 12 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_document<Ch>::parse(Ch*) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE5parseILi0EEEvPc, funcdef_no=3017, decl_uid=61415, cgraph_uid=901, symbol_order=922)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 12
EBB 11

********** Pseudo live ranges #1: **********

  BB 3
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = 4
   Insn 13: point = 0, n_alt = 4
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = 4
  BB 9
   Insn 84: point = 0, n_alt = 0
   Insn 83: point = 0, n_alt = -2
   Insn 82: point = 1, n_alt = 4
   Insn 81: point = 1, n_alt = 4
   Insn 80: point = 1, n_alt = 0
   Insn 79: point = 1, n_alt = -2
   Insn 78: point = 1, n_alt = 4
   Insn 77: point = 1, n_alt = -2
   Insn 76: point = 2, n_alt = 3
   Insn 75: point = 3, n_alt = -2
   Insn 74: point = 5, n_alt = -2
   Insn 73: point = 6, n_alt = 0
   Insn 72: point = 6, n_alt = 2
  BB 11
   Insn 95: point = 6, n_alt = -1
  BB 12
   Insn 103: point = 6, n_alt = -1
  BB 5
   Insn 37: point = 6, n_alt = -1
   Insn 36: point = 6, n_alt = 0
   Insn 35: point = 7, n_alt = 2
   Insn 34: point = 9, n_alt = 3
   Insn 33: point = 10, n_alt = 0
   Insn 32: point = 10, n_alt = -2
   Insn 31: point = 11, n_alt = 3
  BB 10
   Insn 99: point = 12, n_alt = -1
  BB 8
   Insn 97: point = 12, n_alt = -1
   Insn 65: point = 12, n_alt = 0
   Insn 64: point = 12, n_alt = -2
   Insn 63: point = 13, n_alt = -2
   Insn 62: point = 14, n_alt = 3
   Insn 61: point = 15, n_alt = 3
  BB 7
   Insn 59: point = 16, n_alt = -1
   Insn 58: point = 16, n_alt = 1
   Insn 57: point = 16, n_alt = 5
   Insn 56: point = 17, n_alt = -2
   Insn 55: point = 18, n_alt = 0
   Insn 54: point = 18, n_alt = -2
   Insn 53: point = 19, n_alt = -2
   Insn 52: point = 20, n_alt = 3
   Insn 51: point = 21, n_alt = 3
   Insn 50: point = 22, n_alt = 5
   Insn 49: point = 23, n_alt = 0
   Insn 48: point = 25, n_alt = 3
  BB 6
   Insn 46: point = 26, n_alt = -1
   Insn 45: point = 26, n_alt = 0
   Insn 44: point = 27, n_alt = 2
   Insn 43: point = 29, n_alt = 3
  BB 4
   Insn 29: point = 30, n_alt = 0
   Insn 28: point = 30, n_alt = -2
   Insn 27: point = 31, n_alt = -2
   Insn 26: point = 32, n_alt = 3
   Insn 25: point = 33, n_alt = 3
   Insn 24: point = 34, n_alt = 0
   Insn 23: point = 34, n_alt = -2
   Insn 22: point = 35, n_alt = 3
   Insn 21: point = 36, n_alt = 0
   Insn 20: point = 36, n_alt = -2
   Insn 19: point = 37, n_alt = 3
  BB 2
   Insn 9: point = 38, n_alt = -1
   Insn 8: point = 38, n_alt = 0
   Insn 7: point = 39, n_alt = 3
   Insn 3: point = 40, n_alt = 5
   Insn 2: point = 40, n_alt = 5
 r87: [38..39]
 r88: [36..37]
 r89: [34..35]
 r90: [8..9]
 r91: [6..7]
 r92: [28..29]
 r93: [26..27]
 r94: [24..25]
 r95: [22..23]
 r96: [12..15]
 r97: [1..2]
 r98: [0..3]
 r99: [16..17]
 r100: [31..33]
 r101: [30..32]
 r102: [10..11]
 r103: [19..21]
 r104: [18..20]
 r105: [13..14]
 r106: [4..5]
Compressing live ranges: from 40 to 32 - 80%
Ranges after the compression:
 r87: [30..31]
 r88: [28..29]
 r89: [26..27]
 r90: [6..7]
 r91: [4..5]
 r92: [22..23]
 r93: [20..21]
 r94: [18..19]
 r95: [16..17]
 r96: [10..11]
 r97: [0..1]
 r98: [0..1]
 r99: [12..13]
 r100: [24..25]
 r101: [24..25]
 r102: [8..9]
 r103: [14..15]
 r104: [14..15]
 r105: [10..11]
 r106: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 61
changing reg in insn 64
changing reg in insn 76
changing reg in insn 77
changing reg in insn 75
changing reg in insn 83
changing reg in insn 79
changing reg in insn 56
changing reg in insn 57
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 54
changing reg in insn 62
changing reg in insn 63
changing reg in insn 74
changing reg in insn 75
deleting insn with uid = 56.
deleting insn with uid = 74.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 84.


void rapidxml::xml_document<Ch>::parse(Ch*) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={25d,16u} r1={17d,6u} r2={12d,1u} r3={1d,2u} r4={17d,7u} r5={21d,11u} r6={1d,31u} r7={1d,22u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={18d,4u} r18={10d} r19={10d} r20={1d,1u} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 885{784d,101u,0e} in 64{54 regular + 10 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1381 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1381 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [orig:87 text.29_1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1383 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 text.29_1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1383 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1383 617 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZN8rapidxml12xml_documentIcE5parseILi0EEEvPcE19__PRETTY_FUNCTION__") [flags 0x2]  <var_decl 0x7f4419327bd0 __PRETTY_FUNCTION__>)) "libs/src/../include/rapidxml/rapidxml.hpp":1383 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 dx)
        (const_int 1383 [0x567])) "libs/src/../include/rapidxml/rapidxml.hpp":1383 82 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44188d42d0 *.LC10>)) "libs/src/../include/rapidxml/rapidxml.hpp":1383 81 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f44188d4360 *.LC11>)) "libs/src/../include/rapidxml/rapidxml.hpp":1383 81 {*movdi_internal}
     (nil))
(call_insn 15 14 16 3 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f441a7d0b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1383 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 16 15 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 100 101
(code_label 17 16 18 4 73 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1386 81 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1386 81 {*movdi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE16remove_all_nodesEv") [flags 0x3]  <function_decl 0x7f441985c400 remove_all_nodes>) [0 remove_all_nodes S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1386 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1387 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":1387 81 {*movdi_internal}
     (nil))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE21remove_all_attributesEv") [flags 0x3]  <function_decl 0x7f441985cc00 remove_all_attributes>) [0 remove_all_attributes S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1387 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 1 dx [100])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1390 218 {*adddi_1}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1390 81 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1390 81 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "libs/src/../include/rapidxml/rapidxml.hpp":1390 81 {*movdi_internal}
     (nil))
(call_insn 29 28 88 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE9parse_bomILi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321c00 parse_bom>) [0 parse_bom S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1390 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              10 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 102
(code_label 88 29 30 5 79 (nil) [1 uses])
(note 30 88 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1396 218 {*adddi_1}
     (nil))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1396 81 {*movdi_internal}
     (nil))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1396 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 5 (set (reg/f:DI 0 ax [orig:90 text.30_4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1397 81 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 text.30_4 ] [90]) [0 *text.30_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1397 84 {*movqi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1397 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 37 36 42 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 102)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1397 617 {*jcc_1}
     (nil)
 -> 102)
;;  succ:       12
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93
(note 42 37 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 6 (set (reg/f:DI 0 ax [orig:92 text.31_6 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1401 81 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 text.31_6 ] [92]) [0 *text.31_6+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1401 84 {*movqi_internal}
     (nil))
(insn 45 44 46 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 _7 ] [93])
            (const_int 60 [0x3c]))) "libs/src/../include/rapidxml/rapidxml.hpp":1401 5 {*cmpqi_1}
     (nil))
(jump_insn 46 45 47 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1401 617 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 99 103 104
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg/f:DI 0 ax [orig:94 text.32_8 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1403 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:94 text.32_8 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1403 218 {*adddi_1}
     (nil))
(insn 50 49 51 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1403 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (parallel [
            (set (reg:DI 1 dx [103])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1404 218 {*adddi_1}
     (nil))
(insn 52 51 53 7 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1404 81 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:DI 4 si)
        (reg:DI 1 dx [103])) "libs/src/../include/rapidxml/rapidxml.hpp":1404 81 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1404 81 {*movdi_internal}
     (nil))
(call_insn 55 54 57 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE10parse_nodeILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f4419321e00 parse_node>) [0 parse_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1404 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 57 55 58 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])
        (reg/f:DI 0 ax [orig:99 _27 ] [99])) "libs/src/../include/rapidxml/rapidxml.hpp":1404 81 {*movdi_internal}
     (nil))
(insn 58 57 59 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1404 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 59 58 60 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 86)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1404 617 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 105
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 8 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1405 81 {*movdi_internal}
     (nil))
(insn 62 61 63 8 (set (reg:DI 1 dx [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1405 81 {*movdi_internal}
     (nil))
(insn 63 62 64 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [105])) "libs/src/../include/rapidxml/rapidxml.hpp":1405 81 {*movdi_internal}
     (nil))
(insn 64 63 65 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 _10 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1405 81 {*movdi_internal}
     (nil))
(call_insn 65 64 97 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE11append_nodeEPS1_") [flags 0x3]  <function_decl 0x7f4419852f00 append_node>) [0 append_node S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1405 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 97 65 98 8 (set (pc)
        (label_ref 86)) 649 {jump}
     (nil)
 -> 86)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 98 97 70)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 106
(code_label 70 98 71 9 76 (nil) [1 uses])
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(call_insn 73 72 75 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1408 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 73 76 9 (set (reg/f:DI 3 bx [orig:98 _22 ] [98])
        (reg/f:DI 0 ax [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 76 75 77 9 (set (reg/f:DI 0 ax [orig:97 text.33_11 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 77 76 78 9 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:97 text.33_11 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f44188d43f0 *.LC12>)) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:98 _22 ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(call_insn 80 79 81 9 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 81 80 82 9 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(insn 83 82 84 9 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:98 _22 ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 81 {*movdi_internal}
     (nil))
(call_insn 84 83 85 9 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1408 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 85 84 86)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 86 85 87 10 78 (nil) [2 uses])
(note 87 86 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 99 87 100 10 (set (pc)
        (label_ref 88)) "libs/src/../include/rapidxml/rapidxml.hpp":1393 649 {jump}
     (nil)
 -> 88)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 100 99 102)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 11, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 102 100 101 12 81 (nil) [1 uses])
(note 101 102 103 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 103 101 96 12 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1398 684 {nop}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 96 103 92 11 80 (nil) [0 uses])
(note 92 96 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 92 104 11 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1411 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 104 95 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_node<Ch>::first_node(const Ch*, std::size_t, bool) const [with Ch = char] (_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb, funcdef_no=3028, decl_uid=60207, cgraph_uid=902, symbol_order=923)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 84: point = 0, n_alt = -1
   Insn 83: point = 0, n_alt = -2
   Insn 79: point = 1, n_alt = -2
  BB 10
   Insn 90: point = 4, n_alt = -1
   Insn 70: point = 4, n_alt = 2
  BB 8
   Insn 86: point = 5, n_alt = -1
   Insn 52: point = 5, n_alt = 3
  BB 7
   Insn 50: point = 6, n_alt = -1
   Insn 49: point = 6, n_alt = 0
   Insn 48: point = 7, n_alt = -2
   Insn 47: point = 8, n_alt = 0
   Insn 46: point = 8, n_alt = -2
   Insn 45: point = 9, n_alt = -2
   Insn 44: point = 10, n_alt = -2
   Insn 43: point = 11, n_alt = -2
   Insn 42: point = 12, n_alt = -2
   Insn 41: point = 13, n_alt = 3
   Insn 40: point = 14, n_alt = 3
   Insn 39: point = 15, n_alt = -2
   Insn 38: point = 16, n_alt = 0
   Insn 37: point = 16, n_alt = -2
   Insn 36: point = 17, n_alt = 3
   Insn 35: point = 18, n_alt = -2
   Insn 34: point = 19, n_alt = 0
   Insn 33: point = 19, n_alt = -2
   Insn 32: point = 20, n_alt = 3
   Insn 31: point = 21, n_alt = 0
  BB 6
   Insn 29: point = 22, n_alt = -1
   Insn 28: point = 22, n_alt = 1
  BB 9
   Insn 88: point = 22, n_alt = -1
   Insn 64: point = 22, n_alt = 5
   Insn 63: point = 23, n_alt = -2
   Insn 62: point = 24, n_alt = 0
   Insn 61: point = 24, n_alt = -2
   Insn 60: point = 25, n_alt = 2
   Insn 59: point = 25, n_alt = 2
   Insn 58: point = 25, n_alt = 0
   Insn 57: point = 25, n_alt = 3
  BB 5
   Insn 26: point = 26, n_alt = 5
   Insn 25: point = 27, n_alt = 3
   Insn 24: point = 29, n_alt = 3
  BB 4
   Insn 21: point = 30, n_alt = 5
   Insn 20: point = 31, n_alt = -2
   Insn 19: point = 32, n_alt = 0
   Insn 18: point = 32, n_alt = -2
   Insn 17: point = 33, n_alt = 3
  BB 3
   Insn 15: point = 34, n_alt = -1
   Insn 14: point = 34, n_alt = 1
  BB 11
   Insn 76: point = 34, n_alt = 3
   Insn 75: point = 36, n_alt = 3
  BB 2
   Insn 12: point = 37, n_alt = -1
   Insn 11: point = 37, n_alt = 1
   Insn 7: point = 37, n_alt = 6
   Insn 6: point = 38, n_alt = 0
   Insn 5: point = 40, n_alt = -2
   Insn 4: point = 41, n_alt = 5
   Insn 3: point = 41, n_alt = 5
   Insn 2: point = 41, n_alt = 5
 r87: [12..21]
 r88: [19..20]
 r89: [9..18]
 r90: [16..17]
 r91: [8..15]
 r92: [34..34] [2..5]
 r93: [6..7]
 r94: [22..23]
 r95: [0..1]
 r96: [39..40]
 r97: [37..38]
 r98: [32..33]
 r99: [30..31]
 r100: [28..29]
 r101: [26..27]
 r102: [11..14]
 r103: [10..13]
 r104: [24..25]
 r105: [35..36]
Compressing live ranges: from 41 to 31 - 75%
Ranges after the compression:
 r87: [6..11]
 r88: [10..11]
 r89: [6..9]
 r90: [8..9]
 r91: [6..7]
 r92: [24..24] [2..3]
 r93: [4..5]
 r94: [12..13]
 r95: [0..1]
 r96: [29..30]
 r97: [27..28]
 r98: [22..23]
 r99: [20..21]
 r100: [18..19]
 r101: [16..17]
 r102: [6..7]
 r103: [6..7]
 r104: [14..15]
 r105: [25..26]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 31
changing reg in insn 42
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 46
changing reg in insn 76
changing reg in insn 70
changing reg in insn 52
changing reg in insn 79
changing reg in insn 48
changing reg in insn 49
changing reg in insn 63
changing reg in insn 64
changing reg in insn 79
changing reg in insn 83
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 44
changing reg in insn 57
changing reg in insn 61
changing reg in insn 75
changing reg in insn 76
deleting insn with uid = 20.
deleting insn with uid = 46.
deleting insn with uid = 48.
deleting insn with uid = 63.
deleting insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 62.


rapidxml::xml_node<Ch>* rapidxml::xml_node<Ch>::first_node(const Ch*, std::size_t, bool) const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 41 [r12]
;;  ref usage 	r0={20d,18u} r1={9d,4u} r2={8d,3u} r3={1d,1u} r4={8d,3u} r5={11d,6u} r6={1d,32u} r7={1d,17u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={9d,4u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,1u} r38={6d} r39={5d} r40={5d} r41={1d,1u} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 502{411d,91u,0e} in 53{48 regular + 5 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":936 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":936 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 1 dx [ name_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":936 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (reg:SI 0 ax [96])
        (reg:SI 2 cx [ case_sensitive ])) "libs/src/../include/rapidxml/rapidxml.hpp":936 82 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:QI 0 ax [97])
        (reg:QI 0 ax [96])) "libs/src/../include/rapidxml/rapidxml.hpp":936 84 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32])
        (reg:QI 0 ax [97])) "libs/src/../include/rapidxml/rapidxml.hpp":936 84 {*movqi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":938 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":938 617 {*jcc_1}
     (nil)
 -> 73)
;;  succ:       3 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":940 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":940 617 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":941 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "libs/src/../include/rapidxml/rapidxml.hpp":941 81 {*movdi_internal}
     (nil))
(call_insn 19 18 21 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7measureIcEEmPKT_") [flags 0x3]  <function_decl 0x7f4419333f00 measure>) [0 measure S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":941 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 19 22 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 0 ax [99])) "libs/src/../include/rapidxml/rapidxml.hpp":941 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 100 101
(code_label 22 21 23 5 84 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(insn 25 24 26 5 (set (reg/f:DI 0 ax [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 48 [0x30])) [51 this_14(D)->m_first_node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(insn 26 25 65 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])
        (reg/f:DI 0 ax [101])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              9 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 65 26 27 6 88 (nil) [1 uses])
(note 27 65 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":942 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":942 617 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 93 102 103
(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 7 (set (reg:SI 3 bx [orig:87 _1 ] [87])
        (zero_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32]))) "libs/src/../include/rapidxml/rapidxml.hpp":943 136 {*zero_extendqisi2}
     (nil))
(insn 32 31 33 7 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 33 32 34 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(call_insn 34 33 35 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE9name_sizeEv") [flags 0x3]  <function_decl 0x7f441984ab00 name_size>) [0 name_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":943 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 7 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 36 35 37 7 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 37 36 38 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(call_insn 38 37 39 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE4nameEv") [flags 0x3]  <function_decl 0x7f441984aa00 name>) [0 name S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":943 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 7 (set (reg/f:DI 5 di [orig:91 _5 ] [91])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:DI 1 dx [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:SI 37 r8)
        (reg:SI 3 bx [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":943 82 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:DI 2 cx)
        (reg:DI 1 dx [102])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:DI 1 dx)
        (reg:DI 0 ax [103])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(insn 45 44 47 7 (set (reg:DI 4 si)
        (reg:DI 41 r12 [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":943 81 {*movdi_internal}
     (nil))
(call_insn 47 45 49 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7compareIcEEbPKT_mS4_mb") [flags 0x3]  <function_decl 0x7f441933d000 compare>) [0 compare S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":943 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 49 47 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 retval.139_25 ] [93])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":943 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":943 617 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 86 8 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":944 81 {*movdi_internal}
     (nil))
(jump_insn 86 52 87 8 (set (pc)
        (label_ref 77)) "libs/src/../include/rapidxml/rapidxml.hpp":944 649 {jump}
     (nil)
 -> 77)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 87 86 55)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 104
(code_label 55 87 56 9 86 (nil) [1 uses])
(note 56 55 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 9 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":942 82 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(insn 60 59 61 9 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(insn 61 60 62 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(call_insn 62 61 64 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE12next_siblingEPKcmb") [flags 0x3]  <function_decl 0x7f4419852a00 next_sibling>) [0 next_sibling S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":942 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 64 62 88 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])
        (reg/f:DI 0 ax [orig:94 _27 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":942 81 {*movdi_internal}
     (nil))
(jump_insn 88 64 89 9 (set (pc)
        (label_ref 65)) "libs/src/../include/rapidxml/rapidxml.hpp":942 649 {jump}
     (nil)
 -> 65)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 89 88 68)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 68 89 69 10 85 (nil) [1 uses])
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 90 10 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":945 81 {*movdi_internal}
     (nil))
(jump_insn 90 70 91 10 (set (pc)
        (label_ref 77)) "libs/src/../include/rapidxml/rapidxml.hpp":945 649 {jump}
     (nil)
 -> 77)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 91 90 73)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92 105
(code_label 73 91 74 11 83 (nil) [1 uses])
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":948 81 {*movdi_internal}
     (nil))
(insn 76 75 77 11 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 48 [0x30])) [51 this_14(D)->m_first_node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":948 81 {*movdi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              8 [100.0%] 
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 95
(code_label 77 76 78 12 87 (nil) [2 uses])
(note 78 77 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 83 78 84 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:95 <retval> ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":949 81 {*movdi_internal}
     (nil))
(insn 84 83 92 12 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":949 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 92 84 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_attribute<Ch>* rapidxml::xml_node<Ch>::first_attribute(const Ch*, std::size_t, bool) const [with Ch = char] (_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb, funcdef_no=3029, decl_uid=60228, cgraph_uid=903, symbol_order=924)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = -2
   Insn 74: point = 1, n_alt = -2
  BB 10
   Insn 85: point = 4, n_alt = -1
   Insn 65: point = 4, n_alt = 2
  BB 8
   Insn 81: point = 5, n_alt = -1
   Insn 52: point = 5, n_alt = 3
  BB 7
   Insn 50: point = 6, n_alt = -1
   Insn 49: point = 6, n_alt = 0
   Insn 48: point = 7, n_alt = -2
   Insn 47: point = 8, n_alt = 0
   Insn 46: point = 8, n_alt = -2
   Insn 45: point = 9, n_alt = -2
   Insn 44: point = 10, n_alt = -2
   Insn 43: point = 11, n_alt = -2
   Insn 42: point = 12, n_alt = -2
   Insn 41: point = 13, n_alt = 3
   Insn 40: point = 14, n_alt = 3
   Insn 39: point = 15, n_alt = -2
   Insn 38: point = 16, n_alt = 0
   Insn 37: point = 16, n_alt = -2
   Insn 36: point = 17, n_alt = 3
   Insn 35: point = 18, n_alt = -2
   Insn 34: point = 19, n_alt = 0
   Insn 33: point = 19, n_alt = -2
   Insn 32: point = 20, n_alt = 3
   Insn 31: point = 21, n_alt = 0
  BB 6
   Insn 29: point = 22, n_alt = -1
   Insn 28: point = 22, n_alt = 1
  BB 9
   Insn 83: point = 22, n_alt = -1
   Insn 59: point = 22, n_alt = 5
   Insn 58: point = 23, n_alt = 3
   Insn 57: point = 25, n_alt = 3
  BB 5
   Insn 26: point = 26, n_alt = 5
   Insn 25: point = 27, n_alt = 3
   Insn 24: point = 29, n_alt = 3
  BB 4
   Insn 21: point = 30, n_alt = 5
   Insn 20: point = 31, n_alt = -2
   Insn 19: point = 32, n_alt = 0
   Insn 18: point = 32, n_alt = -2
   Insn 17: point = 33, n_alt = 3
  BB 3
   Insn 15: point = 34, n_alt = -1
   Insn 14: point = 34, n_alt = 1
  BB 11
   Insn 71: point = 34, n_alt = 3
   Insn 70: point = 36, n_alt = 3
  BB 2
   Insn 12: point = 37, n_alt = -1
   Insn 11: point = 37, n_alt = 1
   Insn 7: point = 37, n_alt = 6
   Insn 6: point = 38, n_alt = 0
   Insn 5: point = 40, n_alt = -2
   Insn 4: point = 41, n_alt = 5
   Insn 3: point = 41, n_alt = 5
   Insn 2: point = 41, n_alt = 5
 r87: [12..21]
 r88: [19..20]
 r89: [9..18]
 r90: [16..17]
 r91: [8..15]
 r92: [34..34] [2..5]
 r93: [6..7]
 r94: [0..1]
 r95: [39..40]
 r96: [37..38]
 r97: [32..33]
 r98: [30..31]
 r99: [28..29]
 r100: [26..27]
 r101: [11..14]
 r102: [10..13]
 r103: [24..25]
 r104: [22..23]
 r105: [35..36]
Compressing live ranges: from 41 to 31 - 75%
Ranges after the compression:
 r87: [6..11]
 r88: [10..11]
 r89: [6..9]
 r90: [8..9]
 r91: [6..7]
 r92: [24..24] [2..3]
 r93: [4..5]
 r94: [0..1]
 r95: [29..30]
 r96: [27..28]
 r97: [22..23]
 r98: [20..21]
 r99: [18..19]
 r100: [16..17]
 r101: [6..7]
 r102: [6..7]
 r103: [14..15]
 r104: [12..13]
 r105: [25..26]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 31
changing reg in insn 42
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 45
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 46
changing reg in insn 71
changing reg in insn 65
changing reg in insn 52
changing reg in insn 74
changing reg in insn 48
changing reg in insn 49
changing reg in insn 74
changing reg in insn 78
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 44
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 70
changing reg in insn 71
deleting insn with uid = 20.
deleting insn with uid = 46.
deleting insn with uid = 48.
deleting insn with uid = 74.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 47.


rapidxml::xml_attribute<Ch>* rapidxml::xml_node<Ch>::first_attribute(const Ch*, std::size_t, bool) const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 41 [r12]
;;  ref usage 	r0={20d,18u} r1={7d,3u} r2={6d,2u} r3={1d,1u} r4={6d,2u} r5={9d,5u} r6={1d,32u} r7={1d,16u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d,4u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={6d,1u} r38={5d} r39={4d} r40={4d} r41={1d,1u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 422{336d,86u,0e} in 49{45 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 1 dx [ name_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (reg:SI 0 ax [95])
        (reg:SI 2 cx [ case_sensitive ])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 82 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:QI 0 ax [96])
        (reg:QI 0 ax [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 84 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32])
        (reg:QI 0 ax [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1025 84 {*movqi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1027 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1027 617 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       3 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1029 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1029 617 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1030 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1030 81 {*movdi_internal}
     (nil))
(call_insn 19 18 21 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7measureIcEEmPKT_") [flags 0x3]  <function_decl 0x7f4419333f00 measure>) [0 measure S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1030 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 19 22 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 0 ax [98])) "libs/src/../include/rapidxml/rapidxml.hpp":1030 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99 100
(code_label 22 21 23 5 91 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
(insn 25 24 26 5 (set (reg/f:DI 0 ax [100])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 64 [0x40])) [53 this_14(D)->m_first_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
(insn 26 25 60 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              9 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 60 26 27 6 95 (nil) [1 uses])
(note 27 60 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1031 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1031 617 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 93 101 102
(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 7 (set (reg:SI 3 bx [orig:87 _1 ] [87])
        (zero_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32]))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 136 {*zero_extendqisi2}
     (nil))
(insn 32 31 33 7 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 33 32 34 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(call_insn 34 33 35 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE9name_sizeEv") [flags 0x3]  <function_decl 0x7f441984ab00 name_size>) [0 name_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 7 (set (reg:DI 41 r12 [orig:89 _3 ] [89])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 36 35 37 7 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 37 36 38 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(call_insn 38 37 39 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE4nameEv") [flags 0x3]  <function_decl 0x7f441984aa00 name>) [0 name S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 7 (set (reg/f:DI 5 di [orig:91 _5 ] [91])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:DI 1 dx [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:SI 37 r8)
        (reg:SI 3 bx [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 82 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:DI 2 cx)
        (reg:DI 1 dx [101])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:DI 1 dx)
        (reg:DI 0 ax [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(insn 45 44 47 7 (set (reg:DI 4 si)
        (reg:DI 41 r12 [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":1032 81 {*movdi_internal}
     (nil))
(call_insn 47 45 49 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7compareIcEEbPKT_mS4_mb") [flags 0x3]  <function_decl 0x7f441933d000 compare>) [0 compare S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 49 47 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 retval.141_25 ] [93])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1032 617 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 81 8 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1033 81 {*movdi_internal}
     (nil))
(jump_insn 81 52 82 8 (set (pc)
        (label_ref 72)) "libs/src/../include/rapidxml/rapidxml.hpp":1033 649 {jump}
     (nil)
 -> 72)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 82 81 55)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 103 104
(code_label 55 82 56 9 93 (nil) [1 uses])
(note 56 55 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 9 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
(insn 58 57 59 9 (set (reg/f:DI 0 ax [104])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 48 [0x30])) [53 attribute_7->m_next_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
(insn 59 58 83 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1031 81 {*movdi_internal}
     (nil))
(jump_insn 83 59 84 9 (set (pc)
        (label_ref 60)) "libs/src/../include/rapidxml/rapidxml.hpp":1031 649 {jump}
     (nil)
 -> 60)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 84 83 63)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 63 84 64 10 92 (nil) [1 uses])
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 85 10 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1034 81 {*movdi_internal}
     (nil))
(jump_insn 85 65 86 10 (set (pc)
        (label_ref 72)) "libs/src/../include/rapidxml/rapidxml.hpp":1034 649 {jump}
     (nil)
 -> 72)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 86 85 68)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92 105
(code_label 68 86 69 11 90 (nil) [1 uses])
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1037 81 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg/f:DI 0 ax [orig:92 _8 ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 64 [0x40])) [53 this_14(D)->m_first_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1037 81 {*movdi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              8 [100.0%] 
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 94
(code_label 72 71 73 12 94 (nil) [2 uses])
(note 73 72 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 73 79 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:94 <retval> ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":1038 81 {*movdi_internal}
     (nil))
(insn 79 78 87 12 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1038 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 87 79 0 NOTE_INSN_DELETED)

;; Function Ch* rapidxml::xml_base<Ch>::value() const [with Ch = char] (_ZNK8rapidxml8xml_baseIcE5valueEv, funcdef_no=3030, decl_uid=60164, cgraph_uid=904, symbol_order=925)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
  BB 3
   Insn 30: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 6, n_alt = 3
  BB 4
   Insn 18: point = 7, n_alt = -2
   Insn 17: point = 8, n_alt = 0
  BB 2
   Insn 9: point = 8, n_alt = -1
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 9, n_alt = 3
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [7..7] [2..4]
 r89: [0..1]
 r90: [10..11]
 r91: [5..6]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r87: [7..8]
 r88: [6..6] [2..3]
 r89: [0..1]
 r90: [9..10]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 18
changing reg in insn 12
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 18.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


Ch* rapidxml::xml_base<Ch>::value() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r6={1d,8u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 119{96d,23u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":692 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":694 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 8 [0x8])) [3 this_5(D)->m_value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":694 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":694 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":694 617 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 91
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":694 81 {*movdi_internal}
     (nil))
(insn 12 11 30 3 (set (reg/f:DI 0 ax [orig:88 iftmp.142_2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 8 [0x8])) [3 this_5(D)->m_value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":694 81 {*movdi_internal}
     (nil))
(jump_insn 30 12 31 3 (set (pc)
        (label_ref 21)) "libs/src/../include/rapidxml/rapidxml.hpp":694 649 {jump}
     (nil)
 -> 21)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 31 30 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(code_label 15 31 16 4 97 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 21 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE7nullstrEv") [flags 0x3]  <function_decl 0x7f4419852100 nullstr>) [0 nullstr S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":694 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 21 17 22 5 99 (nil) [1 uses])
(note 22 21 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 22 28 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":695 81 {*movdi_internal}
     (nil))
(insn 28 27 32 5 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":695 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 32 28 0 NOTE_INSN_DELETED)

;; Function constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&] (_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_, funcdef_no=3139, decl_uid=63460, cgraph_uid=1013, symbol_order=1034)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [71 __t+0 S8 A64])
        (reg:DI 5 di [ __t ])) "/usr/include/c++/7/bits/move.h":98 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [71 __t+0 S8 A64])) "/usr/include/c++/7/bits/move.h":99 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/move.h":99 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/move.h":99 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEEC2Ev, funcdef_no=3143, decl_uid=53321, cgraph_uid=1017, symbol_order=1038)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [72 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":79 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":79 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEED2Ev, funcdef_no=3146, decl_uid=53326, cgraph_uid=1020, symbol_order=1041)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [72 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":86 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":86 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E, funcdef_no=3148, decl_uid=53720, cgraph_uid=1022, symbol_order=1043)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 41: point = 0, n_alt = -1
  BB 3
   Insn 8: point = 0, n_alt = -1
   Insn 7: point = 0, n_alt = 1
  BB 4
   Insn 37: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 0
   Insn 26: point = 2, n_alt = -2
   Insn 25: point = 3, n_alt = -2
   Insn 24: point = 4, n_alt = 3
   Insn 23: point = 5, n_alt = 3
   Insn 22: point = 6, n_alt = 5
   Insn 21: point = 7, n_alt = -2
   Insn 20: point = 8, n_alt = 0
   Insn 19: point = 8, n_alt = -2
   Insn 18: point = 9, n_alt = 3
   Insn 17: point = 10, n_alt = 0
   Insn 16: point = 10, n_alt = -2
   Insn 15: point = 11, n_alt = -2
   Insn 14: point = 12, n_alt = 3
   Insn 13: point = 13, n_alt = -2
   Insn 12: point = 14, n_alt = 0
   Insn 11: point = 14, n_alt = -2
   Insn 10: point = 15, n_alt = 3
  BB 2
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r87: [11..13]
 r88: [14..15]
 r89: [10..12]
 r90: [8..9]
 r91: [6..7]
 r92: [3..5]
 r93: [2..4]
 r94: [0..1]
Compressing live ranges: from 16 to 12 - 75%
Ranges after the compression:
 r87: [8..9]
 r88: [10..11]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]
 r92: [2..3]
 r93: [2..3]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 15
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 27.


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,7u} r1={7d,2u} r2={5d} r4={7d,3u} r5={9d,5u} r6={1d,17u} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={5d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 366{320d,46u,0e} in 25{21 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":1850 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])
        (reg:DI 4 si [ __x ])) "/usr/include/c++/7/bits/stl_tree.h":1850 81 {*movdi_internal}
     (nil))
(note 4 3 30 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 4 6 3 106 (nil) [1 uses])
(note 6 30 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":1854 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 40)
            (pc))) "/usr/include/c++/7/bits/stl_tree.h":1854 617 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(insn 11 10 12 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(call_insn 12 11 13 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base") [flags 0x3]  <function_decl 0x7f4419c71d00 _S_right>) [0 _S_right S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":1856 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 4 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(insn 14 13 15 4 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_tree.h":1856 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 4 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E") [flags 0x3]  <function_decl 0x7f4419c84100 _M_erase>) [0 _M_erase S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":1856 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 4 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1857 81 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_tree.h":1857 81 {*movdi_internal}
     (nil))
(call_insn 20 19 22 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base") [flags 0x3]  <function_decl 0x7f4419c71b00 _S_left>) [0 _S_left S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":1857 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 20 23 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [73 __y+0 S8 A64])
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_tree.h":1857 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1858 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1858 81 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [92])) "/usr/include/c++/7/bits/stl_tree.h":1858 81 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "/usr/include/c++/7/bits/stl_tree.h":1858 81 {*movdi_internal}
     (nil))
(call_insn 27 26 28 4 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E") [flags 0x3]  <function_decl 0x7f4419c3a300 _M_drop_node>) [0 _M_drop_node S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":1858 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [73 __y+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":1859 81 {*movdi_internal}
     (nil))
(insn 29 28 37 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __x+0 S8 A64])
        (reg/f:DI 0 ax [94])) "/usr/include/c++/7/bits/stl_tree.h":1859 81 {*movdi_internal}
     (nil))
(jump_insn 37 29 38 4 (set (pc)
        (label_ref 30)) "/usr/include/c++/7/bits/stl_tree.h":1854 649 {jump}
     (nil)
 -> 30)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 40)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 40 38 39 6 107 (nil) [1 uses])
(note 39 40 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 41 39 35 6 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":1861 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 35 41 36 5 104 (nil) [0 uses])
(note 36 35 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 42 36 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_begin() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_beginEv, funcdef_no=3149, decl_uid=53594, cgraph_uid=1023, symbol_order=1044)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_begin() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":736 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":737 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 16 [0x10])) [14 this_2(D)->_M_impl.D.53579._M_header._M_parent+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":737 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_tree.h":737 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":737 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<TSX::Parser::Terrain, std::allocator<TSX::Parser::Terrain> >::_Vector_impl::~_Vector_impl() (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE12_Vector_implD2Ev, funcdef_no=3152, decl_uid=63569, cgraph_uid=1025, symbol_order=1046)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<TSX::Parser::Terrain, std::allocator<TSX::Parser::Terrain> >::_Vector_impl::~_Vector_impl()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaIN3TSX6Parser7TerrainEED2Ev") [flags 0x3]  <function_decl 0x7f4419a09900 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":81 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":81 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EEC2Ev, funcdef_no=3154, decl_uid=56397, cgraph_uid=1028, symbol_order=1049)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":126 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE12_Vector_implC1Ev") [flags 0x3]  <function_decl 0x7f4419a11200 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":127 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":127 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EED2Ev, funcdef_no=3157, decl_uid=56402, cgraph_uid=1031, symbol_order=1052)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=103 from oldreg=88, assigning class GENERAL_REGS to r103
   12: {r103:DI=r103:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   32: r103:DI=r88:DI
    Inserting insn reload after:
   33: r91:DI=r103:DI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
      Creating newreg=104 from oldreg=91, assigning class GENERAL_REGS to r104
   13: {r104:DI=r104:DI>>0x3;clobber flags:CC;}
      REG_DEAD r91:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   34: r104:DI=r91:DI
    Inserting insn reload after:
   35: r98:DI=r104:DI

            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) r  (1) i {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 2 in insn 15:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 30: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = 3
   Insn 24: point = 2, n_alt = 0
   Insn 23: point = 2, n_alt = -2
   Insn 22: point = 3, n_alt = -2
   Insn 21: point = 4, n_alt = -2
   Insn 20: point = 5, n_alt = 3
   Insn 19: point = 6, n_alt = 3
   Insn 18: point = 8, n_alt = 3
   Insn 17: point = 9, n_alt = -2
   Insn 16: point = 11, n_alt = -2
   Insn 15: point = 13, n_alt = 2
   Insn 14: point = 15, n_alt = 4
   Insn 35: point = 16, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1
   Insn 13: point = 18, n_alt = 0
   Insn 34: point = 18, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1
	Hard reg 0 is preferable by r104 with profit 1
   Insn 33: point = 20, n_alt = -2
	Hard reg 0 is preferable by r103 with profit 1
   Insn 12: point = 22, n_alt = 0
   Insn 32: point = 23, n_alt = -2
	Hard reg 0 is preferable by r103 with profit 1
	Hard reg 1 is preferable by r103 with profit 1
   Insn 11: point = 25, n_alt = -2
   Insn 10: point = 27, n_alt = 3
   Insn 9: point = 29, n_alt = 3
   Insn 8: point = 30, n_alt = -2
   Insn 7: point = 32, n_alt = 3
   Insn 6: point = 34, n_alt = 3
   Insn 2: point = 35, n_alt = 5
 r87: [31..32]
 r88: [24..30]
 r89: [26..27]
 r90: [22..25]
 r91: [19..20]
 r92: [10..11]
 r93: [4..9]
 r94: [3..6]
 r95: [0..1]
 r96: [33..34]
 r97: [28..29]
 r98: [14..16]
 r99: [12..13]
 r100: [14..15]
 r101: [7..8]
 r102: [2..5]
 r103: [21..23]
 r104: [17..18]
Compressing live ranges: from 35 to 28 - 80%
Ranges after the compression:
 r87: [24..25]
 r88: [18..23]
 r89: [20..21]
 r90: [16..19]
 r91: [14..15]
 r92: [6..7]
 r93: [2..5]
 r94: [2..3]
 r95: [0..1]
 r96: [26..27]
 r97: [22..23]
 r98: [10..11]
 r99: [8..9]
 r100: [10..11]
 r101: [4..5]
 r102: [2..3]
 r103: [16..17]
 r104: [12..13]

********** Assignment #1: **********

	 Assigning to 103 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=103, tfreq=3)...
	   Assign 1 to reload r103 (freq=3)
	 Assigning to 104 (cl=GENERAL_REGS, orig=91, freq=3, tfirst=104, tfreq=3)...
	   Assign 0 to reload r104 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 19
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
deleting insn with uid = 11.
deleting insn with uid = 32.
deleting insn with uid = 34.
deleting insn with uid = 16.
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.


std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={14d,11u} r1={7d,4u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 217{184d,33u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":161 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 16 [0x10])) [41 this_11(D)->_M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [97]) [41 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 12 10 33 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 274 {*subdi_1}
     (nil))
(insn 33 12 13 2 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 13 33 35 2 (parallel [
            (set (reg:DI 0 ax [orig:91 _5 ] [91])
                (ashiftrt:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 547 {*ashrdi3_1}
     (nil))
(insn 35 13 14 2 (set (reg:DI 1 dx [98])
        (reg:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 14 35 15 2 (set (reg:DI 0 ax [100])
        (const_int 3353953467947191203 [0x2e8ba2e8ba2e8ba3])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (parallel [
            (set (reg:DI 0 ax [99])
                (mult:DI (reg:DI 0 ax [100])
                    (reg:DI 1 dx [98])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 329 {*muldi3_1}
     (nil))
(insn 17 15 18 2 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 _6 ] [92])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 2 cx [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [101]) [41 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 20 19 22 2 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:94 _8 ] [94])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(call_insn 24 23 25 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE13_M_deallocateEPS2_m") [flags 0x3]  <function_decl 0x7f4419a11500 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":162 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(call_insn 27 26 30 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE12_Vector_implD1Ev") [flags 0x3]  <function_decl 0x7f44192fce00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":163 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 27 31 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":163 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 30 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE19_M_get_Tp_allocatorEv, funcdef_no=3159, decl_uid=56109, cgraph_uid=1033, symbol_order=1054)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":115 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = TSX::Parser::Terrain*; _Tp = TSX::Parser::Terrain] (_ZSt8_DestroyIPN3TSX6Parser7TerrainES2_EvT_S4_RSaIT0_E, funcdef_no=3160, decl_uid=63585, cgraph_uid=1034, symbol_order=1055)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 9: point = 2, n_alt = 3
   Insn 8: point = 3, n_alt = 3
   Insn 4: point = 4, n_alt = 5
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = TSX::Parser::Terrain*; _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{94d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [76 D.63588+0 S8 A64])
        (reg:DI 1 dx [ D.63588 ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPN3TSX6Parser7TerrainEEvT_S4_") [flags 0x3]  <function_decl 0x7f441907bb00 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":206 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 12 16 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":207 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<TSX::Parser::Tile, std::allocator<TSX::Parser::Tile> >::_Vector_impl::~_Vector_impl() (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE12_Vector_implD2Ev, funcdef_no=3163, decl_uid=63632, cgraph_uid=1036, symbol_order=1057)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<TSX::Parser::Tile, std::allocator<TSX::Parser::Tile> >::_Vector_impl::~_Vector_impl()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaIN3TSX6Parser4TileEED2Ev") [flags 0x3]  <function_decl 0x7f4419696200 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":81 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":81 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EEC2Ev, funcdef_no=3165, decl_uid=57492, cgraph_uid=1039, symbol_order=1060)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":126 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE12_Vector_implC1Ev") [flags 0x3]  <function_decl 0x7f4419696b00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":127 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":127 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EED2Ev, funcdef_no=3168, decl_uid=57497, cgraph_uid=1042, symbol_order=1063)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=103 from oldreg=88, assigning class GENERAL_REGS to r103
   12: {r103:DI=r103:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   32: r103:DI=r88:DI
    Inserting insn reload after:
   33: r91:DI=r103:DI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
      Creating newreg=104 from oldreg=91, assigning class GENERAL_REGS to r104
   13: {r104:DI=r104:DI>>0x4;clobber flags:CC;}
      REG_DEAD r91:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   34: r104:DI=r91:DI
    Inserting insn reload after:
   35: r98:DI=r104:DI

            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) r  (1) i {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 2 in insn 15:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 30: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = 3
   Insn 24: point = 2, n_alt = 0
   Insn 23: point = 2, n_alt = -2
   Insn 22: point = 3, n_alt = -2
   Insn 21: point = 4, n_alt = -2
   Insn 20: point = 5, n_alt = 3
   Insn 19: point = 6, n_alt = 3
   Insn 18: point = 8, n_alt = 3
   Insn 17: point = 9, n_alt = -2
   Insn 16: point = 11, n_alt = -2
   Insn 15: point = 13, n_alt = 2
   Insn 14: point = 15, n_alt = 4
   Insn 35: point = 16, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1
   Insn 13: point = 18, n_alt = 0
   Insn 34: point = 18, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1
	Hard reg 0 is preferable by r104 with profit 1
   Insn 33: point = 20, n_alt = -2
	Hard reg 0 is preferable by r103 with profit 1
   Insn 12: point = 22, n_alt = 0
   Insn 32: point = 23, n_alt = -2
	Hard reg 0 is preferable by r103 with profit 1
	Hard reg 1 is preferable by r103 with profit 1
   Insn 11: point = 25, n_alt = -2
   Insn 10: point = 27, n_alt = 3
   Insn 9: point = 29, n_alt = 3
   Insn 8: point = 30, n_alt = -2
   Insn 7: point = 32, n_alt = 3
   Insn 6: point = 34, n_alt = 3
   Insn 2: point = 35, n_alt = 5
 r87: [31..32]
 r88: [24..30]
 r89: [26..27]
 r90: [22..25]
 r91: [19..20]
 r92: [10..11]
 r93: [4..9]
 r94: [3..6]
 r95: [0..1]
 r96: [33..34]
 r97: [28..29]
 r98: [14..16]
 r99: [12..13]
 r100: [14..15]
 r101: [7..8]
 r102: [2..5]
 r103: [21..23]
 r104: [17..18]
Compressing live ranges: from 35 to 28 - 80%
Ranges after the compression:
 r87: [24..25]
 r88: [18..23]
 r89: [20..21]
 r90: [16..19]
 r91: [14..15]
 r92: [6..7]
 r93: [2..5]
 r94: [2..3]
 r95: [0..1]
 r96: [26..27]
 r97: [22..23]
 r98: [10..11]
 r99: [8..9]
 r100: [10..11]
 r101: [4..5]
 r102: [2..3]
 r103: [16..17]
 r104: [12..13]

********** Assignment #1: **********

	 Assigning to 103 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=103, tfreq=3)...
	   Assign 1 to reload r103 (freq=3)
	 Assigning to 104 (cl=GENERAL_REGS, orig=91, freq=3, tfirst=104, tfreq=3)...
	   Assign 0 to reload r104 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 19
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
deleting insn with uid = 11.
deleting insn with uid = 32.
deleting insn with uid = 34.
deleting insn with uid = 16.
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.


std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={14d,11u} r1={7d,4u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 217{184d,33u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":161 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 16 [0x10])) [45 this_11(D)->_M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [97]) [45 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 12 10 33 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 274 {*subdi_1}
     (nil))
(insn 33 12 13 2 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 13 33 35 2 (parallel [
            (set (reg:DI 0 ax [orig:91 _5 ] [91])
                (ashiftrt:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 547 {*ashrdi3_1}
     (nil))
(insn 35 13 14 2 (set (reg:DI 1 dx [98])
        (reg:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 14 35 15 2 (set (reg:DI 0 ax [100])
        (const_int -3689348814741910323 [0xcccccccccccccccd])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (parallel [
            (set (reg:DI 0 ax [99])
                (mult:DI (reg:DI 0 ax [100])
                    (reg:DI 1 dx [98])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 329 {*muldi3_1}
     (nil))
(insn 17 15 18 2 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 _6 ] [92])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 2 cx [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [101]) [45 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 20 19 22 2 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:94 _8 ] [94])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(call_insn 24 23 25 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE13_M_deallocateEPS2_m") [flags 0x3]  <function_decl 0x7f4419696e00 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":162 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(call_insn 27 26 30 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE12_Vector_implD1Ev") [flags 0x3]  <function_decl 0x7f4419309500 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":163 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 27 31 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":163 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 30 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE19_M_get_Tp_allocatorEv, funcdef_no=3170, decl_uid=57204, cgraph_uid=1044, symbol_order=1065)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":115 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = TSX::Parser::Tile*; _Tp = TSX::Parser::Tile] (_ZSt8_DestroyIPN3TSX6Parser4TileES2_EvT_S4_RSaIT0_E, funcdef_no=3171, decl_uid=63648, cgraph_uid=1045, symbol_order=1066)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 9: point = 2, n_alt = 3
   Insn 8: point = 3, n_alt = 3
   Insn 4: point = 4, n_alt = 5
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = TSX::Parser::Tile*; _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{94d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [79 D.63651+0 S8 A64])
        (reg:DI 1 dx [ D.63651 ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPN3TSX6Parser4TileEEvT_S4_") [flags 0x3]  <function_decl 0x7f4419087700 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":206 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 12 16 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":207 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>::xml_node(rapidxml::node_type) [with Ch = char] (_ZN8rapidxml8xml_nodeIcEC2ENS_9node_typeE, funcdef_no=3173, decl_uid=60307, cgraph_uid=1047, symbol_order=1068)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 5
   Insn 15: point = 1, n_alt = 3
   Insn 14: point = 2, n_alt = 5
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 1
   Insn 11: point = 5, n_alt = 0
   Insn 10: point = 6, n_alt = 3
   Insn 9: point = 7, n_alt = 0
   Insn 8: point = 7, n_alt = -2
   Insn 7: point = 8, n_alt = 3
   Insn 3: point = 9, n_alt = 1
   Insn 2: point = 9, n_alt = 5
 r87: [7..8]
 r88: [4..6]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
Compressing live ranges: from 9 to 8 - 88%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


rapidxml::xml_node<Ch>::xml_node(rapidxml::node_type) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={3d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,9u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 117{96d,21u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":901 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [52 type+0 S4 A32])
        (reg:SI 4 si [ type ])) "libs/src/../include/rapidxml/rapidxml.hpp":901 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcEC2Ev") [flags 0x3]  <function_decl 0x7f4419852300 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":904 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [52 type+0 S4 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":904 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem:SI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 40 [0x28])) [52 this_3(D)->m_type+0 S4 A64])
        (reg:SI 1 dx [89])) "libs/src/../include/rapidxml/rapidxml.hpp":904 82 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 48 [0x30])) [51 this_3(D)->m_first_node+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 16 15 19 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 64 [0x40])) [53 this_3(D)->m_first_attribute+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":904 81 {*movdi_internal}
     (nil))
(insn 19 16 20 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":906 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function rapidxml::memory_pool<Ch>::memory_pool() [with Ch = char] (_ZN8rapidxml11memory_poolIcEC2Ev, funcdef_no=3176, decl_uid=60374, cgraph_uid=1050, symbol_order=1071)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 3
   Insn 9: point = 2, n_alt = 5
   Insn 8: point = 3, n_alt = 3
   Insn 7: point = 4, n_alt = 5
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


rapidxml::memory_pool<Ch>::memory_pool() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 109{94d,15u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":390 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":392 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 65560 [0x10018])) [0 this_2(D)->m_alloc_func+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":392 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":392 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 65568 [0x10020])) [0 this_2(D)->m_free_func+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":392 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":394 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "libs/src/../include/rapidxml/rapidxml.hpp":394 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE4initEv") [flags 0x3]  <function_decl 0x7f441985fd00 init>) [0 init S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":394 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":395 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function void rapidxml::memory_pool<Ch>::clear() [with Ch = char] (_ZN8rapidxml11memory_poolIcE5clearEv, funcdef_no=3178, decl_uid=60348, cgraph_uid=1052, symbol_order=1073)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 61: point = 0, n_alt = -1
   Insn 58: point = 0, n_alt = 0
   Insn 57: point = 0, n_alt = -2
   Insn 56: point = 1, n_alt = 3
  BB 3
   Insn 11: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = 0
   Insn 9: point = 3, n_alt = 0
   Insn 8: point = 5, n_alt = 3
   Insn 7: point = 6, n_alt = 3
   Insn 6: point = 8, n_alt = 3
  BB 8
   Insn 64: point = 9, n_alt = -1
   Insn 50: point = 9, n_alt = 5
   Insn 49: point = 10, n_alt = 3
   Insn 48: point = 11, n_alt = 3
  BB 5
   Insn 62: point = 12, n_alt = -1
   Insn 32: point = 12, n_alt = 0
   Insn 31: point = 13, n_alt = -2
   Insn 30: point = 14, n_alt = 3
   Insn 29: point = 16, n_alt = 3
   Insn 28: point = 17, n_alt = 3
   Insn 27: point = 19, n_alt = 3
  BB 7
   Insn 45: point = 20, n_alt = 0
   Insn 44: point = 20, n_alt = -2
   Insn 43: point = 21, n_alt = 3
   Insn 42: point = 23, n_alt = 3
  BB 6
   Insn 40: point = 24, n_alt = -1
   Insn 39: point = 24, n_alt = 0
   Insn 38: point = 25, n_alt = 3
   Insn 37: point = 27, n_alt = 3
  BB 4
   Insn 25: point = 28, n_alt = -1
   Insn 24: point = 28, n_alt = 0
   Insn 23: point = 29, n_alt = 3
   Insn 22: point = 31, n_alt = 3
   Insn 21: point = 32, n_alt = 5
   Insn 20: point = 33, n_alt = 3
   Insn 19: point = 35, n_alt = -2
   Insn 18: point = 36, n_alt = 0
   Insn 17: point = 36, n_alt = -2
   Insn 16: point = 37, n_alt = -2
   Insn 15: point = 38, n_alt = 3
   Insn 14: point = 39, n_alt = 3
   Insn 13: point = 41, n_alt = 3
  BB 2
   Insn 2: point = 42, n_alt = 5
 r87: [2..6]
 r88: [2..3]
 r89: [37..39]
 r90: [34..35]
 r91: [28..29]
 r92: [12..17]
 r93: [13..14]
 r94: [24..25]
 r95: [20..21]
 r96: [7..8]
 r97: [4..5]
 r98: [40..41]
 r99: [36..38]
 r100: [32..33]
 r101: [30..31]
 r102: [18..19]
 r103: [15..16]
 r104: [26..27]
 r105: [22..23]
 r106: [9..11]
 r107: [9..10]
 r108: [0..1]
Compressing live ranges: from 42 to 36 - 85%
Ranges after the compression:
 r87: [2..5]
 r88: [2..3]
 r89: [32..33]
 r90: [30..31]
 r91: [24..25]
 r92: [10..13]
 r93: [10..11]
 r94: [20..21]
 r95: [16..17]
 r96: [6..7]
 r97: [4..5]
 r98: [34..35]
 r99: [32..33]
 r100: [28..29]
 r101: [26..27]
 r102: [14..15]
 r103: [12..13]
 r104: [22..23]
 r105: [18..19]
 r106: [8..9]
 r107: [8..9]
 r108: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 56
changing reg in insn 57
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
rescanning insn with uid = 32.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 58.


void rapidxml::memory_pool<Ch>::clear() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,16u} r1={11d,6u} r2={5d} r4={6d,1u} r5={9d,5u} r6={1d,23u} r7={1d,13u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d,3u} r18={4d} r19={4d} r20={1d,1u,1e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 405{336d,68u,1e} in 42{38 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":525 81 {*movdi_internal}
     (nil))
(note 3 2 51 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 96 97
(code_label 51 3 5 3 128 (nil) [1 uses])
(note 5 51 6 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 6 5 7 3 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":527 81 {*movdi_internal}
     (nil))
(insn 7 6 8 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/j:DI (reg/f:DI 0 ax [96]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":527 81 {*movdi_internal}
     (nil))
(insn 8 7 9 3 (set (reg/f:DI 1 dx [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":527 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (parallel [
            (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 1 dx [97])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":527 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (reg/f:DI 1 dx [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":527 8 {*cmpdi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":527 617 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 98 99 100 101
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 14 13 15 4 (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
        (mem/f/j:DI (reg/f:DI 0 ax [98]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(call_insn 18 17 20 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5alignEPc") [flags 0x3]  <function_decl 0x7f441985fe00 align>) [0 align S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":529 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 20 18 21 4 (set (reg/f:DI 0 ax [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [3 MEM[(struct header *)_4].previous_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 previous_begin+0 S8 A64])
        (reg/f:DI 0 ax [100])) "libs/src/../include/rapidxml/rapidxml.hpp":529 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":530 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 65568 [0x10020])) [0 this_13(D)->m_free_func+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":530 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:91 _5 ] [91])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":530 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":530 617 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 102 103
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":531 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 65568 [0x10020])) [0 this_13(D)->m_free_func+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":531 81 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 1 dx [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":531 81 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f/j:DI (reg/f:DI 1 dx [103]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":531 81 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:93 _7 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":531 81 {*movdi_internal}
     (nil))
(call_insn 32 31 62 5 (call (mem:QI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [0 *_6 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":531 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 62 32 63 5 (set (pc)
        (label_ref 46)) 649 {jump}
     (nil)
 -> 46)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 63 62 35)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 104
(code_label 35 63 36 6 126 (nil) [1 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":533 81 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f/j:DI (reg/f:DI 0 ax [104]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":533 81 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:94 _8 ] [94])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":533 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 40 39 41 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":533 617 {*jcc_1}
     (nil)
 -> 46)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 105
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":533 81 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f/j:DI (reg/f:DI 0 ax [105]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":533 81 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":533 81 {*movdi_internal}
     (nil))
(call_insn 45 44 46 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f441c516000 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":533 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;;              5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 106 107
(code_label 46 45 47 8 127 (nil) [2 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":534 81 {*movdi_internal}
     (nil))
(insn 49 48 50 8 (set (reg/f:DI 1 dx [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 previous_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":534 81 {*movdi_internal}
     (nil))
(insn 50 49 64 8 (set (mem/f/j:DI (reg/f:DI 0 ax [106]) [0 this_13(D)->m_begin+0 S8 A64])
        (reg/f:DI 1 dx [107])) "libs/src/../include/rapidxml/rapidxml.hpp":534 81 {*movdi_internal}
     (nil))
(jump_insn 64 50 65 8 (set (pc)
        (label_ref 51)) "libs/src/../include/rapidxml/rapidxml.hpp":527 649 {jump}
     (nil)
 -> 51)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 54)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108
(code_label 54 65 55 9 125 (nil) [1 uses])
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":536 81 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) "libs/src/../include/rapidxml/rapidxml.hpp":536 81 {*movdi_internal}
     (nil))
(call_insn 58 57 61 9 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE4initEv") [flags 0x3]  <function_decl 0x7f441985fd00 init>) [0 init S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":536 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 58 66 9 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":537 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 66 61 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::vector() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEEC2Ev, funcdef_no=3180, decl_uid=61358, cgraph_uid=1054, symbol_order=1075)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::vector<_Tp, _Alloc>::vector() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":259 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":263 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEEC2Ev") [flags 0x3]  <function_decl 0x7f4419487800 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":263 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":263 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_, funcdef_no=3190, decl_uid=52899, cgraph_uid=1064, symbol_order=1085)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = 3
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = -2
   Insn 17: point = 2, n_alt = 3
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = 0
   Insn 11: point = 6, n_alt = -2
   Insn 10: point = 7, n_alt = -2
   Insn 9: point = 8, n_alt = 3
   Insn 8: point = 9, n_alt = 3
   Insn 4: point = 10, n_alt = 5
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [4..5]
 r88: [1..3]
 r89: [7..9]
 r90: [6..8]
 r91: [0..2]
Compressing live ranges: from 10 to 6 - 60%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]
 r91: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 17
changing reg in insn 19
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


std::__cxx11::basic_string<_CharT, _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={7d,6u} r1={6d,3u} r2={4d} r4={6d,3u} r5={7d,4u} r6={1d,9u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 275{244d,31u,0e} in 17{14 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [81 .result_ptr+0 S8 A64])
        (reg:DI 5 di [ .result_ptr ])) "/usr/include/c++/7/bits/basic_string.h":5977 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [71 __lhs+0 S8 A64])
        (reg:DI 4 si [ __lhs ])) "/usr/include/c++/7/bits/basic_string.h":5977 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __rhs+0 S8 A64])
        (reg:DI 1 dx [ __rhs ])) "/usr/include/c++/7/bits/basic_string.h":5977 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __rhs+0 S8 A64])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [71 __lhs+0 S8 A64])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc") [flags 0x41]  <function_decl 0x7f441b528d00 append>) [0 append S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/basic_string.h":5979 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 12 15 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_") [flags 0x3]  <function_decl 0x7f44192d6300 move>) [0 move S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/basic_string.h":5979 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [71 <retval>+0 S8 A64])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(call_insn 20 19 26 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_") [flags 0x41]  <function_decl 0x7f441b15e700 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/basic_string.h":5979 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 26 20 27 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [71 <retval>+0 S8 A64])) "/usr/include/c++/7/bits/basic_string.h":5979 81 {*movdi_internal}
     (nil))
(insn 27 26 29 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/basic_string.h":5979 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 29 27 0 NOTE_INSN_DELETED)

;; Function std::fpos<_StateT>::operator std::streamoff() const [with _StateT = __mbstate_t] (_ZNKSt4fposI11__mbstate_tEcvlEv, funcdef_no=3194, decl_uid=63691, cgraph_uid=1068, symbol_order=1089)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


std::fpos<_StateT>::operator std::streamoff() const [with _StateT = __mbstate_t]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/postypes.h":137 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":137 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg:DI 0 ax [orig:87 _3 ] [87])
        (mem/j:DI (reg/f:DI 0 ax [89]) [0 this_2(D)->_M_off+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":137 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/postypes.h":137 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/postypes.h":137 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function std::fpos<_StateT>::fpos(std::streamoff) [with _StateT = __mbstate_t] (_ZNSt4fposI11__mbstate_tEC2El, funcdef_no=3196, decl_uid=63716, cgraph_uid=1070, symbol_order=1091)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = 1
   Insn 12: point = 1, n_alt = 3
   Insn 11: point = 2, n_alt = 1
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 5
   Insn 8: point = 5, n_alt = 3
   Insn 7: point = 6, n_alt = 3
   Insn 3: point = 7, n_alt = 5
   Insn 2: point = 7, n_alt = 5
 r87: [4..6]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
Compressing live ranges: from 7 to 6 - 85%
Ranges after the compression:
 r87: [4..5]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
starting the processing of deferred insns
ending the processing of deferred insns


std::fpos<_StateT>::fpos(std::streamoff) [with _StateT = __mbstate_t]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,8u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 39{22d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/postypes.h":133 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __off+0 S8 A64])
        (reg:DI 4 si [ __off ])) "/usr/include/c++/7/bits/postypes.h":133 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":134 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __off+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":134 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/j:DI (reg/f:DI 0 ax [87]) [0 this_2(D)->_M_off+0 S8 A64])
        (reg:DI 1 dx [88])) "/usr/include/c++/7/bits/postypes.h":134 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":134 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [0 this_2(D)->_M_state.__count+0 S4 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/postypes.h":134 82 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [82 this+0 S8 A64])) "/usr/include/c++/7/bits/postypes.h":134 81 {*movdi_internal}
     (nil))
(insn 13 12 16 2 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 12 [0xc])) [0 this_2(D)->_M_state.__value.__wch+0 S4 A32])
        (const_int 0 [0])) "/usr/include/c++/7/bits/postypes.h":134 82 {*movsi_internal}
     (nil))
(insn 16 13 17 2 (const_int 0 [0]) "/usr/include/c++/7/bits/postypes.h":134 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 16 0 NOTE_INSN_DELETED)

;; Function void std::vector<_Tp, _Alloc>::resize(std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEE6resizeEm, funcdef_no=3198, decl_uid=60889, cgraph_uid=1072, symbol_order=1093)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=103 from oldreg=97, assigning class GENERAL_REGS to r103
   21: {r103:DI=r103:DI-r88:DI;clobber flags:CC;}
      REG_DEAD r97:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x10]-r88:DI
    Inserting insn reload before:
   59: r103:DI=r97:DI
    Inserting insn reload after:
   60: r89:DI=r103:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
  BB 7
   Insn 57: point = 0, n_alt = -1
  BB 5
   Insn 46: point = 0, n_alt = 0
   Insn 45: point = 0, n_alt = -2
   Insn 44: point = 1, n_alt = -2
   Insn 43: point = 2, n_alt = 3
   Insn 42: point = 3, n_alt = 0
   Insn 41: point = 5, n_alt = 3
   Insn 40: point = 6, n_alt = 3
   Insn 39: point = 8, n_alt = 3
  BB 3
   Insn 51: point = 9, n_alt = -1
   Insn 25: point = 9, n_alt = 0
   Insn 24: point = 9, n_alt = -2
   Insn 23: point = 10, n_alt = -2
   Insn 22: point = 11, n_alt = 3
   Insn 60: point = 12, n_alt = -2
	Hard reg 1 is preferable by r103 with profit 1
   Insn 21: point = 14, n_alt = 0
   Insn 59: point = 15, n_alt = -2
	Hard reg 1 is preferable by r103 with profit 1
	Hard reg 0 is preferable by r103 with profit 1
   Insn 20: point = 17, n_alt = 3
   Insn 19: point = 18, n_alt = -2
   Insn 18: point = 19, n_alt = 0
   Insn 17: point = 19, n_alt = -2
   Insn 16: point = 20, n_alt = 3
  BB 4
   Insn 37: point = 21, n_alt = -1
   Insn 36: point = 21, n_alt = 0
   Insn 35: point = 22, n_alt = 0
   Insn 34: point = 23, n_alt = 0
   Insn 33: point = 24, n_alt = -2
   Insn 32: point = 25, n_alt = 0
   Insn 31: point = 25, n_alt = -2
   Insn 30: point = 26, n_alt = 3
  BB 2
   Insn 14: point = 27, n_alt = -1
   Insn 13: point = 27, n_alt = 0
   Insn 12: point = 28, n_alt = 0
   Insn 11: point = 29, n_alt = 0
   Insn 10: point = 30, n_alt = -2
   Insn 9: point = 31, n_alt = 0
   Insn 8: point = 31, n_alt = -2
   Insn 7: point = 32, n_alt = 3
   Insn 3: point = 33, n_alt = 5
   Insn 2: point = 33, n_alt = 5
 r87: [29..30]
 r88: [14..18]
 r89: [10..12]
 r90: [23..24]
 r91: [4..6]
 r92: [1..3]
 r93: [27..28]
 r94: [21..22]
 r95: [31..32]
 r96: [19..20]
 r97: [16..17]
 r98: [9..11]
 r99: [25..26]
 r100: [7..8]
 r101: [4..5]
 r102: [0..2]
 r103: [13..15]
Compressing live ranges: from 33 to 26 - 78%
Ranges after the compression:
 r87: [22..23]
 r88: [8..11]
 r89: [6..7]
 r90: [16..17]
 r91: [2..3]
 r92: [0..1]
 r93: [20..21]
 r94: [14..15]
 r95: [24..25]
 r96: [12..13]
 r97: [10..11]
 r98: [6..7]
 r99: [18..19]
 r100: [4..5]
 r101: [2..3]
 r102: [0..1]
 r103: [8..9]

********** Assignment #1: **********

	 Assigning to 103 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=103, tfreq=3)...
	   Assign 0 to reload r103 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 12
changing reg in insn 13
changing reg in insn 35
changing reg in insn 36
changing reg in insn 7
changing reg in insn 8
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
deleting insn with uid = 10.
deleting insn with uid = 59.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 46.


void std::vector<_Tp, _Alloc>::resize(std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,14u} r1={10d,4u,2e} r2={6d} r4={8d,3u} r5={11d,6u} r6={1d,19u} r7={1d,12u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={11d,4u} r18={5d} r19={5d} r20={1d,1u,2e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 473{406d,63u,4e} in 37{32 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 93 95
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":689 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])
        (reg:DI 4 si [ __new_size ])) "/usr/include/c++/7/bits/stl_vector.h":689 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":691 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "/usr/include/c++/7/bits/stl_vector.h":691 81 {*movdi_internal}
     (nil))
(call_insn 9 8 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":691 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 9 12 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])
            (reg:DI 0 ax [orig:87 _1 ] [87]))) "/usr/include/c++/7/bits/stl_vector.h":691 8 {*cmpdi_1}
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax [orig:93 retval.14_12 ] [93])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":691 613 {*setcc_qi}
     (nil))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 retval.14_12 ] [93])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":691 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":691 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 96 97 98
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":692 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [97])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 21 20 60 3 (parallel [
            (set (reg:DI 0 ax [97])
                (minus:DI (reg:DI 0 ax [97])
                    (reg:DI 1 dx [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":692 274 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 60 21 22 3 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (reg:DI 0 ax [97])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 22 60 23 3 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "/usr/include/c++/7/bits/stl_vector.h":692 81 {*movdi_internal}
     (nil))
(call_insn 25 24 51 3 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE17_M_default_appendEm") [flags 0x3]  <function_decl 0x7f44194c1200 _M_default_append>) [0 _M_default_append S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":692 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 51 25 52 3 (set (pc)
        (label_ref:DI 56)) "/usr/include/c++/7/bits/stl_vector.h":695 649 {jump}
     (nil)
 -> 56)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 94 99
(code_label 28 52 29 4 136 (nil) [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":693 81 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "/usr/include/c++/7/bits/stl_vector.h":693 81 {*movdi_internal}
     (nil))
(call_insn 32 31 34 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":693 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 32 35 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])
            (reg:DI 0 ax [orig:90 _4 ] [90]))) "/usr/include/c++/7/bits/stl_vector.h":693 8 {*cmpdi_1}
     (nil))
(insn 35 34 36 4 (set (reg:QI 0 ax [orig:94 retval.15_14 ] [94])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":693 613 {*setcc_qi}
     (nil))
(insn 36 35 37 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 retval.15_14 ] [94])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":693 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":693 617 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 100 101 102
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [100]) [3 this_9(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 0 ax [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 1 dx [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 1 dx [orig:91 _5 ] [91])
                    (reg:DI 0 ax [101])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":694 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 1 dx [orig:91 _5 ] [91])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 __new_size+0 S8 A64]))
        (nil)))
(insn 43 42 44 5 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:92 _6 ] [92])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "/usr/include/c++/7/bits/stl_vector.h":694 81 {*movdi_internal}
     (nil))
(call_insn 46 45 56 5 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc") [flags 0x3]  <function_decl 0x7f44194c1a00 _M_erase_at_end>) [0 _M_erase_at_end S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":694 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4
;;              3 [100.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 56 46 55 7 138 (nil) [2 uses])
(note 55 56 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 49 7 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":695 684 {nop}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 49 57 50 6 135 (nil) [0 uses])
(note 50 49 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 58 50 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::front() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEE5frontEv, funcdef_no=3199, decl_uid=60920, cgraph_uid=1073, symbol_order=1094)

      Creating newreg=94
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=95
Removing SCRATCH in insn #24 (nop 3)
rescanning insn with uid = 24.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r94
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r95
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 26: point = 0, n_alt = 0
  BB 4
   Insn 29: point = 0, n_alt = -1
  BB 2
   Insn 25: point = 0, n_alt = -1
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 1, n_alt = -2
   Insn 19: point = 2, n_alt = -2
   Insn 16: point = 4, n_alt = -2
   Insn 15: point = 5, n_alt = 0
   Insn 14: point = 5, n_alt = -2
   Insn 13: point = 6, n_alt = 3
   Insn 12: point = 7, n_alt = 5
   Insn 11: point = 8, n_alt = -2
   Insn 10: point = 10, n_alt = -2
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 11, n_alt = -2
   Insn 7: point = 12, n_alt = 3
   Insn 4: point = 13, n_alt = 0
   Insn 2: point = 15, n_alt = 5
 r87: [3..4]
 r88: [1..2]
 r89: [11..12]
 r90: [9..10]
 r91: [7..8]
 r92: [5..6]
 r94: [13..14]
 r95: [0..0]
Compressing live ranges: from 15 to 15 - 100%
Ranges after the compression:
 r87: [3..4]
 r88: [1..2]
 r89: [11..12]
 r90: [9..10]
 r91: [7..8]
 r92: [5..6]
 r94: [13..14]
 r95: [0..0]

********** Assignment #1: **********

	 Assigning to 94 (cl=INDEX_REGS, orig=94, freq=1, tfirst=94, tfreq=1)...
	   Assign 0 to reload r94 (freq=1)
	 Assigning to 95 (cl=INDEX_REGS, orig=95, freq=1, tfirst=95, tfreq=1)...
	   Assign 1 to reload r95 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 4
changing reg in insn 24
deleting insn with uid = 10.
deleting insn with uid = 11.
deleting insn with uid = 16.
deleting insn with uid = 19.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 26.


std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::front() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,5u} r1={5d} r2={4d} r4={4d} r5={6d,3u} r6={1d,10u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,1u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 270{243d,27u,0e} in 13{10 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":873 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [9 D.70496+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [94])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":873 1002 {stack_tls_protect_set_di}
     (nil))
(insn 7 4 8 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":876 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_vector.h":876 81 {*movdi_internal}
     (nil))
(call_insn 9 8 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIcSaIcEE5beginEv") [flags 0x3]  <function_decl 0x7f441949b400 begin>) [0 begin S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":876 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 9 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [83 D.65673+0 S8 A64])
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_vector.h":876 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [92])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":876 218 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/bits/stl_vector.h":876 81 {*movdi_internal}
     (nil))
(call_insn 15 14 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv") [flags 0x3]  <function_decl 0x7f44190b3400 operator*>) [0 operator* S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":876 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 15 25 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [9 D.70496+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [95]))
        ]) "/usr/include/c++/7/bits/stl_vector.h":877 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 25 24 31 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":877 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 31 25 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 26 31 27 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":877 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 28 27 32 4 141 (nil) [1 uses])
(note 32 28 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 32 33 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":877 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 33 29 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEEixEm, funcdef_no=3200, decl_uid=60905, cgraph_uid=1074, symbol_order=1095)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 10
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = 0
   Insn 9: point = 5, n_alt = 3
   Insn 8: point = 6, n_alt = 3
   Insn 7: point = 8, n_alt = 3
   Insn 3: point = 9, n_alt = 5
   Insn 2: point = 9, n_alt = 5
 r87: [4..6]
 r88: [2..3]
 r89: [0..1]
 r90: [7..8]
 r91: [4..5]
Compressing live ranges: from 9 to 8 - 88%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={2d,1u,1e} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r17={1d} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{24d,17u,2e} in 8{8 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":795 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":795 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":798 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [90]) [3 this_3(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":798 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":798 81 {*movdi_internal}
     (nil))
(insn 10 9 17 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _5 ] [88])
                (plus:DI (reg:DI 0 ax [91])
                    (reg/f:DI 1 dx [orig:87 _1 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":798 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 1 dx [orig:87 _1 ] [87])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64]))
        (nil)))
(insn 17 10 18 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_vector.h":799 81 {*movdi_internal}
     (nil))
(insn 18 17 20 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":799 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 18 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<char, std::allocator<char> >::_Vector_impl::~_Vector_impl() (_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD2Ev, funcdef_no=3203, decl_uid=65547, cgraph_uid=1076, symbol_order=1097)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<char, std::allocator<char> >::_Vector_impl::~_Vector_impl()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref:DI ("_ZNSaIcED2Ev") [flags 0x41]  <function_decl 0x7f441b92c900 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":81 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":81 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEED2Ev, funcdef_no=3205, decl_uid=60723, cgraph_uid=1079, symbol_order=1100)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=99 from oldreg=88, assigning class GENERAL_REGS to r99
   12: {r99:DI=r99:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   28: r99:DI=r88:DI
    Inserting insn reload after:
   29: r91:DI=r99:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = 0
   Insn 22: point = 0, n_alt = -2
   Insn 21: point = 1, n_alt = 3
   Insn 20: point = 2, n_alt = 0
   Insn 19: point = 2, n_alt = -2
   Insn 18: point = 3, n_alt = -2
   Insn 17: point = 4, n_alt = -2
   Insn 16: point = 5, n_alt = 3
   Insn 15: point = 6, n_alt = 3
   Insn 14: point = 8, n_alt = 3
   Insn 13: point = 9, n_alt = -2
   Insn 29: point = 11, n_alt = -2
	Hard reg 0 is preferable by r99 with profit 1
   Insn 12: point = 13, n_alt = 0
   Insn 28: point = 14, n_alt = -2
	Hard reg 0 is preferable by r99 with profit 1
	Hard reg 1 is preferable by r99 with profit 1
   Insn 11: point = 16, n_alt = -2
   Insn 10: point = 18, n_alt = 3
   Insn 9: point = 20, n_alt = 3
   Insn 8: point = 21, n_alt = -2
   Insn 7: point = 23, n_alt = 3
   Insn 6: point = 25, n_alt = 3
   Insn 2: point = 26, n_alt = 5
 r87: [22..23]
 r88: [15..21]
 r89: [17..18]
 r90: [13..16]
 r91: [10..11]
 r92: [4..9]
 r93: [3..6]
 r94: [0..1]
 r95: [24..25]
 r96: [19..20]
 r97: [7..8]
 r98: [2..5]
 r99: [12..14]
Compressing live ranges: from 26 to 20 - 76%
Ranges after the compression:
 r87: [16..17]
 r88: [10..15]
 r89: [12..13]
 r90: [8..11]
 r91: [6..7]
 r92: [2..5]
 r93: [2..3]
 r94: [0..1]
 r95: [18..19]
 r96: [14..15]
 r97: [4..5]
 r98: [2..3]
 r99: [8..9]

********** Assignment #1: **********

	 Assigning to 99 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=99, tfreq=3)...
	   Assign 1 to reload r99 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 15
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
deleting insn with uid = 11.
deleting insn with uid = 28.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 23.


std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,8u} r1={6d,3u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 207{178d,29u,0e} in 19{17 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":161 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [95])
                (const_int 16 [0x10])) [3 this_10(D)->_M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [96]) [3 this_10(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 12 10 29 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 274 {*subdi_1}
     (nil))
(insn 29 12 13 2 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 13 29 14 2 (set (reg:DI 1 dx [orig:92 _6 ] [92])
        (reg:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 2 cx [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [97]) [3 this_10(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 16 15 18 2 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 18 16 19 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:93 _7 ] [93])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(call_insn 20 19 21 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm") [flags 0x3]  <function_decl 0x7f4419482900 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":162 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 _8 ] [94])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(call_insn 23 22 26 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev") [flags 0x3]  <function_decl 0x7f4419091d00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":163 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 23 27 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":163 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 26 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv, funcdef_no=3207, decl_uid=60600, cgraph_uid=1081, symbol_order=1102)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":115 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = char*; _Tp = char] (_ZSt8_DestroyIPccEvT_S1_RSaIT0_E, funcdef_no=3208, decl_uid=63769, cgraph_uid=1082, symbol_order=1103)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 9: point = 2, n_alt = 3
   Insn 8: point = 3, n_alt = 3
   Insn 4: point = 4, n_alt = 5
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = char*; _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{94d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [86 D.63772+0 S8 A64])
        (reg:DI 1 dx [ D.63772 ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPcEvT_S1_") [flags 0x3]  <function_decl 0x7f44190c8300 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":206 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 12 16 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":207 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_node<Ch>::remove_all_nodes() [with Ch = char] (_ZN8rapidxml8xml_nodeIcE16remove_all_nodesEv, funcdef_no=3209, decl_uid=60258, cgraph_uid=1083, symbol_order=1104)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
  BB 3
   Insn 16: point = 2, n_alt = -1
   Insn 15: point = 2, n_alt = 1
  BB 4
   Insn 33: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = 5
   Insn 21: point = 3, n_alt = 3
   Insn 20: point = 5, n_alt = 3
   Insn 19: point = 6, n_alt = 5
   Insn 18: point = 7, n_alt = 3
  BB 2
   Insn 13: point = 8, n_alt = 5
   Insn 12: point = 9, n_alt = -2
   Insn 11: point = 10, n_alt = 0
   Insn 10: point = 10, n_alt = -2
   Insn 9: point = 11, n_alt = 2
   Insn 8: point = 11, n_alt = 2
   Insn 7: point = 11, n_alt = 0
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [10..11]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
Compressing live ranges: from 12 to 12 - 100%
Ranges after the compression:
 r87: [8..9]
 r88: [10..11]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_node<Ch>::remove_all_nodes() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={3d,1u} r2={3d,1u} r4={3d,1u} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 132{100d,32u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1188 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 82 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(call_insn 11 10 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1190 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 13 11 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 node+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 _6 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 23 13 14 3 151 (nil) [1 uses])
(note 14 23 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [51 node+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1190 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1190 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89 90 91
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1191 81 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [51 node_1->D.60310.m_parent+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1191 81 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 88 [0x58])) [51 node_1->m_next_sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(insn 22 21 33 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 node+0 S8 A64])
        (reg/f:DI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1190 81 {*movdi_internal}
     (nil))
(jump_insn 33 22 34 4 (set (pc)
        (label_ref 23)) "libs/src/../include/rapidxml/rapidxml.hpp":1190 649 {jump}
     (nil)
 -> 23)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 26)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 26 34 27 5 150 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1192 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 48 [0x30])) [51 this_4(D)->m_first_node+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1192 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1193 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_node<Ch>::remove_all_attributes() [with Ch = char] (_ZN8rapidxml8xml_nodeIcE21remove_all_attributesEv, funcdef_no=3210, decl_uid=60277, cgraph_uid=1084, symbol_order=1105)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
  BB 3
   Insn 16: point = 2, n_alt = -1
   Insn 15: point = 2, n_alt = 1
  BB 4
   Insn 33: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = 5
   Insn 21: point = 3, n_alt = 3
   Insn 20: point = 5, n_alt = 3
   Insn 19: point = 6, n_alt = 5
   Insn 18: point = 7, n_alt = 3
  BB 2
   Insn 13: point = 8, n_alt = 5
   Insn 12: point = 9, n_alt = -2
   Insn 11: point = 10, n_alt = 0
   Insn 10: point = 10, n_alt = -2
   Insn 9: point = 11, n_alt = 2
   Insn 8: point = 11, n_alt = 2
   Insn 7: point = 11, n_alt = 0
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [10..11]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
Compressing live ranges: from 12 to 12 - 100%
Ranges after the compression:
 r87: [8..9]
 r88: [10..11]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 6
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_node<Ch>::remove_all_attributes() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={3d,1u} r2={3d,1u} r4={3d,1u} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 132{100d,32u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1309 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 82 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(call_insn 11 10 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1311 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 13 11 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 _6 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 23 13 14 3 154 (nil) [1 uses])
(note 14 23 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [53 attribute+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1311 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1311 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89 90 91
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1312 81 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [51 attribute_1->D.61439.m_parent+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1312 81 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 48 [0x30])) [53 attribute_1->m_next_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(insn 22 21 33 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1311 81 {*movdi_internal}
     (nil))
(jump_insn 33 22 34 4 (set (pc)
        (label_ref 23)) "libs/src/../include/rapidxml/rapidxml.hpp":1311 649 {jump}
     (nil)
 -> 23)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 26)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 26 34 27 5 153 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1313 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 64 [0x40])) [53 this_4(D)->m_first_attribute+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1313 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1314 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_document<Ch>::parse_bom(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE9parse_bomILi0EEEvRPc, funcdef_no=3211, decl_uid=63785, cgraph_uid=1085, symbol_order=1106)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 29:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
  BB 7
   Insn 40: point = 0, n_alt = -1
  BB 5
   Insn 31: point = 0, n_alt = 5
   Insn 30: point = 1, n_alt = 3
   Insn 29: point = 2, n_alt = 3
   Insn 28: point = 4, n_alt = 3
   Insn 27: point = 6, n_alt = 3
  BB 4
   Insn 25: point = 7, n_alt = -1
   Insn 24: point = 7, n_alt = 0
   Insn 23: point = 8, n_alt = 2
   Insn 22: point = 10, n_alt = 0
   Insn 21: point = 12, n_alt = 3
   Insn 20: point = 14, n_alt = 3
  BB 3
   Insn 18: point = 15, n_alt = -1
   Insn 17: point = 15, n_alt = 0
   Insn 16: point = 16, n_alt = 2
   Insn 15: point = 18, n_alt = 0
   Insn 14: point = 20, n_alt = 3
   Insn 13: point = 22, n_alt = 3
  BB 2
   Insn 11: point = 23, n_alt = -1
   Insn 10: point = 23, n_alt = 0
   Insn 9: point = 24, n_alt = 2
   Insn 8: point = 26, n_alt = 3
   Insn 7: point = 28, n_alt = 3
   Insn 3: point = 29, n_alt = 5
   Insn 2: point = 29, n_alt = 5
 r87: [25..26]
 r88: [23..24]
 r89: [19..20]
 r90: [17..18]
 r91: [15..16]
 r92: [11..12]
 r93: [9..10]
 r94: [7..8]
 r95: [3..4]
 r96: [0..2]
 r97: [27..28]
 r98: [21..22]
 r99: [13..14]
 r100: [5..6]
 r101: [0..1]
Compressing live ranges: from 29 to 28 - 96%
Ranges after the compression:
 r87: [24..25]
 r88: [22..23]
 r89: [18..19]
 r90: [16..17]
 r91: [14..15]
 r92: [10..11]
 r93: [8..9]
 r94: [6..7]
 r95: [2..3]
 r96: [0..1]
 r97: [26..27]
 r98: [20..21]
 r99: [12..13]
 r100: [4..5]
 r101: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 31
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_document<Ch>::parse_bom(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={15d,14u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,14u} r7={1d,7u} r17={6d,3u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 81{39d,42u,0e} in 25{25 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 97
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1725 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1725 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1728 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [97]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1728 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1728 84 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _2 ] [88])
            (const_int -17 [0xffffffffffffffef]))) "libs/src/../include/rapidxml/rapidxml.hpp":1728 5 {*cmpqi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1728 617 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 98
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1729 81 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [98]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1729 81 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1729 218 {*adddi_1}
     (nil))
(insn 16 15 17 3 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [0 *_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1729 84 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int -69 [0xffffffffffffffbb]))) "libs/src/../include/rapidxml/rapidxml.hpp":1728 5 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1728 617 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 99
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1730 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [99]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1730 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1730 218 {*adddi_1}
     (nil))
(insn 23 22 24 4 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [0 *_7+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1730 84 {*movqi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 _8 ] [94])
            (const_int -65 [0xffffffffffffffbf]))) "libs/src/../include/rapidxml/rapidxml.hpp":1729 5 {*cmpqi_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1729 617 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 100 101
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1732 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [100]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1732 81 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1732 218 {*adddi_1}
     (nil))
(insn 30 29 31 5 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1732 81 {*movdi_internal}
     (nil))
(insn 31 30 39 5 (set (mem/f:DI (reg/f:DI 0 ax [101]) [3 *text_13(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:96 _10 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1732 81 {*movdi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              4
;;              5 [100.0%]  (FALLTHRU)
;;              3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 39 31 38 7 157 (nil) [3 uses])
(note 38 39 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 34 7 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1734 684 {nop}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 34 40 35 6 155 (nil) [0 uses])
(note 35 34 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 41 35 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::whitespace_pred; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc, funcdef_no=3212, decl_uid=63788, cgraph_uid=1086, symbol_order=1107)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::whitespace_pred; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 160 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE15whitespace_pred4testEc") [flags 0x3]  <function_decl 0x7f44190c8900 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.34_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.34_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 159 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_node(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE10parse_nodeILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3213, decl_uid=63791, cgraph_uid=1087, symbol_order=1108)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 103:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 150:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 182:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 196:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 203:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 211:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 229:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 236:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 243:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 250:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 257:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 264:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 271:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 294:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 307:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 309:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 312:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 313:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 319:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 323:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 330:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 333:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 334:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 342:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 344:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 352:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 354:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 355:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 47
EBB 48
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46

********** Pseudo live ranges #1: **********

  BB 43
   Insn 336: point = 0, n_alt = 0
   Insn 335: point = 0, n_alt = -2
   Insn 334: point = 1, n_alt = 4
   Insn 333: point = 1, n_alt = 4
   Insn 332: point = 1, n_alt = 0
   Insn 331: point = 1, n_alt = -2
   Insn 330: point = 1, n_alt = 4
   Insn 329: point = 1, n_alt = -2
   Insn 328: point = 2, n_alt = 3
   Insn 327: point = 4, n_alt = 3
   Insn 326: point = 5, n_alt = -2
   Insn 325: point = 7, n_alt = -2
   Insn 324: point = 8, n_alt = 0
   Insn 323: point = 8, n_alt = 2
  BB 46
   Insn 363: point = 8, n_alt = -1
   Insn 362: point = 8, n_alt = -2
   Insn 358: point = 9, n_alt = -2
  BB 39
   Insn 384: point = 12, n_alt = -1
   Insn 300: point = 12, n_alt = -2
   Insn 299: point = 13, n_alt = 0
   Insn 298: point = 13, n_alt = -2
   Insn 297: point = 14, n_alt = -2
   Insn 296: point = 15, n_alt = 3
   Insn 295: point = 16, n_alt = 3
   Insn 294: point = 17, n_alt = 5
   Insn 293: point = 18, n_alt = 3
   Insn 292: point = 19, n_alt = 3
   Insn 291: point = 21, n_alt = 3
   Insn 290: point = 23, n_alt = 3
  BB 28
   Insn 380: point = 24, n_alt = -1
   Insn 217: point = 24, n_alt = -2
   Insn 216: point = 25, n_alt = 0
   Insn 215: point = 25, n_alt = -2
   Insn 214: point = 26, n_alt = -2
   Insn 213: point = 27, n_alt = 3
   Insn 212: point = 28, n_alt = 3
   Insn 211: point = 29, n_alt = 5
   Insn 210: point = 30, n_alt = 3
   Insn 209: point = 31, n_alt = 3
   Insn 208: point = 33, n_alt = 3
   Insn 207: point = 35, n_alt = 3
  BB 21
   Insn 378: point = 36, n_alt = -1
   Insn 156: point = 36, n_alt = -2
   Insn 155: point = 37, n_alt = 0
   Insn 154: point = 37, n_alt = -2
   Insn 153: point = 38, n_alt = -2
   Insn 152: point = 39, n_alt = 3
   Insn 151: point = 40, n_alt = 3
   Insn 150: point = 41, n_alt = 5
   Insn 149: point = 42, n_alt = 3
   Insn 148: point = 43, n_alt = 3
   Insn 147: point = 45, n_alt = 3
   Insn 146: point = 47, n_alt = 3
  BB 16
   Insn 376: point = 48, n_alt = -1
   Insn 119: point = 48, n_alt = -2
   Insn 118: point = 49, n_alt = 0
   Insn 117: point = 49, n_alt = -2
   Insn 116: point = 50, n_alt = -2
   Insn 115: point = 51, n_alt = 3
   Insn 114: point = 52, n_alt = 3
  BB 15
   Insn 374: point = 53, n_alt = -1
   Insn 109: point = 53, n_alt = -2
   Insn 108: point = 54, n_alt = 0
   Insn 107: point = 54, n_alt = -2
   Insn 106: point = 55, n_alt = -2
   Insn 105: point = 56, n_alt = 3
   Insn 104: point = 57, n_alt = 3
   Insn 103: point = 58, n_alt = 5
   Insn 102: point = 59, n_alt = 3
   Insn 101: point = 60, n_alt = 3
   Insn 100: point = 62, n_alt = 3
   Insn 99: point = 64, n_alt = 3
  BB 14
   Insn 97: point = 65, n_alt = -1
   Insn 96: point = 65, n_alt = 0
  BB 12
   Insn 372: point = 67, n_alt = -1
   Insn 88: point = 67, n_alt = 1
  BB 13
   Insn 93: point = 68, n_alt = 1
  BB 11
   Insn 86: point = 69, n_alt = -1
   Insn 85: point = 69, n_alt = 0
   Insn 84: point = 70, n_alt = -2
   Insn 83: point = 71, n_alt = 0
   Insn 82: point = 71, n_alt = -2
   Insn 81: point = 72, n_alt = 0
   Insn 80: point = 74, n_alt = 2
   Insn 79: point = 76, n_alt = 0
   Insn 78: point = 78, n_alt = 3
   Insn 77: point = 80, n_alt = 3
  BB 10
   Insn 74: point = 81, n_alt = -1
   Insn 73: point = 81, n_alt = 0
   Insn 72: point = 82, n_alt = 2
   Insn 71: point = 84, n_alt = 0
   Insn 70: point = 86, n_alt = 3
   Insn 69: point = 88, n_alt = 3
  BB 9
   Insn 67: point = 89, n_alt = -1
   Insn 66: point = 89, n_alt = 0
   Insn 65: point = 90, n_alt = 2
   Insn 64: point = 92, n_alt = 0
   Insn 63: point = 94, n_alt = 3
   Insn 62: point = 96, n_alt = 3
  BB 8
   Insn 59: point = 97, n_alt = -1
   Insn 58: point = 97, n_alt = 0
   Insn 57: point = 98, n_alt = 2
   Insn 56: point = 100, n_alt = 0
   Insn 55: point = 102, n_alt = 3
   Insn 54: point = 104, n_alt = 3
  BB 7
   Insn 52: point = 105, n_alt = -1
   Insn 51: point = 105, n_alt = 0
   Insn 50: point = 106, n_alt = 2
   Insn 49: point = 108, n_alt = 0
   Insn 48: point = 110, n_alt = 3
   Insn 47: point = 112, n_alt = 3
  BB 6
   Insn 44: point = 113, n_alt = -1
   Insn 43: point = 113, n_alt = 0
   Insn 42: point = 114, n_alt = 2
   Insn 41: point = 116, n_alt = 3
   Insn 40: point = 118, n_alt = 3
  BB 5
   Insn 38: point = 119, n_alt = -1
   Insn 37: point = 119, n_alt = 0
   Insn 36: point = 120, n_alt = 2
   Insn 35: point = 122, n_alt = 3
   Insn 34: point = 124, n_alt = 3
   Insn 33: point = 125, n_alt = 5
   Insn 32: point = 126, n_alt = 3
   Insn 31: point = 127, n_alt = 3
   Insn 30: point = 129, n_alt = 3
   Insn 29: point = 131, n_alt = 3
  BB 4
   Insn 370: point = 132, n_alt = -1
   Insn 24: point = 132, n_alt = -2
   Insn 23: point = 133, n_alt = 0
   Insn 22: point = 133, n_alt = -2
   Insn 21: point = 134, n_alt = -2
   Insn 20: point = 135, n_alt = 3
   Insn 19: point = 136, n_alt = 3
  BB 3
   Insn 14: point = 137, n_alt = -1
   Insn 13: point = 137, n_alt = 0
  BB 45
   Insn 355: point = 139, n_alt = 2
   Insn 354: point = 140, n_alt = 5
   Insn 353: point = 141, n_alt = 3
   Insn 352: point = 142, n_alt = 3
   Insn 351: point = 144, n_alt = 3
   Insn 350: point = 146, n_alt = 3
  BB 41
   Insn 315: point = 147, n_alt = -1
   Insn 314: point = 147, n_alt = 0
   Insn 313: point = 148, n_alt = 2
   Insn 312: point = 150, n_alt = 3
   Insn 311: point = 152, n_alt = 3
  BB 44
   Insn 386: point = 153, n_alt = -1
   Insn 344: point = 153, n_alt = 5
   Insn 343: point = 154, n_alt = 3
   Insn 342: point = 155, n_alt = 3
   Insn 341: point = 157, n_alt = 3
   Insn 340: point = 159, n_alt = 3
  BB 42
   Insn 321: point = 160, n_alt = -1
   Insn 320: point = 160, n_alt = 0
   Insn 319: point = 161, n_alt = 2
   Insn 318: point = 163, n_alt = 3
   Insn 317: point = 165, n_alt = 3
  BB 40
   Insn 309: point = 166, n_alt = 5
   Insn 308: point = 167, n_alt = 3
   Insn 307: point = 168, n_alt = 3
   Insn 306: point = 170, n_alt = 3
   Insn 305: point = 172, n_alt = 3
  BB 38
   Insn 288: point = 173, n_alt = -1
   Insn 287: point = 173, n_alt = 0
  BB 36
   Insn 382: point = 175, n_alt = -1
   Insn 279: point = 175, n_alt = 1
  BB 37
   Insn 284: point = 176, n_alt = 1
  BB 35
   Insn 277: point = 177, n_alt = -1
   Insn 276: point = 177, n_alt = 0
   Insn 275: point = 178, n_alt = -2
   Insn 274: point = 179, n_alt = 0
   Insn 273: point = 179, n_alt = -2
   Insn 272: point = 180, n_alt = 0
   Insn 271: point = 182, n_alt = 2
   Insn 270: point = 184, n_alt = 0
   Insn 269: point = 186, n_alt = 3
   Insn 268: point = 188, n_alt = 3
  BB 34
   Insn 266: point = 189, n_alt = -1
   Insn 265: point = 189, n_alt = 0
   Insn 264: point = 190, n_alt = 2
   Insn 263: point = 192, n_alt = 0
   Insn 262: point = 194, n_alt = 3
   Insn 261: point = 196, n_alt = 3
  BB 33
   Insn 259: point = 197, n_alt = -1
   Insn 258: point = 197, n_alt = 0
   Insn 257: point = 198, n_alt = 2
   Insn 256: point = 200, n_alt = 0
   Insn 255: point = 202, n_alt = 3
   Insn 254: point = 204, n_alt = 3
  BB 32
   Insn 252: point = 205, n_alt = -1
   Insn 251: point = 205, n_alt = 0
   Insn 250: point = 206, n_alt = 2
   Insn 249: point = 208, n_alt = 0
   Insn 248: point = 210, n_alt = 3
   Insn 247: point = 212, n_alt = 3
  BB 31
   Insn 245: point = 213, n_alt = -1
   Insn 244: point = 213, n_alt = 0
   Insn 243: point = 214, n_alt = 2
   Insn 242: point = 216, n_alt = 0
   Insn 241: point = 218, n_alt = 3
   Insn 240: point = 220, n_alt = 3
  BB 30
   Insn 238: point = 221, n_alt = -1
   Insn 237: point = 221, n_alt = 0
   Insn 236: point = 222, n_alt = 2
   Insn 235: point = 224, n_alt = 0
   Insn 234: point = 226, n_alt = 3
   Insn 233: point = 228, n_alt = 3
  BB 29
   Insn 231: point = 229, n_alt = -1
   Insn 230: point = 229, n_alt = 0
   Insn 229: point = 230, n_alt = 2
   Insn 228: point = 232, n_alt = 0
   Insn 227: point = 234, n_alt = 3
   Insn 226: point = 236, n_alt = 3
  BB 48
   Insn 395: point = 237, n_alt = -1
  BB 27
   Insn 205: point = 237, n_alt = -1
   Insn 204: point = 237, n_alt = 0
   Insn 203: point = 238, n_alt = 2
   Insn 202: point = 240, n_alt = 0
   Insn 201: point = 242, n_alt = 3
   Insn 200: point = 244, n_alt = 3
  BB 26
   Insn 198: point = 245, n_alt = -1
   Insn 197: point = 245, n_alt = 0
   Insn 196: point = 246, n_alt = 2
   Insn 195: point = 248, n_alt = 0
   Insn 194: point = 250, n_alt = 3
   Insn 193: point = 252, n_alt = 3
  BB 25
   Insn 191: point = 253, n_alt = -1
   Insn 190: point = 253, n_alt = 0
   Insn 189: point = 254, n_alt = 2
   Insn 188: point = 256, n_alt = 0
   Insn 187: point = 258, n_alt = 3
   Insn 186: point = 260, n_alt = 3
  BB 24
   Insn 184: point = 261, n_alt = -1
   Insn 183: point = 261, n_alt = 0
   Insn 182: point = 262, n_alt = 2
   Insn 181: point = 264, n_alt = 0
   Insn 180: point = 266, n_alt = 3
   Insn 179: point = 268, n_alt = 3
  BB 23
   Insn 177: point = 269, n_alt = -1
   Insn 176: point = 269, n_alt = 0
   Insn 175: point = 270, n_alt = 2
   Insn 174: point = 272, n_alt = 0
   Insn 173: point = 274, n_alt = 3
   Insn 172: point = 276, n_alt = 3
  BB 22
   Insn 170: point = 277, n_alt = -1
   Insn 169: point = 277, n_alt = 0
   Insn 168: point = 278, n_alt = 2
   Insn 167: point = 280, n_alt = 0
   Insn 166: point = 282, n_alt = 3
   Insn 165: point = 284, n_alt = 3
  BB 47
   Insn 391: point = 285, n_alt = -1
   Insn 390: point = 285, n_alt = -1
  BB 20
   Insn 144: point = 285, n_alt = -1
   Insn 143: point = 285, n_alt = 0
   Insn 142: point = 286, n_alt = 2
   Insn 141: point = 288, n_alt = 0
   Insn 140: point = 290, n_alt = 3
   Insn 139: point = 292, n_alt = 3
  BB 19
   Insn 134: point = 293, n_alt = -1
   Insn 133: point = 293, n_alt = 0
  BB 18
   Insn 132: point = 295, n_alt = -1
   Insn 131: point = 295, n_alt = 0
  BB 17
   Insn 130: point = 296, n_alt = -1
   Insn 129: point = 296, n_alt = 0
   Insn 128: point = 296, n_alt = 0
   Insn 127: point = 298, n_alt = 2
   Insn 126: point = 300, n_alt = 0
   Insn 125: point = 302, n_alt = 3
   Insn 124: point = 304, n_alt = 3
  BB 2
   Insn 12: point = 305, n_alt = -1
   Insn 11: point = 305, n_alt = 0
   Insn 10: point = 305, n_alt = 0
   Insn 9: point = 307, n_alt = 2
   Insn 8: point = 309, n_alt = 3
   Insn 7: point = 311, n_alt = 3
   Insn 3: point = 312, n_alt = 5
   Insn 2: point = 312, n_alt = 5
 r87: [308..309]
 r88: [306..307]
 r89: [305..305] [137..138]
 r90: [128..129]
 r91: [125..127]
 r92: [121..122]
 r93: [119..120]
 r94: [115..116]
 r95: [113..114]
 r96: [109..110]
 r97: [107..108]
 r98: [105..106]
 r99: [101..102]
 r100: [99..100]
 r101: [97..98]
 r102: [93..94]
 r103: [91..92]
 r104: [89..90]
 r105: [85..86]
 r106: [83..84]
 r107: [81..82]
 r108: [77..78]
 r109: [75..76]
 r110: [73..74]
 r111: [71..72]
 r112: [69..70]
 r113: [61..62]
 r114: [58..60]
 r115: [301..302]
 r116: [299..300]
 r117: [297..298]
 r118: [293..296]
 r119: [289..290]
 r120: [287..288]
 r121: [285..286]
 r122: [44..45]
 r123: [41..43]
 r124: [281..282]
 r125: [279..280]
 r126: [277..278]
 r127: [273..274]
 r128: [271..272]
 r129: [269..270]
 r130: [265..266]
 r131: [263..264]
 r132: [261..262]
 r133: [257..258]
 r134: [255..256]
 r135: [253..254]
 r136: [249..250]
 r137: [247..248]
 r138: [245..246]
 r139: [241..242]
 r140: [239..240]
 r141: [237..238]
 r142: [32..33]
 r143: [29..31]
 r144: [233..234]
 r145: [231..232]
 r146: [229..230]
 r147: [225..226]
 r148: [223..224]
 r149: [221..222]
 r150: [217..218]
 r151: [215..216]
 r152: [213..214]
 r153: [209..210]
 r154: [207..208]
 r155: [205..206]
 r156: [201..202]
 r157: [199..200]
 r158: [197..198]
 r159: [193..194]
 r160: [191..192]
 r161: [189..190]
 r162: [185..186]
 r163: [183..184]
 r164: [181..182]
 r165: [179..180]
 r166: [177..178]
 r167: [20..21]
 r168: [17..19]
 r169: [169..170]
 r170: [166..168]
 r171: [149..150]
 r172: [147..148]
 r173: [162..163]
 r174: [160..161]
 r175: [1..2]
 r176: [156..157]
 r177: [153..155]
 r178: [143..144]
 r179: [140..142]
 r180: [139..139] [132..132] [53..53] [48..48] [36..36] [24..24] [10..12]
 r181: [65..68]
 r182: [173..176]
 r183: [0..5]
 r184: [8..9]
 r185: [310..311]
 r186: [134..136]
 r187: [133..135]
 r188: [130..131]
 r189: [125..126]
 r190: [123..124]
 r191: [117..118]
 r192: [111..112]
 r193: [103..104]
 r194: [95..96]
 r195: [87..88]
 r196: [79..80]
 r197: [63..64]
 r198: [58..59]
 r199: [55..57]
 r200: [54..56]
 r201: [50..52]
 r202: [49..51]
 r203: [303..304]
 r204: [291..292]
 r205: [46..47]
 r206: [41..42]
 r207: [38..40]
 r208: [37..39]
 r209: [283..284]
 r210: [275..276]
 r211: [267..268]
 r212: [259..260]
 r213: [251..252]
 r214: [243..244]
 r215: [34..35]
 r216: [29..30]
 r217: [26..28]
 r218: [25..27]
 r219: [235..236]
 r220: [227..228]
 r221: [219..220]
 r222: [211..212]
 r223: [203..204]
 r224: [195..196]
 r225: [187..188]
 r226: [22..23]
 r227: [17..18]
 r228: [14..16]
 r229: [13..15]
 r230: [171..172]
 r231: [166..167]
 r232: [151..152]
 r233: [164..165]
 r234: [6..7]
 r235: [3..4]
 r236: [158..159]
 r237: [153..154]
 r238: [145..146]
 r239: [140..141]
Compressing live ranges: from 312 to 283 - 90%
Ranges after the compression:
 r87: [279..280]
 r88: [277..278]
 r89: [276..276] [115..116]
 r90: [108..109]
 r91: [106..107]
 r92: [102..103]
 r93: [100..101]
 r94: [96..97]
 r95: [94..95]
 r96: [90..91]
 r97: [88..89]
 r98: [86..87]
 r99: [82..83]
 r100: [80..81]
 r101: [78..79]
 r102: [74..75]
 r103: [72..73]
 r104: [70..71]
 r105: [66..67]
 r106: [64..65]
 r107: [62..63]
 r108: [58..59]
 r109: [56..57]
 r110: [54..55]
 r111: [52..53]
 r112: [50..51]
 r113: [44..45]
 r114: [42..43]
 r115: [272..273]
 r116: [270..271]
 r117: [268..269]
 r118: [266..267]
 r119: [262..263]
 r120: [260..261]
 r121: [258..259]
 r122: [32..33]
 r123: [30..31]
 r124: [254..255]
 r125: [252..253]
 r126: [250..251]
 r127: [246..247]
 r128: [244..245]
 r129: [242..243]
 r130: [238..239]
 r131: [236..237]
 r132: [234..235]
 r133: [230..231]
 r134: [228..229]
 r135: [226..227]
 r136: [222..223]
 r137: [220..221]
 r138: [218..219]
 r139: [214..215]
 r140: [212..213]
 r141: [210..211]
 r142: [23..24]
 r143: [21..22]
 r144: [206..207]
 r145: [204..205]
 r146: [202..203]
 r147: [198..199]
 r148: [196..197]
 r149: [194..195]
 r150: [190..191]
 r151: [188..189]
 r152: [186..187]
 r153: [182..183]
 r154: [180..181]
 r155: [178..179]
 r156: [174..175]
 r157: [172..173]
 r158: [170..171]
 r159: [166..167]
 r160: [164..165]
 r161: [162..163]
 r162: [158..159]
 r163: [156..157]
 r164: [154..155]
 r165: [152..153]
 r166: [150..151]
 r167: [14..15]
 r168: [12..13]
 r169: [144..145]
 r170: [142..143]
 r171: [126..127]
 r172: [124..125]
 r173: [138..139]
 r174: [136..137]
 r175: [0..1]
 r176: [132..133]
 r177: [130..131]
 r178: [120..121]
 r179: [118..119]
 r180: [117..117] [112..112] [39..39] [36..36] [27..27] [18..18] [8..9]
 r181: [48..49]
 r182: [148..149]
 r183: [0..3]
 r184: [6..7]
 r185: [281..282]
 r186: [113..114]
 r187: [113..114]
 r188: [110..111]
 r189: [106..107]
 r190: [104..105]
 r191: [98..99]
 r192: [92..93]
 r193: [84..85]
 r194: [76..77]
 r195: [68..69]
 r196: [60..61]
 r197: [46..47]
 r198: [42..43]
 r199: [40..41]
 r200: [40..41]
 r201: [37..38]
 r202: [37..38]
 r203: [274..275]
 r204: [264..265]
 r205: [34..35]
 r206: [30..31]
 r207: [28..29]
 r208: [28..29]
 r209: [256..257]
 r210: [248..249]
 r211: [240..241]
 r212: [232..233]
 r213: [224..225]
 r214: [216..217]
 r215: [25..26]
 r216: [21..22]
 r217: [19..20]
 r218: [19..20]
 r219: [208..209]
 r220: [200..201]
 r221: [192..193]
 r222: [184..185]
 r223: [176..177]
 r224: [168..169]
 r225: [160..161]
 r226: [16..17]
 r227: [12..13]
 r228: [10..11]
 r229: [10..11]
 r230: [146..147]
 r231: [142..143]
 r232: [128..129]
 r233: [140..141]
 r234: [4..5]
 r235: [2..3]
 r236: [134..135]
 r237: [130..131]
 r238: [122..123]
 r239: [118..119]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 133
changing reg in insn 131
changing reg in insn 129
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 258
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 294
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 309
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 328
changing reg in insn 329
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 344
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 300
changing reg in insn 217
changing reg in insn 156
changing reg in insn 119
changing reg in insn 109
changing reg in insn 24
changing reg in insn 358
changing reg in insn 93
changing reg in insn 88
changing reg in insn 96
changing reg in insn 284
changing reg in insn 279
changing reg in insn 287
changing reg in insn 326
changing reg in insn 335
changing reg in insn 331
changing reg in insn 358
changing reg in insn 362
changing reg in insn 7
changing reg in insn 8
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 40
changing reg in insn 41
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 69
changing reg in insn 70
changing reg in insn 77
changing reg in insn 78
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 105
changing reg in insn 107
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 117
changing reg in insn 124
changing reg in insn 125
changing reg in insn 139
changing reg in insn 140
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 152
changing reg in insn 154
changing reg in insn 165
changing reg in insn 166
changing reg in insn 172
changing reg in insn 173
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 193
changing reg in insn 194
changing reg in insn 200
changing reg in insn 201
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 213
changing reg in insn 215
changing reg in insn 226
changing reg in insn 227
changing reg in insn 233
changing reg in insn 234
changing reg in insn 240
changing reg in insn 241
changing reg in insn 247
changing reg in insn 248
changing reg in insn 254
changing reg in insn 255
changing reg in insn 261
changing reg in insn 262
changing reg in insn 268
changing reg in insn 269
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 297
changing reg in insn 296
changing reg in insn 298
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 317
changing reg in insn 318
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 340
changing reg in insn 341
changing reg in insn 343
changing reg in insn 344
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
deleting insn with uid = 24.
deleting insn with uid = 84.
deleting insn with uid = 109.
deleting insn with uid = 119.
deleting insn with uid = 156.
deleting insn with uid = 217.
deleting insn with uid = 275.
deleting insn with uid = 300.
deleting insn with uid = 325.
deleting insn with uid = 358.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 274.
verify found no changes in insn with uid = 299.
verify found no changes in insn with uid = 324.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 336.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_node(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={149d,142u} r1={28d,16u} r2={12d} r3={1d,2u} r4={20d,9u} r5={23d,12u} r6={1d,104u} r7={1d,59u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={69d,30u} r18={11d} r19={11d} r20={1d,1u} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} 
;;    total ref usage 1416{1041d,375u,0e} in 267{256 regular + 11 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 185
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":2081 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":2081 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2084 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [185]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2084 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2084 84 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (sign_extend:SI (reg:QI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":2084 151 {extendqisi2}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 33 [0x21]))) "libs/src/../include/rapidxml/rapidxml.hpp":2084 7 {*cmpsi_1}
     (nil))
(jump_insn 12 11 365 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2084 617 {*jcc_1}
     (nil)
 -> 122)
;;  succ:       17
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 365 12 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 365 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 63 [0x3f]))) "libs/src/../include/rapidxml/rapidxml.hpp":2084 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 366 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2084 617 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180 186 187
(note 366 14 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 366 20 4 (set (reg:DI 1 dx [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2090 81 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2090 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [186])) "libs/src/../include/rapidxml/rapidxml.hpp":2090 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [187])) "libs/src/../include/rapidxml/rapidxml.hpp":2090 81 {*movdi_internal}
     (nil))
(call_insn 23 22 370 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE13parse_elementILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8b00 parse_element>) [0 parse_element S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2090 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 370 23 371 4 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2090 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 371 370 27)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 188 189 190
(code_label 27 371 28 5 164 (nil) [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2094 81 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [188]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2094 81 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:90 _4 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2094 218 {*adddi_1}
     (nil))
(insn 32 31 33 5 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2094 81 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (mem/f:DI (reg/f:DI 0 ax [189]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":2094 81 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 81 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [190]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 81 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [0 *_6+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 84 {*movqi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 _7 ] [93])
            (const_int 120 [0x78]))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 5 {*cmpqi_1}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 617 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 191
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 81 {*movdi_internal}
     (nil))
(insn 41 40 42 6 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [191]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 81 {*movdi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:QI 0 ax [orig:95 _9 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [0 *_8+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2095 84 {*movqi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _9 ] [95])
            (const_int 88 [0x58]))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 5 {*cmpqi_1}
     (nil))
(jump_insn 44 43 45 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 617 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       7 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 192
(code_label 45 44 46 7 166 (nil) [1 uses])
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 81 {*movdi_internal}
     (nil))
(insn 48 47 49 7 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [192]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:96 _10 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2096 218 {*adddi_1}
     (nil))
(insn 50 49 51 7 (set (reg:QI 0 ax [orig:98 _12 ] [98])
        (mem:QI (reg/f:DI 0 ax [orig:97 _11 ] [97]) [0 *_11+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 84 {*movqi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 _12 ] [98])
            (const_int 109 [0x6d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 5 {*cmpqi_1}
     (nil))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 617 {*jcc_1}
     (nil)
 -> 60)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 193
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 81 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [193]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 81 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2096 218 {*adddi_1}
     (nil))
(insn 57 56 58 8 (set (reg:QI 0 ax [orig:101 _15 ] [101])
        (mem:QI (reg/f:DI 0 ax [orig:100 _14 ] [100]) [0 *_14+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2096 84 {*movqi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:101 _15 ] [101])
            (const_int 77 [0x4d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2096 5 {*cmpqi_1}
     (nil))
(jump_insn 59 58 60 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2096 617 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       9 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103 104 194
(code_label 60 59 61 9 168 (nil) [1 uses])
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 81 {*movdi_internal}
     (nil))
(insn 63 62 64 9 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [194]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 81 {*movdi_internal}
     (nil))
(insn 64 63 65 9 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2097 218 {*adddi_1}
     (nil))
(insn 65 64 66 9 (set (reg:QI 0 ax [orig:104 _18 ] [104])
        (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 84 {*movqi_internal}
     (nil))
(insn 66 65 67 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 _18 ] [104])
            (const_int 108 [0x6c]))) "libs/src/../include/rapidxml/rapidxml.hpp":2096 5 {*cmpqi_1}
     (nil))
(jump_insn 67 66 68 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2096 617 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107 195
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 81 {*movdi_internal}
     (nil))
(insn 70 69 71 10 (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [195]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 81 {*movdi_internal}
     (nil))
(insn 71 70 72 10 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (plus:DI (reg/f:DI 0 ax [orig:105 _19 ] [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2097 218 {*adddi_1}
     (nil))
(insn 72 71 73 10 (set (reg:QI 0 ax [orig:107 _21 ] [107])
        (mem:QI (reg/f:DI 0 ax [orig:106 _20 ] [106]) [0 *_20+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 84 {*movqi_internal}
     (nil))
(insn 73 72 74 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:107 _21 ] [107])
            (const_int 76 [0x4c]))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 5 {*cmpqi_1}
     (nil))
(jump_insn 74 73 75 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 617 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 109 110 111 112 196
(code_label 75 74 76 11 169 (nil) [1 uses])
(note 76 75 77 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 11 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2098 81 {*movdi_internal}
     (nil))
(insn 78 77 79 11 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [196]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2098 81 {*movdi_internal}
     (nil))
(insn 79 78 80 11 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2098 218 {*adddi_1}
     (nil))
(insn 80 79 81 11 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _23 ] [109]) [0 *_23+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2098 84 {*movqi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:SI 0 ax [orig:111 _25 ] [111])
        (sign_extend:SI (reg:QI 0 ax [orig:110 _24 ] [110]))) "libs/src/../include/rapidxml/rapidxml.hpp":2098 151 {extendqisi2}
     (nil))
(insn 82 81 83 11 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:111 _25 ] [111])) "libs/src/../include/rapidxml/rapidxml.hpp":2098 82 {*movsi_internal}
     (nil))
(call_insn 83 82 85 11 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE15whitespace_pred4testEc") [flags 0x3]  <function_decl 0x7f44190c8900 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2098 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 85 83 86 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:112 _26 ] [112])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 86 85 87 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2097 617 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 181
(note 87 86 88 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 372 12 (set (reg:QI 0 ax [orig:181 iftmp.37_95 ] [181])
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 84 {*movqi_internal}
     (nil))
(jump_insn 372 88 373 12 (set (pc)
        (label_ref 94)) "libs/src/../include/rapidxml/rapidxml.hpp":2097 649 {jump}
     (nil)
 -> 94)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181

(barrier 373 372 91)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       6
;;              8
;;              10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 181
(code_label 91 373 92 13 167 (nil) [4 uses])
(note 92 91 93 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 13 (set (reg:QI 0 ax [orig:181 iftmp.37_95 ] [181])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2097 84 {*movqi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181
;; lr  def 	 17 [flags]
(code_label 94 93 95 14 170 (nil) [1 uses])
(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:181 iftmp.37_95 ] [181])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 97 96 98 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2095 617 {*jcc_1}
     (nil)
 -> 112)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113 114 180 197 198 199 200
(note 98 97 99 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 15 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2101 81 {*movdi_internal}
     (nil))
(insn 100 99 101 15 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [197]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2101 81 {*movdi_internal}
     (nil))
(insn 101 100 102 15 (parallel [
            (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
                (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2101 218 {*adddi_1}
     (nil))
(insn 102 101 103 15 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2101 81 {*movdi_internal}
     (nil))
(insn 103 102 104 15 (set (mem/f:DI (reg/f:DI 0 ax [198]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:114 _28 ] [114])) "libs/src/../include/rapidxml/rapidxml.hpp":2101 81 {*movdi_internal}
     (nil))
(insn 104 103 105 15 (set (reg:DI 1 dx [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2102 81 {*movdi_internal}
     (nil))
(insn 105 104 106 15 (set (reg:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2102 81 {*movdi_internal}
     (nil))
(insn 106 105 107 15 (set (reg:DI 4 si)
        (reg:DI 1 dx [199])) "libs/src/../include/rapidxml/rapidxml.hpp":2102 81 {*movdi_internal}
     (nil))
(insn 107 106 108 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) "libs/src/../include/rapidxml/rapidxml.hpp":2102 81 {*movdi_internal}
     (nil))
(call_insn 108 107 374 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE21parse_xml_declarationILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8c00 parse_xml_declaration>) [0 parse_xml_declaration S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2102 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 374 108 375 15 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2102 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 375 374 112)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180 201 202
(code_label 112 375 113 16 171 (nil) [1 uses])
(note 113 112 114 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 16 (set (reg:DI 1 dx [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2107 81 {*movdi_internal}
     (nil))
(insn 115 114 116 16 (set (reg:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2107 81 {*movdi_internal}
     (nil))
(insn 116 115 117 16 (set (reg:DI 4 si)
        (reg:DI 1 dx [201])) "libs/src/../include/rapidxml/rapidxml.hpp":2107 81 {*movdi_internal}
     (nil))
(insn 117 116 118 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) "libs/src/../include/rapidxml/rapidxml.hpp":2107 81 {*movdi_internal}
     (nil))
(call_insn 118 117 376 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE8parse_piILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8d00 parse_pi>) [0 parse_pi S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2107 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 376 118 377 16 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2107 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 377 376 122)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 203
(code_label 122 377 123 17 163 (nil) [1 uses])
(note 123 122 124 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 17 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2114 81 {*movdi_internal}
     (nil))
(insn 125 124 126 17 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [203]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2114 81 {*movdi_internal}
     (nil))
(insn 126 125 127 17 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2114 218 {*adddi_1}
     (nil))
(insn 127 126 128 17 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2114 84 {*movqi_internal}
     (nil))
(insn 128 127 129 17 (set (reg:SI 0 ax [orig:118 _32 ] [118])
        (sign_extend:SI (reg:QI 0 ax [orig:117 _31 ] [117]))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 151 {extendqisi2}
     (nil))
(insn 129 128 130 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 _32 ] [118])
            (const_int 68 [0x44]))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 7 {*cmpsi_1}
     (nil))
(jump_insn 130 129 367 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 224)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 617 {*jcc_1}
     (nil)
 -> 224)
;;  succ:       29
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  def 	 17 [flags]
(note 367 130 131 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 131 367 132 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 _32 ] [118])
            (const_int 91 [0x5b]))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 7 {*cmpsi_1}
     (nil))
(jump_insn 132 131 368 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 617 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       22
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  def 	 17 [flags]
(note 368 132 133 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 133 368 134 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 _32 ] [118])
            (const_int 45 [0x2d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 7 {*cmpsi_1}
     (nil))
(jump_insn 134 133 138 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 303)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2114 617 {*jcc_1}
     (nil)
 -> 303)
;;  succ:       20 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 120 121 204
(note 138 134 139 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 20 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2119 81 {*movdi_internal}
     (nil))
(insn 140 139 141 20 (set (reg/f:DI 0 ax [orig:119 _33 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [204]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2119 81 {*movdi_internal}
     (nil))
(insn 141 140 142 20 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [orig:119 _33 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2119 218 {*adddi_1}
     (nil))
(insn 142 141 143 20 (set (reg:QI 0 ax [orig:121 _35 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [0 *_34+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2119 84 {*movqi_internal}
     (nil))
(insn 143 142 144 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 _35 ] [121])
            (const_int 45 [0x2d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2119 5 {*cmpqi_1}
     (nil))
(jump_insn 144 143 145 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 389)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2119 617 {*jcc_1}
     (nil)
 -> 389)
;;  succ:       21 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 180 205 206 207 208
(note 145 144 146 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 21 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2122 81 {*movdi_internal}
     (nil))
(insn 147 146 148 21 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (reg/f:DI 0 ax [205]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2122 81 {*movdi_internal}
     (nil))
(insn 148 147 149 21 (parallel [
            (set (reg/f:DI 1 dx [orig:123 _37 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2122 218 {*adddi_1}
     (nil))
(insn 149 148 150 21 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2122 81 {*movdi_internal}
     (nil))
(insn 150 149 151 21 (set (mem/f:DI (reg/f:DI 0 ax [206]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:123 _37 ] [123])) "libs/src/../include/rapidxml/rapidxml.hpp":2122 81 {*movdi_internal}
     (nil))
(insn 151 150 152 21 (set (reg:DI 1 dx [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2123 81 {*movdi_internal}
     (nil))
(insn 152 151 153 21 (set (reg:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2123 81 {*movdi_internal}
     (nil))
(insn 153 152 154 21 (set (reg:DI 4 si)
        (reg:DI 1 dx [207])) "libs/src/../include/rapidxml/rapidxml.hpp":2123 81 {*movdi_internal}
     (nil))
(insn 154 153 155 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) "libs/src/../include/rapidxml/rapidxml.hpp":2123 81 {*movdi_internal}
     (nil))
(call_insn 155 154 378 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE13parse_commentILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8e00 parse_comment>) [0 parse_comment S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2123 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 378 155 379 21 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2123 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 379 378 163)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 209
(code_label 163 379 164 22 174 (nil) [1 uses])
(note 164 163 165 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 22 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 166 165 167 22 (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [209]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 167 166 168 22 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:124 _38 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2129 218 {*adddi_1}
     (nil))
(insn 168 167 169 22 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [orig:125 _39 ] [125]) [0 *_39+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 84 {*movqi_internal}
     (nil))
(insn 169 168 170 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 67 [0x43]))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 5 {*cmpqi_1}
     (nil))
(jump_insn 170 169 171 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       23 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 210
(note 171 170 172 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 23 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 173 172 174 23 (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
        (mem/f:DI (reg/f:DI 0 ax [210]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 174 173 175 23 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2129 218 {*adddi_1}
     (nil))
(insn 175 174 176 23 (set (reg:QI 0 ax [orig:129 _43 ] [129])
        (mem:QI (reg/f:DI 0 ax [orig:128 _42 ] [128]) [0 *_42+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 84 {*movqi_internal}
     (nil))
(insn 176 175 177 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:129 _43 ] [129])
            (const_int 68 [0x44]))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 5 {*cmpqi_1}
     (nil))
(jump_insn 177 176 178 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       24 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 211
(note 178 177 179 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 179 178 180 24 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 180 179 181 24 (set (reg/f:DI 0 ax [orig:130 _44 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [211]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 81 {*movdi_internal}
     (nil))
(insn 181 180 182 24 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 _44 ] [130])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2129 218 {*adddi_1}
     (nil))
(insn 182 181 183 24 (set (reg:QI 0 ax [orig:132 _46 ] [132])
        (mem:QI (reg/f:DI 0 ax [orig:131 _45 ] [131]) [0 *_45+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2129 84 {*movqi_internal}
     (nil))
(insn 183 182 184 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:132 _46 ] [132])
            (const_int 65 [0x41]))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 5 {*cmpqi_1}
     (nil))
(jump_insn 184 183 185 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       25 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 212
(note 185 184 186 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 25 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 187 186 188 25 (set (reg/f:DI 0 ax [orig:133 _47 ] [133])
        (mem/f:DI (reg/f:DI 0 ax [212]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 188 187 189 25 (parallel [
            (set (reg/f:DI 0 ax [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 0 ax [orig:133 _47 ] [133])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2130 218 {*adddi_1}
     (nil))
(insn 189 188 190 25 (set (reg:QI 0 ax [orig:135 _49 ] [135])
        (mem:QI (reg/f:DI 0 ax [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 84 {*movqi_internal}
     (nil))
(insn 190 189 191 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 _49 ] [135])
            (const_int 84 [0x54]))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 5 {*cmpqi_1}
     (nil))
(jump_insn 191 190 192 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2129 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       26 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 213
(note 192 191 193 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 26 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 194 193 195 26 (set (reg/f:DI 0 ax [orig:136 _50 ] [136])
        (mem/f:DI (reg/f:DI 0 ax [213]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 195 194 196 26 (parallel [
            (set (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (plus:DI (reg/f:DI 0 ax [orig:136 _50 ] [136])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2130 218 {*adddi_1}
     (nil))
(insn 196 195 197 26 (set (reg:QI 0 ax [orig:138 _52 ] [138])
        (mem:QI (reg/f:DI 0 ax [orig:137 _51 ] [137]) [0 *_51+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 84 {*movqi_internal}
     (nil))
(insn 197 196 198 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:138 _52 ] [138])
            (const_int 65 [0x41]))) "libs/src/../include/rapidxml/rapidxml.hpp":2130 5 {*cmpqi_1}
     (nil))
(jump_insn 198 197 199 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2130 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       27 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 141 214
(note 199 198 200 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 27 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 201 200 202 27 (set (reg/f:DI 0 ax [orig:139 _53 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [214]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 81 {*movdi_internal}
     (nil))
(insn 202 201 203 27 (parallel [
            (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (plus:DI (reg/f:DI 0 ax [orig:139 _53 ] [139])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2130 218 {*adddi_1}
     (nil))
(insn 203 202 204 27 (set (reg:QI 0 ax [orig:141 _55 ] [141])
        (mem:QI (reg/f:DI 0 ax [orig:140 _54 ] [140]) [0 *_54+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2130 84 {*movqi_internal}
     (nil))
(insn 204 203 205 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:141 _55 ] [141])
            (const_int 91 [0x5b]))) "libs/src/../include/rapidxml/rapidxml.hpp":2130 5 {*cmpqi_1}
     (nil))
(jump_insn 205 204 206 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 394)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2130 617 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       28 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 143 180 215 216 217 218
(note 206 205 207 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 28 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2133 81 {*movdi_internal}
     (nil))
(insn 208 207 209 28 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [215]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2133 81 {*movdi_internal}
     (nil))
(insn 209 208 210 28 (parallel [
            (set (reg/f:DI 1 dx [orig:143 _57 ] [143])
                (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2133 218 {*adddi_1}
     (nil))
(insn 210 209 211 28 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2133 81 {*movdi_internal}
     (nil))
(insn 211 210 212 28 (set (mem/f:DI (reg/f:DI 0 ax [216]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:143 _57 ] [143])) "libs/src/../include/rapidxml/rapidxml.hpp":2133 81 {*movdi_internal}
     (nil))
(insn 212 211 213 28 (set (reg:DI 1 dx [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2134 81 {*movdi_internal}
     (nil))
(insn 213 212 214 28 (set (reg:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2134 81 {*movdi_internal}
     (nil))
(insn 214 213 215 28 (set (reg:DI 4 si)
        (reg:DI 1 dx [217])) "libs/src/../include/rapidxml/rapidxml.hpp":2134 81 {*movdi_internal}
     (nil))
(insn 215 214 216 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [218])) "libs/src/../include/rapidxml/rapidxml.hpp":2134 81 {*movdi_internal}
     (nil))
(call_insn 216 215 380 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE11parse_cdataILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8f00 parse_cdata>) [0 parse_cdata S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2134 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 380 216 381 28 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2134 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 381 380 224)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 146 219
(code_label 224 381 225 29 173 (nil) [1 uses])
(note 225 224 226 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 29 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 227 226 228 29 (set (reg/f:DI 0 ax [orig:144 _58 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [219]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 228 227 229 29 (parallel [
            (set (reg/f:DI 0 ax [orig:145 _59 ] [145])
                (plus:DI (reg/f:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2140 218 {*adddi_1}
     (nil))
(insn 229 228 230 29 (set (reg:QI 0 ax [orig:146 _60 ] [146])
        (mem:QI (reg/f:DI 0 ax [orig:145 _59 ] [145]) [0 *_59+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 84 {*movqi_internal}
     (nil))
(insn 230 229 231 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:146 _60 ] [146])
            (const_int 79 [0x4f]))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 5 {*cmpqi_1}
     (nil))
(jump_insn 231 230 232 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       30 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 220
(note 232 231 233 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 30 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 234 233 235 30 (set (reg/f:DI 0 ax [orig:147 _61 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [220]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 235 234 236 30 (parallel [
            (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:147 _61 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2140 218 {*adddi_1}
     (nil))
(insn 236 235 237 30 (set (reg:QI 0 ax [orig:149 _63 ] [149])
        (mem:QI (reg/f:DI 0 ax [orig:148 _62 ] [148]) [0 *_62+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 84 {*movqi_internal}
     (nil))
(insn 237 236 238 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:149 _63 ] [149])
            (const_int 67 [0x43]))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 5 {*cmpqi_1}
     (nil))
(jump_insn 238 237 239 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       31 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 152 221
(note 239 238 240 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 240 239 241 31 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 241 240 242 31 (set (reg/f:DI 0 ax [orig:150 _64 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [221]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 81 {*movdi_internal}
     (nil))
(insn 242 241 243 31 (parallel [
            (set (reg/f:DI 0 ax [orig:151 _65 ] [151])
                (plus:DI (reg/f:DI 0 ax [orig:150 _64 ] [150])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2140 218 {*adddi_1}
     (nil))
(insn 243 242 244 31 (set (reg:QI 0 ax [orig:152 _66 ] [152])
        (mem:QI (reg/f:DI 0 ax [orig:151 _65 ] [151]) [0 *_65+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2140 84 {*movqi_internal}
     (nil))
(insn 244 243 245 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:152 _66 ] [152])
            (const_int 84 [0x54]))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 5 {*cmpqi_1}
     (nil))
(jump_insn 245 244 246 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       32 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 222
(note 246 245 247 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 32 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 248 247 249 32 (set (reg/f:DI 0 ax [orig:153 _67 ] [153])
        (mem/f:DI (reg/f:DI 0 ax [222]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 249 248 250 32 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (plus:DI (reg/f:DI 0 ax [orig:153 _67 ] [153])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2141 218 {*adddi_1}
     (nil))
(insn 250 249 251 32 (set (reg:QI 0 ax [orig:155 _69 ] [155])
        (mem:QI (reg/f:DI 0 ax [orig:154 _68 ] [154]) [0 *_68+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 84 {*movqi_internal}
     (nil))
(insn 251 250 252 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:155 _69 ] [155])
            (const_int 89 [0x59]))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 5 {*cmpqi_1}
     (nil))
(jump_insn 252 251 253 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       33 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156 157 158 223
(note 253 252 254 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 33 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 255 254 256 33 (set (reg/f:DI 0 ax [orig:156 _70 ] [156])
        (mem/f:DI (reg/f:DI 0 ax [223]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 256 255 257 33 (parallel [
            (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (plus:DI (reg/f:DI 0 ax [orig:156 _70 ] [156])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2141 218 {*adddi_1}
     (nil))
(insn 257 256 258 33 (set (reg:QI 0 ax [orig:158 _72 ] [158])
        (mem:QI (reg/f:DI 0 ax [orig:157 _71 ] [157]) [0 *_71+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 84 {*movqi_internal}
     (nil))
(insn 258 257 259 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:158 _72 ] [158])
            (const_int 80 [0x50]))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 5 {*cmpqi_1}
     (nil))
(jump_insn 259 258 260 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       34 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 160 161 224
(note 260 259 261 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 34 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 262 261 263 34 (set (reg/f:DI 0 ax [orig:159 _73 ] [159])
        (mem/f:DI (reg/f:DI 0 ax [224]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 81 {*movdi_internal}
     (nil))
(insn 263 262 264 34 (parallel [
            (set (reg/f:DI 0 ax [orig:160 _74 ] [160])
                (plus:DI (reg/f:DI 0 ax [orig:159 _73 ] [159])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2141 218 {*adddi_1}
     (nil))
(insn 264 263 265 34 (set (reg:QI 0 ax [orig:161 _75 ] [161])
        (mem:QI (reg/f:DI 0 ax [orig:160 _74 ] [160]) [0 *_74+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 84 {*movqi_internal}
     (nil))
(insn 265 264 266 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:161 _75 ] [161])
            (const_int 69 [0x45]))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 5 {*cmpqi_1}
     (nil))
(jump_insn 266 265 267 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       35 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 162 163 164 165 166 225
(note 267 266 268 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 35 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2142 81 {*movdi_internal}
     (nil))
(insn 269 268 270 35 (set (reg/f:DI 0 ax [orig:162 _76 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [225]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2142 81 {*movdi_internal}
     (nil))
(insn 270 269 271 35 (parallel [
            (set (reg/f:DI 0 ax [orig:163 _77 ] [163])
                (plus:DI (reg/f:DI 0 ax [orig:162 _76 ] [162])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2142 218 {*adddi_1}
     (nil))
(insn 271 270 272 35 (set (reg:QI 0 ax [orig:164 _78 ] [164])
        (mem:QI (reg/f:DI 0 ax [orig:163 _77 ] [163]) [0 *_77+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2142 84 {*movqi_internal}
     (nil))
(insn 272 271 273 35 (set (reg:SI 0 ax [orig:165 _79 ] [165])
        (sign_extend:SI (reg:QI 0 ax [orig:164 _78 ] [164]))) "libs/src/../include/rapidxml/rapidxml.hpp":2142 151 {extendqisi2}
     (nil))
(insn 273 272 274 35 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:165 _79 ] [165])) "libs/src/../include/rapidxml/rapidxml.hpp":2142 82 {*movsi_internal}
     (nil))
(call_insn 274 273 276 35 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE15whitespace_pred4testEc") [flags 0x3]  <function_decl 0x7f44190c8900 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2142 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 276 274 277 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:166 _80 ] [166])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 277 276 278 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2141 617 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 182
(note 278 277 279 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 382 36 (set (reg:QI 0 ax [orig:182 iftmp.39_96 ] [182])
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 84 {*movqi_internal}
     (nil))
(jump_insn 382 279 383 36 (set (pc)
        (label_ref 285)) "libs/src/../include/rapidxml/rapidxml.hpp":2141 649 {jump}
     (nil)
 -> 285)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 182

(barrier 383 382 282)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       29
;;              30
;;              31
;;              32
;;              33
;;              34
;;              35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 182
(code_label 282 383 283 37 178 (nil) [7 uses])
(note 283 282 284 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 37 (set (reg:QI 0 ax [orig:182 iftmp.39_96 ] [182])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2141 84 {*movqi_internal}
     (nil))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 182

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;;              36 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 182
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 182
;; lr  def 	 17 [flags]
(code_label 285 284 286 38 179 (nil) [1 uses])
(note 286 285 287 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:182 iftmp.39_96 ] [182])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 288 287 289 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 303)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2140 617 {*jcc_1}
     (nil)
 -> 303)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 47, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 167 168 180 226 227 228 229
(note 289 288 290 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 39 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2145 81 {*movdi_internal}
     (nil))
(insn 291 290 292 39 (set (reg/f:DI 0 ax [orig:167 _81 ] [167])
        (mem/f:DI (reg/f:DI 0 ax [226]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2145 81 {*movdi_internal}
     (nil))
(insn 292 291 293 39 (parallel [
            (set (reg/f:DI 1 dx [orig:168 _82 ] [168])
                (plus:DI (reg/f:DI 0 ax [orig:167 _81 ] [167])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2145 218 {*adddi_1}
     (nil))
(insn 293 292 294 39 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2145 81 {*movdi_internal}
     (nil))
(insn 294 293 295 39 (set (mem/f:DI (reg/f:DI 0 ax [227]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:168 _82 ] [168])) "libs/src/../include/rapidxml/rapidxml.hpp":2145 81 {*movdi_internal}
     (nil))
(insn 295 294 296 39 (set (reg:DI 1 dx [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2146 81 {*movdi_internal}
     (nil))
(insn 296 295 297 39 (set (reg:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2146 81 {*movdi_internal}
     (nil))
(insn 297 296 298 39 (set (reg:DI 4 si)
        (reg:DI 1 dx [228])) "libs/src/../include/rapidxml/rapidxml.hpp":2146 81 {*movdi_internal}
     (nil))
(insn 298 297 299 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [229])) "libs/src/../include/rapidxml/rapidxml.hpp":2146 81 {*movdi_internal}
     (nil))
(call_insn 299 298 384 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE13parse_doctypeILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f44190c8700 parse_doctype>) [0 parse_doctype S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2146 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 384 299 385 39 (set (pc)
        (label_ref 356)) "libs/src/../include/rapidxml/rapidxml.hpp":2146 649 {jump}
     (nil)
 -> 356)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

(barrier 385 384 389)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 48, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 389 385 388 47 183 (nil) [1 uses])
(note 388 389 390 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 390 388 391 47 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":2125 684 {nop}
     (nil))
(jump_insn 391 390 392 47 (set (pc)
        (label_ref 303)) 649 {jump}
     (nil)
 -> 303)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 392 391 394)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 40, flags: (RTL, MODIFIED)
;;  pred:       22
;;              26
;;              27
;;              25
;;              24
;;              23
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 394 392 393 48 184 (nil) [6 uses])
(note 393 394 395 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 395 393 303 48 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":2136 684 {nop}
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 41, flags: (RTL, MODIFIED)
;;  pred:       19
;;              47 [100.0%] 
;;              48 [100.0%]  (FALLTHRU)
;;              38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 170 230 231
(code_label 303 395 304 40 172 (nil) [3 uses])
(note 304 303 305 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 40 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2152 81 {*movdi_internal}
     (nil))
(insn 306 305 307 40 (set (reg/f:DI 0 ax [orig:169 _83 ] [169])
        (mem/f:DI (reg/f:DI 0 ax [230]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2152 81 {*movdi_internal}
     (nil))
(insn 307 306 308 40 (parallel [
            (set (reg/f:DI 1 dx [orig:170 _84 ] [170])
                (plus:DI (reg/f:DI 0 ax [orig:169 _83 ] [169])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2152 218 {*adddi_1}
     (nil))
(insn 308 307 309 40 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2152 81 {*movdi_internal}
     (nil))
(insn 309 308 345 40 (set (mem/f:DI (reg/f:DI 0 ax [231]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:170 _84 ] [170])) "libs/src/../include/rapidxml/rapidxml.hpp":2152 81 {*movdi_internal}
     (nil))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;;              44 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 171 172 232
(code_label 345 309 310 41 182 (nil) [1 uses])
(note 310 345 311 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 311 310 312 41 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2153 81 {*movdi_internal}
     (nil))
(insn 312 311 313 41 (set (reg/f:DI 0 ax [orig:171 _85 ] [171])
        (mem/f:DI (reg/f:DI 0 ax [232]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2153 81 {*movdi_internal}
     (nil))
(insn 313 312 314 41 (set (reg:QI 0 ax [orig:172 _86 ] [172])
        (mem:QI (reg/f:DI 0 ax [orig:171 _85 ] [171]) [0 *_85+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2153 84 {*movqi_internal}
     (nil))
(insn 314 313 315 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:172 _86 ] [172])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":2153 5 {*cmpqi_1}
     (nil))
(jump_insn 315 314 316 41 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 348)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2153 617 {*jcc_1}
     (nil)
 -> 348)
;;  succ:       45
;;              42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 174 233
(note 316 315 317 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 42 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2155 81 {*movdi_internal}
     (nil))
(insn 318 317 319 42 (set (reg/f:DI 0 ax [orig:173 _87 ] [173])
        (mem/f:DI (reg/f:DI 0 ax [233]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2155 81 {*movdi_internal}
     (nil))
(insn 319 318 320 42 (set (reg:QI 0 ax [orig:174 _88 ] [174])
        (mem:QI (reg/f:DI 0 ax [orig:173 _87 ] [173]) [0 *_87+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2155 84 {*movqi_internal}
     (nil))
(insn 320 319 321 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:174 _88 ] [174])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2155 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 321 320 322 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 338)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2155 617 {*jcc_1}
     (nil)
 -> 338)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 183 234 235
(note 322 321 323 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 43 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(call_insn 324 323 326 43 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2156 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 326 324 327 43 (set (reg/f:DI 3 bx [orig:183 _138 ] [183])
        (reg/f:DI 0 ax [234])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 327 326 328 43 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 328 327 329 43 (set (reg/f:DI 0 ax [orig:175 _89 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [235]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 329 328 330 43 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:175 _89 ] [175])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 330 329 331 43 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 331 330 332 43 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:183 _138 ] [183])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(call_insn 332 331 333 43 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 333 332 334 43 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 334 333 335 43 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(insn 335 334 336 43 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:183 _138 ] [183])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 81 {*movdi_internal}
     (nil))
(call_insn 336 335 337 43 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2156 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 337 336 338)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 176 177 236 237
(code_label 338 337 339 44 181 (nil) [1 uses])
(note 339 338 340 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 44 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2157 81 {*movdi_internal}
     (nil))
(insn 341 340 342 44 (set (reg/f:DI 0 ax [orig:176 _90 ] [176])
        (mem/f:DI (reg/f:DI 0 ax [236]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2157 81 {*movdi_internal}
     (nil))
(insn 342 341 343 44 (parallel [
            (set (reg/f:DI 1 dx [orig:177 _91 ] [177])
                (plus:DI (reg/f:DI 0 ax [orig:176 _90 ] [176])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2157 218 {*adddi_1}
     (nil))
(insn 343 342 344 44 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2157 81 {*movdi_internal}
     (nil))
(insn 344 343 386 44 (set (mem/f:DI (reg/f:DI 0 ax [237]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:177 _91 ] [177])) "libs/src/../include/rapidxml/rapidxml.hpp":2157 81 {*movdi_internal}
     (nil))
(jump_insn 386 344 387 44 (set (pc)
        (label_ref 345)) "libs/src/../include/rapidxml/rapidxml.hpp":2153 649 {jump}
     (nil)
 -> 345)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 387 386 348)
;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       41
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 238 239
(code_label 348 387 349 45 180 (nil) [1 uses])
(note 349 348 350 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 351 45 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2159 81 {*movdi_internal}
     (nil))
(insn 351 350 352 45 (set (reg/f:DI 0 ax [orig:178 _92 ] [178])
        (mem/f:DI (reg/f:DI 0 ax [238]) [3 *text_105(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2159 81 {*movdi_internal}
     (nil))
(insn 352 351 353 45 (parallel [
            (set (reg/f:DI 1 dx [orig:179 _93 ] [179])
                (plus:DI (reg/f:DI 0 ax [orig:178 _92 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2159 218 {*adddi_1}
     (nil))
(insn 353 352 354 45 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2159 81 {*movdi_internal}
     (nil))
(insn 354 353 355 45 (set (mem/f:DI (reg/f:DI 0 ax [239]) [3 *text_105(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:179 _93 ] [179])) "libs/src/../include/rapidxml/rapidxml.hpp":2159 81 {*movdi_internal}
     (nil))
(insn 355 354 356 45 (set (reg/f:DI 0 ax [orig:180 _94 ] [180])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2160 81 {*movdi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 1, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              4 [100.0%] 
;;              15 [100.0%] 
;;              16 [100.0%] 
;;              21 [100.0%] 
;;              28 [100.0%] 
;;              39 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 180
;; lr  def 	 0 [ax] 184
(code_label 356 355 357 46 165 (nil) [6 uses])
(note 357 356 362 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 362 357 363 46 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:184 <retval> ] [184])) "libs/src/../include/rapidxml/rapidxml.hpp":2163 81 {*movdi_internal}
     (nil))
(insn 363 362 396 46 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2163 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 396 363 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_node<Ch>::append_node(rapidxml::xml_node<Ch>*) [with Ch = char] (_ZN8rapidxml8xml_nodeIcE11append_nodeEPS1_, funcdef_no=3214, decl_uid=60244, cgraph_uid=1088, symbol_order=1109)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 74:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = 0
   Insn 31: point = 0, n_alt = 4
   Insn 30: point = 0, n_alt = 4
   Insn 29: point = 0, n_alt = 0
   Insn 28: point = 0, n_alt = 4
  BB 9
   Insn 77: point = 0, n_alt = -1
   Insn 74: point = 0, n_alt = 5
   Insn 73: point = 1, n_alt = 3
   Insn 72: point = 2, n_alt = 5
   Insn 71: point = 3, n_alt = 3
   Insn 70: point = 4, n_alt = 3
   Insn 69: point = 5, n_alt = 5
   Insn 68: point = 6, n_alt = 3
   Insn 67: point = 7, n_alt = 3
  BB 7
   Insn 79: point = 8, n_alt = -1
   Insn 55: point = 8, n_alt = 5
   Insn 54: point = 9, n_alt = 3
   Insn 53: point = 10, n_alt = 3
   Insn 52: point = 12, n_alt = 3
   Insn 51: point = 13, n_alt = 5
   Insn 50: point = 14, n_alt = 3
   Insn 49: point = 15, n_alt = 3
   Insn 48: point = 17, n_alt = 3
  BB 8
   Insn 64: point = 18, n_alt = 5
   Insn 63: point = 19, n_alt = 3
   Insn 62: point = 20, n_alt = 3
   Insn 61: point = 21, n_alt = 5
   Insn 60: point = 22, n_alt = 3
  BB 6
   Insn 46: point = 23, n_alt = -1
   Insn 45: point = 23, n_alt = 0
   Insn 44: point = 24, n_alt = 0
   Insn 43: point = 25, n_alt = 0
   Insn 42: point = 26, n_alt = -2
   Insn 41: point = 27, n_alt = 0
   Insn 40: point = 27, n_alt = -2
   Insn 39: point = 28, n_alt = 2
   Insn 38: point = 28, n_alt = 2
   Insn 37: point = 28, n_alt = 0
   Insn 36: point = 28, n_alt = 3
  BB 4
   Insn 22: point = 29, n_alt = -1
   Insn 21: point = 29, n_alt = 0
   Insn 20: point = 30, n_alt = -2
   Insn 19: point = 31, n_alt = 0
   Insn 18: point = 31, n_alt = -2
   Insn 17: point = 32, n_alt = 3
  BB 3
   Insn 15: point = 33, n_alt = -1
   Insn 14: point = 33, n_alt = 0
   Insn 13: point = 34, n_alt = -2
   Insn 12: point = 35, n_alt = 0
   Insn 11: point = 35, n_alt = -2
   Insn 10: point = 36, n_alt = 3
  BB 2
   Insn 8: point = 37, n_alt = -1
   Insn 7: point = 37, n_alt = 1
   Insn 3: point = 37, n_alt = 5
   Insn 2: point = 37, n_alt = 5
 r87: [35..36]
 r88: [33..34]
 r89: [29..30]
 r90: [25..26]
 r91: [13..15]
 r92: [8..10]
 r93: [23..24]
 r94: [31..32]
 r95: [27..28]
 r96: [16..17]
 r97: [13..14]
 r98: [11..12]
 r99: [8..9]
 r100: [21..22]
 r101: [18..20]
 r102: [18..19]
 r103: [5..7]
 r104: [5..6]
 r105: [2..4]
 r106: [2..3]
 r107: [0..1]
Compressing live ranges: from 37 to 32 - 86%
Ranges after the compression:
 r87: [30..31]
 r88: [28..29]
 r89: [24..25]
 r90: [20..21]
 r91: [10..11]
 r92: [6..7]
 r93: [18..19]
 r94: [26..27]
 r95: [22..23]
 r96: [12..13]
 r97: [10..11]
 r98: [8..9]
 r99: [6..7]
 r100: [16..17]
 r101: [14..15]
 r102: [14..15]
 r103: [4..5]
 r104: [4..5]
 r105: [2..3]
 r106: [2..3]
 r107: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 42
changing reg in insn 43
changing reg in insn 49
changing reg in insn 51
changing reg in insn 53
changing reg in insn 55
changing reg in insn 44
changing reg in insn 45
changing reg in insn 17
changing reg in insn 18
changing reg in insn 36
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 69
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
deleting insn with uid = 13.
deleting insn with uid = 20.
deleting insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_node<Ch>::append_node(rapidxml::xml_node<Ch>*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={18d,16u} r1={12d,7u} r2={7d,2u} r4={7d,3u} r5={9d,5u} r6={1d,27u} r7={1d,13u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={9d,5u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 418{339d,79u,0e} in 52{48 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1097 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])
        (reg:DI 4 si [ child ])) "libs/src/../include/rapidxml/rapidxml.hpp":1097 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(call_insn 12 11 14 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE6parentEv") [flags 0x3]  <function_decl 0x7f4419852000 parent>) [0 parent S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 12 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 _2 ] [88])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 94
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(call_insn 19 18 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE4typeEv") [flags 0x3]  <function_decl 0x7f4419852500 type>) [0 type S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 19 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 22 21 26 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1099 617 {*jcc_1}
     (nil)
 -> 78)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 26 22 27 5 186 (nil) [2 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZN8rapidxml8xml_nodeIcE11append_nodeEPS1_E19__PRETTY_FUNCTION__") [flags 0x2]  <var_decl 0x7f44190d9120 __PRETTY_FUNCTION__>)) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 dx)
        (const_int 1099 [0x44b])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 82 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44188d42d0 *.LC10>)) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f4418962c60 *.LC14>)) "libs/src/../include/rapidxml/rapidxml.hpp":1099 81 {*movdi_internal}
     (nil))
(call_insn 32 31 33 5 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f441a7d0b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1099 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 33 32 78)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 93 95
(code_label 78 33 35 6 190 (nil) [1 uses])
(note 35 78 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1100 81 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":1100 82 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1100 81 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1100 81 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1100 81 {*movdi_internal}
     (nil))
(call_insn 41 40 43 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE10first_nodeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852700 first_node>) [0 first_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1100 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 43 41 44 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:90 _4 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1100 4 {*cmpdi_ccno_1}
     (nil))
(insn 44 43 45 6 (set (reg:QI 0 ax [orig:93 retval.138_16 ] [93])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1100 613 {*setcc_qi}
     (nil))
(insn 45 44 46 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 retval.138_16 ] [93])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1100 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 46 45 47 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1100 617 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92 96 97 98 99
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1102 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 56 [0x38])) [51 this_13(D)->m_last_node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1102 81 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1102 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 80 [0x50])) [51 child_9(D)->m_prev_sibling+0 S8 A64])
        (reg/f:DI 1 dx [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1102 81 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1103 81 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 56 [0x38])) [51 this_13(D)->m_last_node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1103 81 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg/f:DI 1 dx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1103 81 {*movdi_internal}
     (nil))
(insn 55 54 79 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (const_int 88 [0x58])) [51 _6->m_next_sibling+0 S8 A64])
        (reg/f:DI 1 dx [99])) "libs/src/../include/rapidxml/rapidxml.hpp":1103 81 {*movdi_internal}
     (nil))
(jump_insn 79 55 80 7 (set (pc)
        (label_ref 65)) 649 {jump}
     (nil)
 -> 65)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 58)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 100 101 102
(code_label 58 80 59 8 188 (nil) [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1107 81 {*movdi_internal}
     (nil))
(insn 61 60 62 8 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 80 [0x50])) [51 child_9(D)->m_prev_sibling+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1107 81 {*movdi_internal}
     (nil))
(insn 62 61 63 8 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1108 81 {*movdi_internal}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 1 dx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1108 81 {*movdi_internal}
     (nil))
(insn 64 63 65 8 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 48 [0x30])) [51 this_13(D)->m_first_node+0 S8 A64])
        (reg/f:DI 1 dx [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1108 81 {*movdi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 103 104 105 106 107
(code_label 65 64 66 9 189 (nil) [1 uses])
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 9 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1110 81 {*movdi_internal}
     (nil))
(insn 68 67 69 9 (set (reg/f:DI 1 dx [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1110 81 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 56 [0x38])) [51 this_13(D)->m_last_node+0 S8 A64])
        (reg/f:DI 1 dx [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1110 81 {*movdi_internal}
     (nil))
(insn 70 69 71 9 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1111 81 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (reg/f:DI 1 dx [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1111 81 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 32 [0x20])) [51 child_9(D)->D.60310.m_parent+0 S8 A64])
        (reg/f:DI 1 dx [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1111 81 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1112 81 {*movdi_internal}
     (nil))
(insn 74 73 77 9 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 88 [0x58])) [51 child_9(D)->m_next_sibling+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1112 81 {*movdi_internal}
     (nil))
(insn 77 74 81 9 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1113 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 81 77 0 NOTE_INSN_DELETED)

;; Function std::size_t rapidxml::internal::measure(const Ch*) [with Ch = char] (_ZN8rapidxml8internal7measureIcEEmPKT_, funcdef_no=3215, decl_uid=63832, cgraph_uid=1089, symbol_order=1110)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 14:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=96 from oldreg=88, assigning class GENERAL_REGS to r96
   22: {r96:DI=r96:DI-r89:DI;clobber flags:CC;}
      REG_DEAD r89:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   36: r96:DI=r88:DI
    Inserting insn reload after:
   37: r90:DI=r96:DI

	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = -2
   Insn 26: point = 1, n_alt = -2
   Insn 23: point = 3, n_alt = -2
   Insn 37: point = 5, n_alt = -2
	Hard reg 0 is preferable by r96 with profit 1
   Insn 22: point = 7, n_alt = 0
   Insn 36: point = 8, n_alt = -2
	Hard reg 0 is preferable by r96 with profit 1
	Hard reg 1 is preferable by r96 with profit 1
   Insn 21: point = 10, n_alt = 3
   Insn 20: point = 11, n_alt = 3
  BB 3
   Insn 12: point = 12, n_alt = -1
   Insn 11: point = 12, n_alt = 0
   Insn 10: point = 13, n_alt = 2
   Insn 9: point = 15, n_alt = 3
  BB 4
   Insn 33: point = 16, n_alt = -1
   Insn 14: point = 16, n_alt = 1
  BB 2
   Insn 7: point = 16, n_alt = 5
   Insn 6: point = 17, n_alt = 3
   Insn 2: point = 18, n_alt = 5
 r87: [12..13]
 r88: [9..11]
 r89: [7..10]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [16..17]
 r94: [14..15]
 r96: [6..8]
Compressing live ranges: from 18 to 16 - 88%
Ranges after the compression:
 r87: [10..11]
 r88: [8..9]
 r89: [6..9]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [14..15]
 r94: [12..13]
 r96: [6..7]

********** Assignment #1: **********

	 Assigning to 96 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=96, tfreq=3)...
	   Assign 1 to reload r96 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 26
changing reg in insn 26
changing reg in insn 30
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 36.
deleting insn with uid = 23.
deleting insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns


std::size_t rapidxml::internal::measure(const Ch*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,7u} r1={3d,2u} r2={1d} r4={1d} r5={1d,1u} r6={1d,13u} r7={1d,5u} r17={3d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 59{29d,30u,0e} in 15{15 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])
        (reg:DI 5 di [ p ])) "libs/src/../include/rapidxml/rapidxml.hpp":310 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":312 81 {*movdi_internal}
     (nil))
(insn 7 6 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [93])) "libs/src/../include/rapidxml/rapidxml.hpp":312 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 94
(code_label 15 7 8 3 193 (nil) [1 uses])
(note 8 15 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":313 81 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [94]) [0 *tmp_5+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":313 84 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":313 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":313 617 {*jcc_1}
     (nil)
 -> 18)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":314 218 {*adddi_1}
     (nil))
(jump_insn 33 14 34 4 (set (pc)
        (label_ref 15)) "libs/src/../include/rapidxml/rapidxml.hpp":313 649 {jump}
     (nil)
 -> 15)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 18)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 88 89 90 91 92
(code_label 18 34 19 5 192 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:DI 1 dx [orig:88 tmp.43_2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":315 81 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:DI 0 ax [orig:89 p.44_3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":315 81 {*movdi_internal}
     (nil))
(insn 22 21 37 5 (parallel [
            (set (reg:DI 1 dx [orig:88 tmp.43_2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 tmp.43_2 ] [88])
                    (reg:DI 0 ax [orig:89 p.44_3 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":315 274 {*subdi_1}
     (nil))
(insn 37 22 30 5 (set (reg:DI 0 ax [orig:90 _4 ] [90])
        (reg:DI 1 dx [orig:88 tmp.43_2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":315 81 {*movdi_internal}
     (nil))
(insn 30 37 31 5 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:92 <retval> ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":316 81 {*movdi_internal}
     (nil))
(insn 31 30 35 5 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":316 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 31 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_node<Ch>::next_sibling(const Ch*, std::size_t, bool) const [with Ch = char] (_ZNK8rapidxml8xml_nodeIcE12next_siblingEPKcmb, funcdef_no=3216, decl_uid=60222, cgraph_uid=1090, symbol_order=1111)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 3
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = 4
   Insn 18: point = 0, n_alt = 4
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = 4
  BB 14
   Insn 92: point = 0, n_alt = -1
   Insn 91: point = 0, n_alt = -2
   Insn 87: point = 1, n_alt = -2
  BB 12
   Insn 98: point = 4, n_alt = -1
   Insn 78: point = 4, n_alt = 2
  BB 10
   Insn 94: point = 5, n_alt = -1
   Insn 65: point = 5, n_alt = 3
  BB 9
   Insn 63: point = 6, n_alt = -1
   Insn 62: point = 6, n_alt = 0
   Insn 61: point = 7, n_alt = -2
   Insn 60: point = 8, n_alt = 0
   Insn 59: point = 8, n_alt = -2
   Insn 58: point = 9, n_alt = -2
   Insn 57: point = 10, n_alt = -2
   Insn 56: point = 11, n_alt = -2
   Insn 55: point = 12, n_alt = -2
   Insn 54: point = 13, n_alt = 3
   Insn 53: point = 14, n_alt = 3
   Insn 52: point = 15, n_alt = -2
   Insn 51: point = 16, n_alt = 0
   Insn 50: point = 16, n_alt = -2
   Insn 49: point = 17, n_alt = 3
   Insn 48: point = 18, n_alt = -2
   Insn 47: point = 19, n_alt = 0
   Insn 46: point = 19, n_alt = -2
   Insn 45: point = 20, n_alt = 3
   Insn 44: point = 21, n_alt = 0
  BB 8
   Insn 42: point = 22, n_alt = -1
   Insn 41: point = 22, n_alt = 1
  BB 11
   Insn 96: point = 22, n_alt = -1
   Insn 72: point = 22, n_alt = 5
   Insn 71: point = 23, n_alt = 3
   Insn 70: point = 25, n_alt = 3
  BB 7
   Insn 39: point = 26, n_alt = 5
   Insn 38: point = 27, n_alt = 3
   Insn 37: point = 29, n_alt = 3
  BB 6
   Insn 34: point = 30, n_alt = 5
   Insn 33: point = 31, n_alt = -2
   Insn 32: point = 32, n_alt = 0
   Insn 31: point = 32, n_alt = -2
   Insn 30: point = 33, n_alt = 3
  BB 5
   Insn 28: point = 34, n_alt = -1
   Insn 27: point = 34, n_alt = 1
  BB 13
   Insn 84: point = 34, n_alt = 3
   Insn 83: point = 36, n_alt = 3
  BB 4
   Insn 25: point = 37, n_alt = -1
   Insn 24: point = 37, n_alt = 1
  BB 2
   Insn 14: point = 37, n_alt = -1
   Insn 13: point = 37, n_alt = 0
   Insn 12: point = 38, n_alt = 3
   Insn 11: point = 40, n_alt = 3
   Insn 7: point = 41, n_alt = 6
   Insn 6: point = 42, n_alt = 0
   Insn 5: point = 44, n_alt = -2
   Insn 4: point = 45, n_alt = 5
   Insn 3: point = 45, n_alt = 5
   Insn 2: point = 45, n_alt = 5
 r87: [37..38]
 r88: [12..21]
 r89: [19..20]
 r90: [9..18]
 r91: [16..17]
 r92: [8..15]
 r93: [34..34] [2..5]
 r94: [6..7]
 r95: [0..1]
 r96: [43..44]
 r97: [41..42]
 r98: [39..40]
 r99: [32..33]
 r100: [30..31]
 r101: [28..29]
 r102: [26..27]
 r103: [11..14]
 r104: [10..13]
 r105: [24..25]
 r106: [22..23]
 r107: [35..36]
Compressing live ranges: from 45 to 35 - 77%
Ranges after the compression:
 r87: [27..28]
 r88: [6..11]
 r89: [10..11]
 r90: [6..9]
 r91: [8..9]
 r92: [6..7]
 r93: [24..24] [2..3]
 r94: [4..5]
 r95: [0..1]
 r96: [33..34]
 r97: [31..32]
 r98: [29..30]
 r99: [22..23]
 r100: [20..21]
 r101: [18..19]
 r102: [16..17]
 r103: [6..7]
 r104: [6..7]
 r105: [14..15]
 r106: [12..13]
 r107: [25..26]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 44
changing reg in insn 55
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 58
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 59
changing reg in insn 84
changing reg in insn 78
changing reg in insn 65
changing reg in insn 87
changing reg in insn 61
changing reg in insn 62
changing reg in insn 87
changing reg in insn 91
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 57
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 83
changing reg in insn 84
deleting insn with uid = 33.
deleting insn with uid = 59.
deleting insn with uid = 61.
deleting insn with uid = 87.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 60.


rapidxml::xml_node<Ch>* rapidxml::xml_node<Ch>::next_sibling(const Ch*, std::size_t, bool) const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 41 [r12]
;;  ref usage 	r0={23d,20u} r1={9d,4u} r2={8d,3u} r3={1d,1u} r4={8d,3u} r5={11d,6u} r6={1d,35u} r7={1d,19u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={10d,5u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,1u} r38={6d} r39={5d} r40={5d} r41={1d,1u} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 514{415d,99u,0e} in 58{53 regular + 5 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 96 97 98
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 1 dx [ name_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (reg:SI 0 ax [96])
        (reg:SI 2 cx [ case_sensitive ])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 82 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:QI 0 ax [97])
        (reg:QI 0 ax [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 84 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32])
        (reg:QI 0 ax [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1004 84 {*movqi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1006 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 32 [0x20])) [51 this_14(D)->D.60310.m_parent+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1006 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1006 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1006 617 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZNK8rapidxml8xml_nodeIcE12next_siblingEPKcmbE19__PRETTY_FUNCTION__") [flags 0x2]  <var_decl 0x7f44190d9480 __PRETTY_FUNCTION__>)) "libs/src/../include/rapidxml/rapidxml.hpp":1006 81 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx)
        (const_int 1006 [0x3ee])) "libs/src/../include/rapidxml/rapidxml.hpp":1006 82 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44188d42d0 *.LC10>)) "libs/src/../include/rapidxml/rapidxml.hpp":1006 81 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f4418969990 *.LC15>)) "libs/src/../include/rapidxml/rapidxml.hpp":1006 81 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f441a7d0b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1006 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 21 20 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 22 21 23 4 196 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1007 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1007 617 {*jcc_1}
     (nil)
 -> 81)
;;  succ:       5 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1009 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 28 27 29 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1009 617 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1010 81 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "libs/src/../include/rapidxml/rapidxml.hpp":1010 81 {*movdi_internal}
     (nil))
(call_insn 32 31 34 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7measureIcEEmPKT_") [flags 0x3]  <function_decl 0x7f4419333f00 measure>) [0 measure S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1010 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 32 35 6 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])
        (reg:DI 0 ax [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1010 81 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 101 102
(code_label 35 34 36 7 198 (nil) [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (reg/f:DI 0 ax [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 88 [0x58])) [51 this_14(D)->m_next_sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
(insn 39 38 73 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])
        (reg/f:DI 0 ax [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              11 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 73 39 40 8 202 (nil) [1 uses])
(note 40 73 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1011 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1011 617 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       12
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 94 103 104
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:SI 3 bx [orig:88 _2 ] [88])
        (zero_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [68 case_sensitive+0 S1 A32]))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 136 {*zero_extendqisi2}
     (nil))
(insn 45 44 46 9 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 46 45 47 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE9name_sizeEv") [flags 0x3]  <function_decl 0x7f441984ab00 name_size>) [0 name_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 48 47 49 9 (set (reg:DI 41 r12 [orig:90 _4 ] [90])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(call_insn 51 50 52 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE4nameEv") [flags 0x3]  <function_decl 0x7f441984aa00 name>) [0 name S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 52 51 53 9 (set (reg/f:DI 5 di [orig:92 _6 ] [92])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 53 52 54 9 (set (reg:DI 1 dx [103])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [8 name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 54 53 55 9 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 55 54 56 9 (set (reg:SI 37 r8)
        (reg:SI 3 bx [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 82 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:DI 2 cx)
        (reg:DI 1 dx [103])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 57 56 58 9 (set (reg:DI 1 dx)
        (reg:DI 0 ax [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(insn 58 57 60 9 (set (reg:DI 4 si)
        (reg:DI 41 r12 [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1012 81 {*movdi_internal}
     (nil))
(call_insn 60 58 62 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7compareIcEEbPKT_mS4_mb") [flags 0x3]  <function_decl 0x7f441933d000 compare>) [0 compare S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (nil)))))))
(insn 62 60 63 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 retval.140_27 ] [94])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1012 617 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 94 10 (set (reg/f:DI 0 ax [orig:93 _9 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1013 81 {*movdi_internal}
     (nil))
(jump_insn 94 65 95 10 (set (pc)
        (label_ref 85)) "libs/src/../include/rapidxml/rapidxml.hpp":1013 649 {jump}
     (nil)
 -> 85)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

(barrier 95 94 68)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 105 106
(code_label 68 95 69 11 200 (nil) [1 uses])
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg/f:DI 0 ax [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 88 [0x58])) [51 sibling_8->m_next_sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
(insn 72 71 96 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 sibling+0 S8 A64])
        (reg/f:DI 0 ax [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1011 81 {*movdi_internal}
     (nil))
(jump_insn 96 72 97 11 (set (pc)
        (label_ref 73)) "libs/src/../include/rapidxml/rapidxml.hpp":1011 649 {jump}
     (nil)
 -> 73)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 76)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(code_label 76 97 77 12 199 (nil) [1 uses])
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 98 12 (set (reg/f:DI 0 ax [orig:93 _9 ] [93])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1014 81 {*movdi_internal}
     (nil))
(jump_insn 98 78 99 12 (set (pc)
        (label_ref 85)) "libs/src/../include/rapidxml/rapidxml.hpp":1014 649 {jump}
     (nil)
 -> 85)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

(barrier 99 98 81)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93 107
(code_label 81 99 82 13 197 (nil) [1 uses])
(note 82 81 83 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 13 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1017 81 {*movdi_internal}
     (nil))
(insn 84 83 85 13 (set (reg/f:DI 0 ax [orig:93 _9 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 88 [0x58])) [51 this_14(D)->m_next_sibling+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1017 81 {*movdi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              10 [100.0%] 
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 0 [ax] 95
(code_label 85 84 86 14 201 (nil) [2 uses])
(note 86 85 91 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 91 86 92 14 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:95 <retval> ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1018 81 {*movdi_internal}
     (nil))
(insn 92 91 100 14 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1018 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 100 92 0 NOTE_INSN_DELETED)

;; Function Ch* rapidxml::xml_base<Ch>::name() const [with Ch = char] (_ZNK8rapidxml8xml_baseIcE4nameEv, funcdef_no=3217, decl_uid=60160, cgraph_uid=1091, symbol_order=1112)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
  BB 3
   Insn 30: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 6, n_alt = 3
  BB 4
   Insn 18: point = 7, n_alt = -2
   Insn 17: point = 8, n_alt = 0
  BB 2
   Insn 9: point = 8, n_alt = -1
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 9, n_alt = 3
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [7..7] [2..4]
 r89: [0..1]
 r90: [10..11]
 r91: [5..6]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r87: [7..8]
 r88: [6..6] [2..3]
 r89: [0..1]
 r90: [9..10]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 18
changing reg in insn 12
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 18.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


Ch* rapidxml::xml_base<Ch>::name() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r6={1d,8u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 119{96d,23u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":673 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":675 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [90]) [3 this_5(D)->m_name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":675 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":675 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":675 617 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 91
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":675 81 {*movdi_internal}
     (nil))
(insn 12 11 30 3 (set (reg/f:DI 0 ax [orig:88 iftmp.131_2 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 this_5(D)->m_name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":675 81 {*movdi_internal}
     (nil))
(jump_insn 30 12 31 3 (set (pc)
        (label_ref 21)) "libs/src/../include/rapidxml/rapidxml.hpp":675 649 {jump}
     (nil)
 -> 21)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 31 30 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(code_label 15 31 16 4 204 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 21 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE7nullstrEv") [flags 0x3]  <function_decl 0x7f4419852100 nullstr>) [0 nullstr S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":675 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 21 17 22 5 206 (nil) [1 uses])
(note 22 21 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 22 28 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":676 81 {*movdi_internal}
     (nil))
(insn 28 27 32 5 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":676 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 32 28 0 NOTE_INSN_DELETED)

;; Function std::size_t rapidxml::xml_base<Ch>::name_size() const [with Ch = char] (_ZNK8rapidxml8xml_baseIcE9name_sizeEv, funcdef_no=3218, decl_uid=60162, cgraph_uid=1092, symbol_order=1113)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
  BB 3
   Insn 29: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 6, n_alt = 3
  BB 4
   Insn 17: point = 7, n_alt = 2
  BB 2
   Insn 9: point = 8, n_alt = -1
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 9, n_alt = 3
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [7..7] [2..4]
 r89: [0..1]
 r90: [10..11]
 r91: [5..6]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r87: [7..8]
 r88: [6..6] [2..3]
 r89: [0..1]
 r90: [9..10]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 17
changing reg in insn 12
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns


std::size_t rapidxml::xml_base<Ch>::name_size() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,8u} r7={1d,5u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 47{25d,22u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":681 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":683 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [90]) [3 this_4(D)->m_name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":683 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":683 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":683 617 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 91
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":683 81 {*movdi_internal}
     (nil))
(insn 12 11 29 3 (set (reg:DI 0 ax [orig:88 iftmp.132_2 ] [88])
        (mem:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 16 [0x10])) [8 this_4(D)->m_name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":683 81 {*movdi_internal}
     (nil))
(jump_insn 29 12 30 3 (set (pc)
        (label_ref 20)) "libs/src/../include/rapidxml/rapidxml.hpp":683 649 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 30 29 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88
(code_label 15 30 16 4 208 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 4 (set (reg:DI 0 ax [orig:88 iftmp.132_2 ] [88])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":683 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 20 17 21 5 210 (nil) [1 uses])
(note 21 20 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 21 27 5 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":684 81 {*movdi_internal}
     (nil))
(insn 27 26 31 5 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":684 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 27 0 NOTE_INSN_DELETED)

;; Function bool rapidxml::internal::compare(const Ch*, std::size_t, const Ch*, std::size_t, bool) [with Ch = char] (_ZN8rapidxml8internal7compareIcEEbPKT_mS4_mb, funcdef_no=3219, decl_uid=63835, cgraph_uid=1093, symbol_order=1114)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rm {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 49:  (0) rm  (1) 0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 50:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 95:  (0) rm  (1) 0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) rm  (1) 0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) q  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 110: point = 0, n_alt = -1
   Insn 109: point = 0, n_alt = -2
   Insn 105: point = 1, n_alt = -2
  BB 13
   Insn 118: point = 4, n_alt = -1
   Insn 90: point = 4, n_alt = 1
  BB 8
   Insn 114: point = 5, n_alt = -1
   Insn 44: point = 5, n_alt = 1
  BB 3
   Insn 112: point = 6, n_alt = -1
   Insn 16: point = 6, n_alt = 1
  BB 15
   Insn 102: point = 7, n_alt = 1
  BB 11
   Insn 71: point = 8, n_alt = -1
   Insn 70: point = 8, n_alt = 1
   Insn 69: point = 9, n_alt = 3
  BB 14
   Insn 120: point = 10, n_alt = -1
   Insn 96: point = 10, n_alt = 1
   Insn 95: point = 10, n_alt = 1
  BB 12
   Insn 88: point = 10, n_alt = -1
   Insn 87: point = 10, n_alt = 0
   Insn 86: point = 11, n_alt = 2
   Insn 85: point = 13, n_alt = 4
   Insn 84: point = 14, n_alt = 1
   Insn 83: point = 16, n_alt = 0
   Insn 82: point = 18, n_alt = -2
   Insn 81: point = 20, n_alt = 2
   Insn 80: point = 22, n_alt = 3
   Insn 79: point = 23, n_alt = 2
   Insn 78: point = 25, n_alt = 4
   Insn 77: point = 26, n_alt = 1
   Insn 76: point = 28, n_alt = 0
   Insn 75: point = 30, n_alt = -2
   Insn 74: point = 32, n_alt = 2
   Insn 73: point = 34, n_alt = 3
  BB 10
   Insn 67: point = 35, n_alt = 5
   Insn 66: point = 36, n_alt = 0
   Insn 65: point = 38, n_alt = 3
   Insn 64: point = 39, n_alt = 3
  BB 6
   Insn 35: point = 40, n_alt = -1
   Insn 34: point = 40, n_alt = 1
   Insn 33: point = 41, n_alt = 3
  BB 9
   Insn 116: point = 42, n_alt = -1
   Insn 50: point = 42, n_alt = 1
   Insn 49: point = 42, n_alt = 1
  BB 7
   Insn 42: point = 42, n_alt = -1
   Insn 41: point = 42, n_alt = 0
   Insn 40: point = 43, n_alt = 2
   Insn 39: point = 45, n_alt = 3
   Insn 38: point = 46, n_alt = 2
   Insn 37: point = 48, n_alt = 3
  BB 5
   Insn 31: point = 49, n_alt = 5
   Insn 30: point = 50, n_alt = 0
   Insn 29: point = 52, n_alt = 3
   Insn 28: point = 53, n_alt = 3
  BB 4
   Insn 22: point = 54, n_alt = -1
   Insn 21: point = 54, n_alt = 1
  BB 2
   Insn 14: point = 54, n_alt = -1
   Insn 13: point = 54, n_alt = 1
   Insn 12: point = 55, n_alt = 3
   Insn 8: point = 56, n_alt = 6
   Insn 7: point = 57, n_alt = 0
   Insn 6: point = 59, n_alt = -2
   Insn 5: point = 60, n_alt = 5
   Insn 4: point = 60, n_alt = 5
   Insn 3: point = 60, n_alt = 5
   Insn 2: point = 60, n_alt = 5
 r87: [42..46]
 r88: [42..43]
 r89: [31..32]
 r90: [29..30]
 r91: [27..28]
 r92: [10..23]
 r93: [19..20]
 r94: [17..18]
 r95: [15..16]
 r96: [10..11]
 r97: [2..7]
 r98: [0..1]
 r99: [58..59]
 r100: [56..57]
 r101: [54..55]
 r105: [49..50]
 r106: [51..53]
 r107: [51..52]
 r108: [40..41]
 r109: [47..48]
 r110: [44..45]
 r114: [35..36]
 r115: [37..39]
 r116: [37..38]
 r117: [8..9]
 r118: [33..34]
 r119: [24..26]
 r120: [24..25]
 r121: [21..22]
 r122: [12..14]
 r123: [12..13]
Compressing live ranges: from 60 to 50 - 83%
Ranges after the compression:
 r87: [34..37]
 r88: [34..35]
 r89: [24..25]
 r90: [22..23]
 r91: [20..21]
 r92: [6..17]
 r93: [14..15]
 r94: [12..13]
 r95: [10..11]
 r96: [6..7]
 r97: [2..3]
 r98: [0..1]
 r99: [48..49]
 r100: [46..47]
 r101: [44..45]
 r105: [40..41]
 r106: [42..43]
 r107: [42..43]
 r108: [32..33]
 r109: [38..39]
 r110: [36..37]
 r114: [28..29]
 r115: [30..31]
 r116: [30..31]
 r117: [4..5]
 r118: [26..27]
 r119: [18..19]
 r120: [18..19]
 r121: [16..17]
 r122: [8..9]
 r123: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 38
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 87
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 102
changing reg in insn 90
changing reg in insn 44
changing reg in insn 16
changing reg in insn 105
changing reg in insn 105
changing reg in insn 109
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 30
changing reg in insn 31
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 66
changing reg in insn 67
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
deleting insn with uid = 75.
deleting insn with uid = 82.
deleting insn with uid = 105.
starting the processing of deferred insns
ending the processing of deferred insns


bool rapidxml::internal::compare(const Ch*, std::size_t, const Ch*, std::size_t, bool) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 37 [r8]
;;  ref usage 	r0={27d,24u} r1={6d,6u} r2={2d,2u} r4={1d,1u} r5={1d,1u} r6={1d,46u} r7={1d,16u} r17={12d,6u} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} 
;;    total ref usage 170{62d,104u,4e} in 61{61 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 99 100 101
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
        (reg:DI 5 di [ p1 ])) "libs/src/../include/rapidxml/rapidxml.hpp":320 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64])
        (reg:DI 4 si [ size1 ])) "libs/src/../include/rapidxml/rapidxml.hpp":320 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])
        (reg:DI 1 dx [ p2 ])) "libs/src/../include/rapidxml/rapidxml.hpp":320 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [8 size2+0 S8 A64])
        (reg:DI 2 cx [ size2 ])) "libs/src/../include/rapidxml/rapidxml.hpp":320 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [99])
        (reg:SI 37 r8 [ case_sensitive ])) "libs/src/../include/rapidxml/rapidxml.hpp":320 82 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [100])
        (reg:QI 0 ax [99])) "libs/src/../include/rapidxml/rapidxml.hpp":320 84 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [68 case_sensitive+0 S1 A32])
        (reg:QI 0 ax [100])) "libs/src/../include/rapidxml/rapidxml.hpp":320 84 {*movqi_internal}
     (nil))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg:DI 0 ax [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":322 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [101])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [8 size2+0 S8 A64]))) "libs/src/../include/rapidxml/rapidxml.hpp":322 8 {*cmpdi_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":322 617 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 112 3 (set (reg:QI 0 ax [orig:97 _15 ] [97])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":323 84 {*movqi_internal}
     (nil))
(jump_insn 112 16 113 3 (set (pc)
        (label_ref 103)) "libs/src/../include/rapidxml/rapidxml.hpp":323 649 {jump}
     (nil)
 -> 103)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

(barrier 113 112 19)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 19 113 20 4 212 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [68 case_sensitive+0 S1 A32])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":324 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":324 617 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       5 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 107
(note 23 22 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 23 29 5 (set (reg/f:DI 1 dx [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":326 81 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 0 ax [107])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":326 81 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg:DI 0 ax [107])
                    (reg/f:DI 1 dx [106])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":326 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64]))
        (nil)))
(insn 31 30 51 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 end+0 S8 A64])
        (reg:DI 0 ax [105])) "libs/src/../include/rapidxml/rapidxml.hpp":326 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              9 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108
(code_label 51 31 32 6 217 (nil) [1 uses])
(note 32 51 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":326 81 {*movdi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 0 ax [108])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 end+0 S8 A64]))) "libs/src/../include/rapidxml/rapidxml.hpp":326 8 {*cmpdi_1}
     (nil))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":326 617 {*jcc_1}
     (nil)
 -> 100)
;;  succ:       15
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 109 110
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":327 81 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (reg:QI 1 dx [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [109]) [0 *p1_11+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":327 84 {*movqi_internal}
     (nil))
(insn 39 38 40 7 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":327 81 {*movdi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [110]) [0 *p2_13+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":327 84 {*movqi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:87 _1 ] [87])
            (reg:QI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":327 5 {*cmpqi_1}
     (nil))
(jump_insn 42 41 43 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":327 617 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(note 43 42 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 114 8 (set (reg:QI 0 ax [orig:97 _15 ] [97])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":328 84 {*movqi_internal}
     (nil))
(jump_insn 114 44 115 8 (set (pc)
        (label_ref 103)) "libs/src/../include/rapidxml/rapidxml.hpp":328 649 {jump}
     (nil)
 -> 103)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

(barrier 115 114 47)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 47 115 48 9 216 (nil) [1 uses])
(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":326 218 {*adddi_1}
     (nil))
(insn 50 49 116 9 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":326 218 {*adddi_1}
     (nil))
(jump_insn 116 50 117 9 (set (pc)
        (label_ref 51)) "libs/src/../include/rapidxml/rapidxml.hpp":326 649 {jump}
     (nil)
 -> 51)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 117 116 58)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116
(code_label 58 117 59 10 214 (nil) [1 uses])
(note 59 58 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 59 65 10 (set (reg/f:DI 1 dx [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":332 81 {*movdi_internal}
     (nil))
(insn 65 64 66 10 (set (reg:DI 0 ax [116])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":332 81 {*movdi_internal}
     (nil))
(insn 66 65 67 10 (parallel [
            (set (reg:DI 0 ax [114])
                (plus:DI (reg:DI 0 ax [116])
                    (reg/f:DI 1 dx [115])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":332 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 size1+0 S8 A64]))
        (nil)))
(insn 67 66 97 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64])
        (reg:DI 0 ax [114])) "libs/src/../include/rapidxml/rapidxml.hpp":332 81 {*movdi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              14 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117
(code_label 97 67 68 11 220 (nil) [1 uses])
(note 68 97 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":332 81 {*movdi_internal}
     (nil))
(insn 70 69 71 11 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 0 ax [117])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64]))) "libs/src/../include/rapidxml/rapidxml.hpp":332 8 {*cmpdi_1}
     (nil))
(jump_insn 71 70 72 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":332 617 {*jcc_1}
     (nil)
 -> 100)
;;  succ:       15
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 118 119 120 121 122 123
(note 72 71 73 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 12 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":333 81 {*movdi_internal}
     (nil))
(insn 74 73 76 12 (set (reg:QI 0 ax [orig:89 _3 ] [89])
        (mem:QI (reg/f:DI 0 ax [118]) [0 *p1_12+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":333 84 {*movqi_internal}
     (nil))
(insn 76 74 77 12 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (zero_extend:SI (reg:QI 0 ax [orig:90 _4 ] [90]))) "libs/src/../include/rapidxml/rapidxml.hpp":333 136 {*zero_extendqisi2}
     (nil))
(insn 77 76 78 12 (set (reg:DI 1 dx [119])
        (sign_extend:DI (reg:SI 0 ax [orig:91 _5 ] [91]))) "libs/src/../include/rapidxml/rapidxml.hpp":333 145 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 12 (set (reg:DI 0 ax [120])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_upcaseE") [flags 0x2]  <var_decl 0x7f441a7e5990 lookup_upcase>)) "libs/src/../include/rapidxml/rapidxml.hpp":333 81 {*movdi_internal}
     (nil))
(insn 79 78 80 12 (set (reg:QI 2 cx [orig:92 _6 ] [92])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [119])
                (reg:DI 0 ax [120])) [0 lookup_upcase S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":333 84 {*movqi_internal}
     (nil))
(insn 80 79 81 12 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":333 81 {*movdi_internal}
     (nil))
(insn 81 80 83 12 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (mem:QI (reg/f:DI 0 ax [121]) [0 *p2_14+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":333 84 {*movqi_internal}
     (nil))
(insn 83 81 84 12 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (zero_extend:SI (reg:QI 0 ax [orig:94 _8 ] [94]))) "libs/src/../include/rapidxml/rapidxml.hpp":333 136 {*zero_extendqisi2}
     (nil))
(insn 84 83 85 12 (set (reg:DI 1 dx [122])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "libs/src/../include/rapidxml/rapidxml.hpp":333 145 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 12 (set (reg:DI 0 ax [123])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_upcaseE") [flags 0x2]  <var_decl 0x7f441a7e5990 lookup_upcase>)) "libs/src/../include/rapidxml/rapidxml.hpp":333 81 {*movdi_internal}
     (nil))
(insn 86 85 87 12 (set (reg:QI 0 ax [orig:96 _10 ] [96])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [122])
                (reg:DI 0 ax [123])) [0 lookup_upcase S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":333 84 {*movqi_internal}
     (nil))
(insn 87 86 88 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 2 cx [orig:92 _6 ] [92])
            (reg:QI 0 ax [orig:96 _10 ] [96]))) "libs/src/../include/rapidxml/rapidxml.hpp":333 5 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":333 617 {*jcc_1}
     (nil)
 -> 93)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(note 89 88 90 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 118 13 (set (reg:QI 0 ax [orig:97 _15 ] [97])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":334 84 {*movqi_internal}
     (nil))
(jump_insn 118 90 119 13 (set (pc)
        (label_ref 103)) "libs/src/../include/rapidxml/rapidxml.hpp":334 649 {jump}
     (nil)
 -> 103)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

(barrier 119 118 93)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 93 119 94 14 219 (nil) [1 uses])
(note 94 93 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 14 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 p1+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":332 218 {*adddi_1}
     (nil))
(insn 96 95 120 14 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [3 p2+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":332 218 {*adddi_1}
     (nil))
(jump_insn 120 96 121 14 (set (pc)
        (label_ref 97)) "libs/src/../include/rapidxml/rapidxml.hpp":332 649 {jump}
     (nil)
 -> 97)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 121 120 100)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       6
;;              11
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(code_label 100 121 101 15 218 (nil) [2 uses])
(note 101 100 102 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 15 (set (reg:QI 0 ax [orig:97 _15 ] [97])
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":336 84 {*movqi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              3 [100.0%] 
;;              8 [100.0%] 
;;              13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  def 	 0 [ax] 98
(code_label 103 102 104 16 213 (nil) [3 uses])
(note 104 103 109 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 109 104 110 16 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:98 <retval> ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":337 84 {*movqi_internal}
     (nil))
(insn 110 109 122 16 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":337 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 122 110 0 NOTE_INSN_DELETED)

;; Function static Ch* rapidxml::xml_base<Ch>::nullstr() [with Ch = char] (_ZN8rapidxml8xml_baseIcE7nullstrEv, funcdef_no=3220, decl_uid=60184, cgraph_uid=1094, symbol_order=1116)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = -2
   Insn 5: point = 3, n_alt = 4
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns


static Ch* rapidxml::xml_base<Ch>::nullstr() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 28{20d,8u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 12 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (symbol_ref/i:DI ("_ZZN8rapidxml8xml_baseIcE7nullstrEvE4zero") [flags 0x2]  <var_decl 0x7f44190d9d80 zero>)) "libs/src/../include/rapidxml/rapidxml.hpp":781 81 {*movdi_internal}
     (nil))
(insn 12 5 13 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":782 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":782 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 13 0 NOTE_INSN_DELETED)

;; Function static std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_S_right(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base, funcdef_no=3256, decl_uid=53610, cgraph_uid=1130, symbol_order=1152)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


static std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_S_right(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [14 __x+0 S8 A64])
        (reg:DI 5 di [ __x ])) "/usr/include/c++/7/bits/stl_tree.h":771 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [14 __x+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":772 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 24 [0x18])) [14 __x_2(D)->_M_right+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":772 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_tree.h":772 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":772 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function static std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_S_left(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base, funcdef_no=3257, decl_uid=53606, cgraph_uid=1131, symbol_order=1153)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


static std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_S_left(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [14 __x+0 S8 A64])
        (reg:DI 5 di [ __x ])) "/usr/include/c++/7/bits/stl_tree.h":763 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [14 __x+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":764 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 16 [0x10])) [14 __x_2(D)->_M_left+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":764 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_tree.h":764 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":764 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_drop_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E, funcdef_no=3258, decl_uid=53185, cgraph_uid=1132, symbol_order=1154)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = -2
   Insn 13: point = 2, n_alt = 3
   Insn 12: point = 3, n_alt = 3
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = -2
   Insn 9: point = 5, n_alt = -2
   Insn 8: point = 6, n_alt = 3
   Insn 7: point = 7, n_alt = 3
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [5..7]
 r88: [4..6]
 r89: [1..3]
 r90: [0..2]
Compressing live ranges: from 8 to 4 - 50%
Ranges after the compression:
 r87: [2..3]
 r88: [2..3]
 r89: [0..1]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 16.


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_drop_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,2u} r1={5d,2u} r2={3d} r4={5d,3u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 193{170d,23u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":656 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_tree.h":656 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":658 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":658 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_tree.h":658 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_tree.h":658 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E") [flags 0x3]  <function_decl 0x7f4419c3a200 _M_destroy_node>) [0 _M_destroy_node S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":658 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 12 11 13 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":659 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":659 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "/usr/include/c++/7/bits/stl_tree.h":659 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_tree.h":659 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E") [flags 0x3]  <function_decl 0x7f4419c29f00 _M_put_node>) [0 _M_put_node S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":659 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 19 16 20 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":660 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE12_Vector_implC2Ev, funcdef_no=3260, decl_uid=56340, cgraph_uid=1134, symbol_order=1156)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 5
   Insn 13: point = 1, n_alt = 3
   Insn 12: point = 2, n_alt = 5
   Insn 11: point = 3, n_alt = 3
   Insn 10: point = 4, n_alt = 5
   Insn 9: point = 5, n_alt = 3
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{95d,17u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":88 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaIN3TSX6Parser7TerrainEEC2Ev") [flags 0x3]  <function_decl 0x7f4419a09700 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (reg/f:DI 0 ax [88]) [41 this_2(D)->_M_start+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [41 this_2(D)->_M_finish+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [74 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 14 13 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 16 [0x10])) [41 this_2(D)->_M_end_of_storage+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":90 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = TSX::Parser::Terrain] (_ZNSaIN3TSX6Parser7TerrainEED2Ev, funcdef_no=3263, decl_uid=56308, cgraph_uid=1137, symbol_order=1159)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [88 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [88 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEED2Ev") [flags 0x3]  <function_decl 0x7f44199fdb00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":139 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":139 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>] (_ZNSt12_Vector_baseIN3TSX6Parser7TerrainESaIS2_EE13_M_deallocateEPS2_m, funcdef_no=3265, decl_uid=56348, cgraph_uid=1139, symbol_order=1161)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 26: point = 0, n_alt = -1
  BB 3
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 2, n_alt = -2
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 9: point = 6, n_alt = -1
   Insn 8: point = 6, n_alt = 1
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [0..5]
 r88: [2..4]
 r89: [1..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = TSX::Parser::Terrain; _Alloc = std::allocator<TSX::Parser::Terrain>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,12u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{96d,28u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":179 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":179 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [75 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 13 12 15 3 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 15 13 16 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(call_insn 17 16 25 3 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIN3TSX6Parser7TerrainEEE10deallocateERS3_PS2_m") [flags 0x3]  <function_decl 0x7f44199bcd00 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":180 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 17 24 5 232 (nil) [1 uses])
(note 24 25 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 20 5 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":181 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 26 21 4 230 (nil) [0 uses])
(note 21 20 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 21 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Terrain*] (_ZSt8_DestroyIPN3TSX6Parser7TerrainEEvT_S4_, funcdef_no=3266, decl_uid=65465, cgraph_uid=1140, symbol_order=1162)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Terrain*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 110{94d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Destroy_auxILb0EE9__destroyIPN3TSX6Parser7TerrainEEEvT_S6_") [flags 0x3]  <function_decl 0x7f4419187600 __destroy>) [0 __destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":137 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 11 15 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":138 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE12_Vector_implC2Ev, funcdef_no=3268, decl_uid=57435, cgraph_uid=1142, symbol_order=1164)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 5
   Insn 13: point = 1, n_alt = 3
   Insn 12: point = 2, n_alt = 5
   Insn 11: point = 3, n_alt = 3
   Insn 10: point = 4, n_alt = 5
   Insn 9: point = 5, n_alt = 3
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{95d,17u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":88 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaIN3TSX6Parser4TileEEC2Ev") [flags 0x3]  <function_decl 0x7f4419696000 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (reg/f:DI 0 ax [88]) [45 this_2(D)->_M_start+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [45 this_2(D)->_M_finish+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [77 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 14 13 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 16 [0x10])) [45 this_2(D)->_M_end_of_storage+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":90 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = TSX::Parser::Tile] (_ZNSaIN3TSX6Parser4TileEED2Ev, funcdef_no=3271, decl_uid=57403, cgraph_uid=1145, symbol_order=1167)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [89 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [89 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEED2Ev") [flags 0x3]  <function_decl 0x7f441968e400 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":139 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":139 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>] (_ZNSt12_Vector_baseIN3TSX6Parser4TileESaIS2_EE13_M_deallocateEPS2_m, funcdef_no=3273, decl_uid=57443, cgraph_uid=1147, symbol_order=1169)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 26: point = 0, n_alt = -1
  BB 3
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 2, n_alt = -2
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 9: point = 6, n_alt = -1
   Insn 8: point = 6, n_alt = 1
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [0..5]
 r88: [2..4]
 r89: [1..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = TSX::Parser::Tile; _Alloc = std::allocator<TSX::Parser::Tile>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,12u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{96d,28u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":179 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":179 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [78 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 13 12 15 3 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 15 13 16 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(call_insn 17 16 25 3 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIN3TSX6Parser4TileEEE10deallocateERS3_PS2_m") [flags 0x3]  <function_decl 0x7f4419a5d600 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":180 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 17 24 5 238 (nil) [1 uses])
(note 24 25 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 20 5 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":181 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 26 21 4 236 (nil) [0 uses])
(note 21 20 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 21 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Tile*] (_ZSt8_DestroyIPN3TSX6Parser4TileEEvT_S4_, funcdef_no=3274, decl_uid=65489, cgraph_uid=1148, symbol_order=1170)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Tile*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 110{94d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Destroy_auxILb0EE9__destroyIPN3TSX6Parser4TileEEEvT_S6_") [flags 0x3]  <function_decl 0x7f44191b0e00 __destroy>) [0 __destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":137 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 11 15 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":138 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_base<Ch>::xml_base() [with Ch = char] (_ZN8rapidxml8xml_baseIcEC2Ev, funcdef_no=3276, decl_uid=60192, cgraph_uid=1150, symbol_order=1172)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 5
   Insn 10: point = 1, n_alt = 3
   Insn 9: point = 2, n_alt = 5
   Insn 8: point = 3, n_alt = 3
   Insn 7: point = 4, n_alt = 5
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns


rapidxml::xml_base<Ch>::xml_base() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,6u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 34{21d,13u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":657 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f:DI (reg/f:DI 0 ax [87]) [3 this_2(D)->m_name+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 8 [0x8])) [3 this_2(D)->m_value+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 11 10 14 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [51 this_2(D)->m_parent+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":660 81 {*movdi_internal}
     (nil))
(insn 14 11 15 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":662 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function void rapidxml::memory_pool<Ch>::init() [with Ch = char] (_ZN8rapidxml11memory_poolIcE4initEv, funcdef_no=3278, decl_uid=60355, cgraph_uid=1152, symbol_order=1174)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 7:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 21:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = 5
   Insn 22: point = 1, n_alt = 3
   Insn 21: point = 2, n_alt = 3
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 6, n_alt = 3
   Insn 18: point = 7, n_alt = 5
   Insn 17: point = 8, n_alt = 3
   Insn 16: point = 9, n_alt = -2
   Insn 15: point = 10, n_alt = 0
   Insn 14: point = 10, n_alt = -2
   Insn 13: point = 11, n_alt = -2
   Insn 12: point = 12, n_alt = 3
   Insn 11: point = 13, n_alt = 3
   Insn 10: point = 15, n_alt = 3
   Insn 9: point = 16, n_alt = 5
   Insn 8: point = 17, n_alt = 3
   Insn 7: point = 18, n_alt = 3
   Insn 6: point = 20, n_alt = 3
   Insn 2: point = 21, n_alt = 5
 r87: [16..18]
 r88: [11..13]
 r89: [7..9]
 r90: [3..4]
 r91: [0..2]
 r92: [19..20]
 r93: [16..17]
 r94: [14..15]
 r95: [10..12]
 r96: [7..8]
 r97: [5..6]
 r98: [0..1]
Compressing live ranges: from 21 to 16 - 76%
Ranges after the compression:
 r87: [12..13]
 r88: [8..9]
 r89: [6..7]
 r90: [2..3]
 r91: [0..1]
 r92: [14..15]
 r93: [12..13]
 r94: [10..11]
 r95: [8..9]
 r96: [6..7]
 r97: [4..5]
 r98: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.


void rapidxml::memory_pool<Ch>::init() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,9u} r1={6d,4u} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,10u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 139{107d,30u,2e} in 20{19 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":566 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":568 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [92])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":568 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":568 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/j:DI (reg/f:DI 0 ax [93]) [0 this_6(D)->m_begin+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":568 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (mem/f/j:DI (reg/f:DI 0 ax [94]) [0 this_6(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5alignEPc") [flags 0x3]  <function_decl 0x7f441985fe00 align>) [0 align S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":569 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 1 dx [orig:89 _3 ] [89])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 8 [0x8])) [0 this_6(D)->m_ptr+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":569 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":570 81 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [97])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":570 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:90 _4 ] [90])
                    (const_int 65536 [0x10000])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":570 218 {*adddi_1}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":570 81 {*movdi_internal}
     (nil))
(insn 23 22 26 2 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 16 [0x10])) [0 this_6(D)->m_end+0 S8 A64])
        (reg/f:DI 1 dx [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":570 81 {*movdi_internal}
     (nil))
(insn 26 23 27 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":571 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 26 0 NOTE_INSN_DELETED)

;; Function char* rapidxml::memory_pool<Ch>::align(char*) [with Ch = char] (_ZN8rapidxml11memory_poolIcE5alignEPc, funcdef_no=3279, decl_uid=60357, cgraph_uid=1153, symbol_order=1175)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =rm  (1) 0 {*negdi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) Z {*anddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = 0
   Insn 12: point = 5, n_alt = 3
   Insn 11: point = 6, n_alt = 3
   Insn 10: point = 7, n_alt = 5
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 0
   Insn 7: point = 12, n_alt = 3
   Insn 3: point = 13, n_alt = 5
   Insn 2: point = 13, n_alt = 5
 r87: [11..12]
 r88: [9..10]
 r89: [2..3]
 r90: [0..1]
 r91: [7..8]
 r92: [4..6]
 r93: [4..5]
Compressing live ranges: from 13 to 12 - 92%
Ranges after the compression:
 r87: [10..11]
 r88: [8..9]
 r89: [2..3]
 r90: [0..1]
 r91: [6..7]
 r92: [4..5]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


char* rapidxml::memory_pool<Ch>::align(char*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,7u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,8u} r7={1d,2u} r17={3d} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 51{28d,21u,2e} in 11{11 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":573 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 ptr+0 S8 A64])
        (reg:DI 4 si [ ptr ])) "libs/src/../include/rapidxml/rapidxml.hpp":573 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [orig:87 ptr.1_1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 ptr+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":575 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [orig:88 _2 ] [88])
                (neg:DI (reg:DI 0 ax [orig:87 ptr.1_1 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":575 459 {*negdi2_1}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 0 ax [91])
                (and:DI (reg:DI 0 ax [orig:88 _2 ] [88])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":575 388 {*anddi_1}
     (nil))
(insn 10 9 11 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 alignment+0 S8 A64])
        (reg:DI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":575 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 ptr+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":576 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [93])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 alignment+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":576 81 {*movdi_internal}
     (nil))
(insn 13 12 20 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _5 ] [89])
                (plus:DI (reg:DI 0 ax [93])
                    (reg/f:DI 1 dx [92])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":576 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 ptr+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [8 alignment+0 S8 A64]))
        (nil)))
(insn 20 13 21 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":577 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":577 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEEC2Ev, funcdef_no=3281, decl_uid=60718, cgraph_uid=1155, symbol_order=1177)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":126 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":127 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev") [flags 0x3]  <function_decl 0x7f4419482600 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":127 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":127 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = char; _Alloc = std::allocator<char>] (_ZNKSt6vectorIcSaIcEE4sizeEv, funcdef_no=3303, decl_uid=60885, cgraph_uid=1177, symbol_order=1199)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=97 from oldreg=88, assigning class GENERAL_REGS to r97
   12: {r97:DI=r97:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   24: r97:DI=r88:DI
    Inserting insn reload after:
   25: r91:DI=r97:DI

	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 25: point = 5, n_alt = -2
	Hard reg 0 is preferable by r97 with profit 1
   Insn 12: point = 7, n_alt = 0
   Insn 24: point = 8, n_alt = -2
	Hard reg 0 is preferable by r97 with profit 1
	Hard reg 1 is preferable by r97 with profit 1
   Insn 11: point = 10, n_alt = -2
   Insn 10: point = 12, n_alt = 3
   Insn 9: point = 14, n_alt = 3
   Insn 8: point = 15, n_alt = -2
   Insn 7: point = 17, n_alt = 3
   Insn 6: point = 19, n_alt = 3
   Insn 2: point = 20, n_alt = 5
 r87: [16..17]
 r88: [9..15]
 r89: [11..12]
 r90: [7..10]
 r91: [4..5]
 r92: [2..3]
 r93: [0..1]
 r94: [18..19]
 r95: [13..14]
 r97: [6..8]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r87: [14..15]
 r88: [8..13]
 r89: [10..11]
 r90: [6..9]
 r91: [4..5]
 r92: [2..3]
 r93: [0..1]
 r94: [16..17]
 r95: [12..13]
 r97: [6..7]

********** Assignment #1: **********

	 Assigning to 97 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=97, tfreq=3)...
	   Assign 1 to reload r97 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 11.
deleting insn with uid = 24.
deleting insn with uid = 13.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,7u} r1={3d,2u} r2={1d} r4={1d} r5={1d,1u} r6={1d,5u} r7={1d,2u} r17={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 45{27d,18u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91 92 93 94 95
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":670 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 8 [0x8])) [3 this_7(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [95]) [3 this_7(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 12 10 25 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":671 274 {*subdi_1}
     (nil))
(insn 25 12 20 2 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 20 25 21 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:93 <retval> ] [93])) "/usr/include/c++/7/bits/stl_vector.h":671 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":671 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function void std::vector<_Tp, _Alloc>::_M_default_append(std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEE17_M_default_appendEm, funcdef_no=3304, decl_uid=61195, cgraph_uid=1178, symbol_order=1200)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=160 from oldreg=88, assigning class GENERAL_REGS to r160
   16: {r160:DI=r160:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  186: r160:DI=r88:DI
    Inserting insn reload after:
  187: r91:DI=r160:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 90:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=161 from oldreg=114, assigning class GENERAL_REGS to r161
  110: {r161:DI=r161:DI-r116:DI;clobber flags:CC;}
      REG_DEAD r116:DI
      REG_DEAD r114:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  188: r161:DI=r114:DI
    Inserting insn reload after:
  189: r117:DI=r161:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 120:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 128:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 13
EBB 12

********** Pseudo live ranges #1: **********

  BB 11
   Insn 166: point = 0, n_alt = 0
   Insn 165: point = 0, n_alt = -2
   Insn 164: point = 1, n_alt = -2
   Insn 163: point = 3, n_alt = 0
   Insn 176: point = 3, n_alt = -2
  BB 10
   Insn 159: point = 4, n_alt = 0
  BB 9
   Insn 157: point = 4, n_alt = 0
   Insn 156: point = 4, n_alt = -2
   Insn 155: point = 5, n_alt = -2
   Insn 154: point = 6, n_alt = -2
   Insn 153: point = 7, n_alt = 3
   Insn 152: point = 8, n_alt = 3
   Insn 151: point = 9, n_alt = 3
  BB 8
   Insn 149: point = 10, n_alt = 0
   Insn 148: point = 10, n_alt = -2
   Insn 147: point = 11, n_alt = -2
   Insn 146: point = 12, n_alt = -2
   Insn 145: point = 13, n_alt = 3
   Insn 144: point = 14, n_alt = 3
   Insn 143: point = 15, n_alt = -2
   Insn 142: point = 16, n_alt = 0
   Insn 141: point = 16, n_alt = -2
   Insn 140: point = 17, n_alt = 3
   Insn 139: point = 18, n_alt = 0
   Insn 138: point = 18, n_alt = -2
   Insn 137: point = 19, n_alt = -2
   Insn 173: point = 21, n_alt = -2
  BB 12
  BB 13
   Insn 184: point = 22, n_alt = -1
  BB 7
   Insn 180: point = 22, n_alt = -1
   Insn 128: point = 22, n_alt = 5
   Insn 127: point = 23, n_alt = 3
   Insn 126: point = 24, n_alt = 0
   Insn 125: point = 26, n_alt = 3
   Insn 124: point = 27, n_alt = 3
   Insn 123: point = 28, n_alt = 5
   Insn 122: point = 29, n_alt = 3
   Insn 121: point = 30, n_alt = 3
   Insn 120: point = 31, n_alt = 5
   Insn 119: point = 32, n_alt = 3
   Insn 118: point = 33, n_alt = 3
   Insn 117: point = 34, n_alt = 0
   Insn 116: point = 34, n_alt = -2
   Insn 115: point = 35, n_alt = -2
   Insn 114: point = 36, n_alt = -2
   Insn 113: point = 37, n_alt = 3
   Insn 112: point = 39, n_alt = 3
   Insn 111: point = 40, n_alt = -2
   Insn 189: point = 42, n_alt = -2
	Hard reg 1 is preferable by r161 with profit 1
   Insn 110: point = 44, n_alt = 0
   Insn 188: point = 45, n_alt = -2
	Hard reg 1 is preferable by r161 with profit 1
	Hard reg 2 is preferable by r161 with profit 1
   Insn 109: point = 47, n_alt = -2
   Insn 108: point = 49, n_alt = 3
   Insn 107: point = 51, n_alt = 3
   Insn 106: point = 52, n_alt = -2
   Insn 105: point = 54, n_alt = 3
   Insn 104: point = 56, n_alt = 3
   Insn 103: point = 57, n_alt = 3
   Insn 102: point = 58, n_alt = 0
   Insn 101: point = 58, n_alt = -2
   Insn 100: point = 59, n_alt = -2
   Insn 99: point = 60, n_alt = -2
   Insn 98: point = 61, n_alt = 3
   Insn 97: point = 63, n_alt = 3
   Insn 96: point = 64, n_alt = 3
   Insn 95: point = 66, n_alt = 3
   Insn 94: point = 67, n_alt = -2
   Insn 93: point = 68, n_alt = 0
   Insn 92: point = 68, n_alt = -2
   Insn 91: point = 69, n_alt = 3
   Insn 90: point = 70, n_alt = 5
   Insn 88: point = 71, n_alt = -2
  BB 6
   Insn 87: point = 72, n_alt = 0
   Insn 86: point = 72, n_alt = -2
   Insn 85: point = 73, n_alt = -2
   Insn 84: point = 74, n_alt = -2
   Insn 83: point = 75, n_alt = 3
   Insn 82: point = 76, n_alt = 3
   Insn 81: point = 77, n_alt = -2
   Insn 80: point = 78, n_alt = 0
   Insn 79: point = 78, n_alt = -2
   Insn 78: point = 79, n_alt = 3
   Insn 77: point = 80, n_alt = 5
   Insn 75: point = 81, n_alt = -2
  BB 5
   Insn 74: point = 82, n_alt = 0
   Insn 73: point = 82, n_alt = -2
   Insn 72: point = 83, n_alt = -2
   Insn 71: point = 84, n_alt = -2
   Insn 70: point = 85, n_alt = -2
   Insn 69: point = 86, n_alt = 3
   Insn 68: point = 87, n_alt = 3
   Insn 67: point = 89, n_alt = 3
   Insn 66: point = 90, n_alt = 3
   Insn 65: point = 92, n_alt = 3
   Insn 64: point = 93, n_alt = -2
   Insn 63: point = 94, n_alt = 0
   Insn 62: point = 94, n_alt = -2
   Insn 61: point = 95, n_alt = 3
   Insn 60: point = 96, n_alt = 5
   Insn 59: point = 97, n_alt = 3
   Insn 58: point = 98, n_alt = 5
   Insn 57: point = 99, n_alt = -2
   Insn 56: point = 100, n_alt = 0
   Insn 55: point = 100, n_alt = -2
   Insn 54: point = 101, n_alt = -2
   Insn 53: point = 102, n_alt = 3
   Insn 52: point = 103, n_alt = 3
   Insn 51: point = 104, n_alt = 5
   Insn 50: point = 105, n_alt = -2
   Insn 49: point = 106, n_alt = 0
   Insn 48: point = 106, n_alt = -2
   Insn 47: point = 107, n_alt = 3
   Insn 46: point = 108, n_alt = 5
   Insn 45: point = 109, n_alt = -2
   Insn 44: point = 110, n_alt = 0
   Insn 43: point = 110, n_alt = -2
   Insn 42: point = 111, n_alt = -2
   Insn 41: point = 112, n_alt = 4
   Insn 40: point = 112, n_alt = 3
   Insn 39: point = 113, n_alt = 3
  BB 4
   Insn 178: point = 114, n_alt = -1
   Insn 34: point = 114, n_alt = 5
   Insn 33: point = 115, n_alt = 3
   Insn 32: point = 116, n_alt = -2
   Insn 31: point = 117, n_alt = 0
   Insn 30: point = 117, n_alt = -2
   Insn 29: point = 118, n_alt = -2
   Insn 28: point = 119, n_alt = -2
   Insn 27: point = 120, n_alt = 3
   Insn 26: point = 121, n_alt = 3
   Insn 25: point = 123, n_alt = 3
   Insn 24: point = 124, n_alt = -2
   Insn 23: point = 125, n_alt = 0
   Insn 22: point = 125, n_alt = -2
   Insn 21: point = 126, n_alt = 3
  BB 3
   Insn 19: point = 127, n_alt = -1
   Insn 18: point = 127, n_alt = 0
   Insn 17: point = 128, n_alt = -2
   Insn 187: point = 130, n_alt = -2
	Hard reg 0 is preferable by r160 with profit 1
   Insn 16: point = 132, n_alt = 0
   Insn 186: point = 133, n_alt = -2
	Hard reg 0 is preferable by r160 with profit 1
	Hard reg 1 is preferable by r160 with profit 1
   Insn 15: point = 135, n_alt = -2
   Insn 14: point = 137, n_alt = 3
   Insn 13: point = 139, n_alt = 3
   Insn 12: point = 140, n_alt = -2
   Insn 11: point = 142, n_alt = 3
   Insn 10: point = 144, n_alt = 3
  BB 2
   Insn 8: point = 145, n_alt = -1
   Insn 7: point = 145, n_alt = 1
   Insn 3: point = 145, n_alt = 5
   Insn 2: point = 145, n_alt = 5
 r87: [141..142]
 r88: [134..140]
 r89: [136..137]
 r90: [132..135]
 r91: [129..130]
 r92: [127..128]
 r93: [125..126]
 r94: [119..124]
 r95: [117..121]
 r96: [114..116]
 r97: [100..103]
 r98: [94..95]
 r99: [85..93]
 r100: [83..90]
 r101: [82..87]
 r102: [78..79]
 r103: [74..77]
 r104: [18..19]
 r105: [16..17]
 r106: [12..15]
 r107: [4..9]
 r108: [68..69]
 r109: [60..67]
 r110: [59..64]
 r111: [58..61]
 r112: [34..57]
 r113: [53..54]
 r114: [46..52]
 r115: [48..49]
 r116: [44..47]
 r117: [41..42]
 r118: [36..40]
 r119: [35..37]
 r120: [22..24]
 r121: [108..109]
 r122: [98..99]
 r123: [80..81]
 r124: [70..71]
 r125: [0..1]
 r126: [143..144]
 r127: [138..139]
 r128: [122..123]
 r129: [118..120]
 r130: [114..115]
 r131: [111..113]
 r132: [110..112]
 r133: [106..107]
 r134: [104..105]
 r135: [101..102]
 r136: [96..97]
 r137: [91..92]
 r138: [88..89]
 r139: [84..86]
 r140: [73..76]
 r141: [72..75]
 r142: [65..66]
 r143: [62..63]
 r144: [55..56]
 r145: [50..51]
 r146: [38..39]
 r147: [31..33]
 r148: [31..32]
 r149: [28..30]
 r150: [28..29]
 r151: [25..27]
 r152: [25..26]
 r153: [22..23]
 r154: [20..21]
 r155: [11..14]
 r156: [10..13]
 r157: [6..8]
 r158: [5..7]
 r159: [2..3]
 r160: [131..133]
 r161: [43..45]
Compressing live ranges: from 145 to 102 - 70%
Ranges after the compression:
 r87: [98..99]
 r88: [92..97]
 r89: [94..95]
 r90: [90..93]
 r91: [88..89]
 r92: [86..87]
 r93: [84..85]
 r94: [80..83]
 r95: [80..81]
 r96: [78..79]
 r97: [68..69]
 r98: [62..63]
 r99: [56..61]
 r100: [56..59]
 r101: [56..57]
 r102: [52..53]
 r103: [50..51]
 r104: [10..11]
 r105: [8..9]
 r106: [6..7]
 r107: [4..5]
 r108: [46..47]
 r109: [40..45]
 r110: [40..43]
 r111: [40..41]
 r112: [22..39]
 r113: [36..37]
 r114: [30..35]
 r115: [32..33]
 r116: [28..31]
 r117: [26..27]
 r118: [22..25]
 r119: [22..23]
 r120: [14..15]
 r121: [74..75]
 r122: [66..67]
 r123: [54..55]
 r124: [48..49]
 r125: [0..1]
 r126: [100..101]
 r127: [96..97]
 r128: [82..83]
 r129: [80..81]
 r130: [78..79]
 r131: [76..77]
 r132: [76..77]
 r133: [72..73]
 r134: [70..71]
 r135: [68..69]
 r136: [64..65]
 r137: [60..61]
 r138: [58..59]
 r139: [56..57]
 r140: [50..51]
 r141: [50..51]
 r142: [44..45]
 r143: [42..43]
 r144: [38..39]
 r145: [34..35]
 r146: [24..25]
 r147: [20..21]
 r148: [20..21]
 r149: [18..19]
 r150: [18..19]
 r151: [16..17]
 r152: [16..17]
 r153: [14..15]
 r154: [12..13]
 r155: [6..7]
 r156: [6..7]
 r157: [4..5]
 r158: [4..5]
 r159: [2..3]
 r160: [90..91]
 r161: [28..29]

********** Assignment #1: **********

	 Assigning to 160 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=160, tfreq=3)...
	   Assign 1 to reload r160 (freq=3)
	 Assigning to 161 (cl=GENERAL_REGS, orig=114, freq=3, tfirst=161, tfreq=3)...
	   Assign 2 to reload r161 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 52
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 70
changing reg in insn 66
changing reg in insn 72
changing reg in insn 68
changing reg in insn 73
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 84
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 146
changing reg in insn 151
changing reg in insn 156
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 99
changing reg in insn 96
changing reg in insn 100
changing reg in insn 98
changing reg in insn 101
changing reg in insn 103
changing reg in insn 116
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 114
changing reg in insn 113
changing reg in insn 115
changing reg in insn 126
changing reg in insn 128
changing reg in insn 45
changing reg in insn 46
changing reg in insn 57
changing reg in insn 58
changing reg in insn 75
changing reg in insn 77
changing reg in insn 88
changing reg in insn 90
changing reg in insn 164
changing reg in insn 165
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 82
changing reg in insn 85
changing reg in insn 83
changing reg in insn 86
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 173
changing reg in insn 137
changing reg in insn 144
changing reg in insn 147
changing reg in insn 145
changing reg in insn 148
changing reg in insn 152
changing reg in insn 154
changing reg in insn 153
changing reg in insn 155
changing reg in insn 176
changing reg in insn 164
deleting insn with uid = 15.
deleting insn with uid = 186.
deleting insn with uid = 17.
deleting insn with uid = 28.
deleting insn with uid = 45.
deleting insn with uid = 50.
deleting insn with uid = 57.
deleting insn with uid = 70.
deleting insn with uid = 71.
deleting insn with uid = 72.
deleting insn with uid = 75.
deleting insn with uid = 84.
deleting insn with uid = 88.
deleting insn with uid = 99.
deleting insn with uid = 109.
deleting insn with uid = 188.
deleting insn with uid = 173.
deleting insn with uid = 137.
deleting insn with uid = 146.
deleting insn with uid = 154.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 159.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 166.


void std::vector<_Tp, _Alloc>::_M_default_append(std::vector<_Tp, _Alloc>::size_type) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={54d,45u} r1={44d,22u} r2={30d,10u} r3={1d,1u} r4={30d,11u} r5={37d,18u} r6={1d,62u} r7={1d,32u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r16={2u} r17={24d,2u} r18={19d} r19={19d} r20={1d,3u,2e} r21={20d} r22={20d} r23={20d} r24={20d} r25={20d} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={20d} r38={20d} r39={19d} r40={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} 
;;    total ref usage 1697{1487d,208u,2e} in 130{111 regular + 19 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/vector.tcc":554 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/vector.tcc":554 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":557 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 183)
            (pc))) "/usr/include/c++/7/bits/vector.tcc":557 617 {*jcc_1}
     (nil)
 -> 183)
;;  succ:       3 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 126 127
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":559 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [126])
                (const_int 16 [0x10])) [3 this_42(D)->D.61366._M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":559 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/vector.tcc":560 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":560 81 {*movdi_internal}
     (nil))
(insn 14 13 16 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [127])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":560 81 {*movdi_internal}
     (nil))
(insn 16 14 187 3 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/vector.tcc":560 274 {*subdi_1}
     (nil))
(insn 187 16 18 3 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/vector.tcc":560 81 {*movdi_internal}
     (nil))
(insn 18 187 19 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])
            (reg:DI 0 ax [orig:92 _6 ] [92]))) "/usr/include/c++/7/bits/vector.tcc":559 8 {*cmpdi_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "/usr/include/c++/7/bits/vector.tcc":559 617 {*jcc_1}
     (nil)
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 128 129 130
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":564 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 _7 ] [93])) "/usr/include/c++/7/bits/vector.tcc":564 81 {*movdi_internal}
     (nil))
(call_insn 23 22 24 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":564 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 1 dx [orig:94 _8 ] [94])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":564 81 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(insn 27 26 29 4 (set (reg:DI 2 cx [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(insn 29 27 30 4 (set (reg:DI 4 si)
        (reg:DI 2 cx [129])) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(call_insn 31 30 32 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt27__uninitialized_default_n_aIPcmcET_S1_T0_RSaIT1_E") [flags 0x3]  <function_decl 0x7f44191f4000 __uninitialized_default_n_a>) [0 __uninitialized_default_n_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":563 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 32 31 33 4 (set (reg/f:DI 1 dx [orig:96 _10 ] [96])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":563 81 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":562 81 {*movdi_internal}
     (nil))
(insn 34 33 178 4 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])
        (reg/f:DI 1 dx [orig:96 _10 ] [96])) "/usr/include/c++/7/bits/vector.tcc":562 81 {*movdi_internal}
     (nil))
(jump_insn 178 34 179 4 (set (pc)
        (label_ref:DI 183)) "/usr/include/c++/7/bits/vector.tcc":600 649 {jump}
     (nil)
 -> 183)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 37)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 101 121 122 131 132 133 134 135 136 137 138 139
(code_label 37 179 38 5 249 (nil) [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:DI 2 cx [131])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f44189af7e0 *.LC16>)) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 4 si)
        (reg:DI 2 cx [131])) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(call_insn 44 43 46 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE12_M_check_lenEmPKc") [flags 0x3]  <function_decl 0x7f44194c1900 _M_check_len>) [0 _M_check_len S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":568 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 46 44 47 5 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 __len+0 S8 A64])
        (reg:DI 0 ax [orig:121 _44 ] [121])) "/usr/include/c++/7/bits/vector.tcc":568 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":570 81 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) "/usr/include/c++/7/bits/vector.tcc":570 81 {*movdi_internal}
     (nil))
(call_insn 49 48 51 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":570 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 51 49 52 5 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __old_size+0 S8 A64])
        (reg:DI 0 ax [134])) "/usr/include/c++/7/bits/vector.tcc":570 81 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":571 81 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:DI 1 dx [135])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 __len+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":571 81 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 4 si)
        (reg:DI 1 dx [135])) "/usr/include/c++/7/bits/vector.tcc":571 81 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:97 _11 ] [97])) "/usr/include/c++/7/bits/vector.tcc":571 81 {*movdi_internal}
     (nil))
(call_insn 56 55 58 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm") [flags 0x3]  <function_decl 0x7f4419482800 _M_allocate>) [0 _M_allocate S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":571 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 58 56 59 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])
        (reg/f:DI 0 ax [orig:122 _49 ] [122])) "/usr/include/c++/7/bits/vector.tcc":571 81 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":572 81 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])
        (reg/f:DI 0 ax [136])) "/usr/include/c++/7/bits/vector.tcc":572 81 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":578 81 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:98 _12 ] [98])) "/usr/include/c++/7/bits/vector.tcc":578 81 {*movdi_internal}
     (nil))
(call_insn 63 62 64 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":578 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 64 63 65 5 (set (reg/f:DI 2 cx [orig:99 _13 ] [99])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":578 81 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":577 81 {*movdi_internal}
     (nil))
(insn 66 65 67 5 (set (reg/f:DI 4 si [orig:100 _14 ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [137])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":577 81 {*movdi_internal}
     (nil))
(insn 67 66 68 5 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":577 81 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [138]) [3 this_42(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":577 81 {*movdi_internal}
     (nil))
(insn 69 68 73 5 (set (reg:DI 1 dx [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":575 81 {*movdi_internal}
     (nil))
(insn 73 69 74 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 _15 ] [101])) "/usr/include/c++/7/bits/vector.tcc":575 81 {*movdi_internal}
     (nil))
(call_insn 74 73 170 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_") [flags 0x3]  <function_decl 0x7f44191f4200 __uninitialized_move_if_noexcept_a>) [0 __uninitialized_move_if_noexcept_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":575 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       8 (ABNORMAL,ABNORMAL_CALL,EH)
;;              6 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103 123 140 141
(note 170 74 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 170 78 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])
        (reg/f:DI 0 ax [orig:123 _54 ] [123])) "/usr/include/c++/7/bits/vector.tcc":575 81 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":581 81 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 _16 ] [102])) "/usr/include/c++/7/bits/vector.tcc":581 81 {*movdi_internal}
     (nil))
(call_insn 80 79 81 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":581 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 6 (set (reg/f:DI 1 dx [orig:103 _17 ] [103])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":581 81 {*movdi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:DI 2 cx [140])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":579 81 {*movdi_internal}
     (nil))
(insn 83 82 85 6 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":579 81 {*movdi_internal}
     (nil))
(insn 85 83 86 6 (set (reg:DI 4 si)
        (reg:DI 2 cx [140])) "/usr/include/c++/7/bits/vector.tcc":579 81 {*movdi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) "/usr/include/c++/7/bits/vector.tcc":579 81 {*movdi_internal}
     (nil))
(call_insn 87 86 171 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt27__uninitialized_default_n_aIPcmcET_S1_T0_RSaIT1_E") [flags 0x3]  <function_decl 0x7f44191f4000 __uninitialized_default_n_a>) [0 __uninitialized_default_n_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":579 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       8 (ABNORMAL,ABNORMAL_CALL,EH)
;;              7 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 109 110 111 112 113 114 115 116 117 118 119 120 124 142 143 144 145 146 147 148 149 150 151 152 153
(note 171 87 90 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 90 171 91 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 _58 ] [124])) "/usr/include/c++/7/bits/vector.tcc":579 81 {*movdi_internal}
     (nil))
(insn 91 90 92 7 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":591 81 {*movdi_internal}
     (nil))
(insn 92 91 93 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:108 _22 ] [108])) "/usr/include/c++/7/bits/vector.tcc":591 81 {*movdi_internal}
     (nil))
(call_insn 93 92 94 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":591 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 94 93 95 7 (set (reg/f:DI 1 dx [orig:109 _23 ] [109])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":591 81 {*movdi_internal}
     (nil))
(insn 95 94 96 7 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(insn 96 95 97 7 (set (reg/f:DI 2 cx [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [142])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(insn 97 96 98 7 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(insn 98 97 100 7 (set (reg/f:DI 0 ax [orig:111 _25 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [143]) [3 this_42(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(insn 100 98 101 7 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:110 _24 ] [110])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 _25 ] [111])) "/usr/include/c++/7/bits/vector.tcc":590 81 {*movdi_internal}
     (nil))
(call_insn 102 101 103 7 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPccEvT_S1_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419321500 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":590 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 103 102 104 7 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 104 103 105 7 (set (reg/f:DI 1 dx [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":593 81 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (set (reg/f:DI 1 dx [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [144])
                (const_int 16 [0x10])) [3 this_42(D)->D.61366._M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":593 81 {*movdi_internal}
     (nil))
(insn 106 105 107 7 (set (reg:DI 2 cx [orig:114 _28 ] [114])
        (reg/f:DI 1 dx [orig:113 _27 ] [113])) "/usr/include/c++/7/bits/vector.tcc":594 81 {*movdi_internal}
     (nil))
(insn 107 106 108 7 (set (reg/f:DI 1 dx [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":594 81 {*movdi_internal}
     (nil))
(insn 108 107 110 7 (set (reg/f:DI 1 dx [orig:115 _29 ] [115])
        (mem/f:DI (reg/f:DI 1 dx [145]) [3 this_42(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":594 81 {*movdi_internal}
     (nil))
(insn 110 108 189 7 (parallel [
            (set (reg:DI 2 cx [orig:114 _28 ] [114])
                (minus:DI (reg:DI 2 cx [orig:114 _28 ] [114])
                    (reg:DI 1 dx [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/vector.tcc":594 274 {*subdi_1}
     (nil))
(insn 189 110 111 7 (set (reg:DI 1 dx [orig:117 _31 ] [117])
        (reg:DI 2 cx [orig:114 _28 ] [114])) "/usr/include/c++/7/bits/vector.tcc":594 81 {*movdi_internal}
     (nil))
(insn 111 189 112 7 (set (reg:DI 4 si [orig:118 _32 ] [118])
        (reg:DI 1 dx [orig:117 _31 ] [117])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 112 111 113 7 (set (reg/f:DI 1 dx [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (set (reg/f:DI 2 cx [orig:119 _33 ] [119])
        (mem/f:DI (reg/f:DI 1 dx [146]) [3 this_42(D)->D.61366._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 114 113 115 7 (set (reg:DI 1 dx)
        (reg:DI 4 si [orig:118 _32 ] [118])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 115 114 116 7 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:119 _33 ] [119])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(insn 116 115 117 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:112 _26 ] [112])) "/usr/include/c++/7/bits/vector.tcc":592 81 {*movdi_internal}
     (nil))
(call_insn 117 116 118 7 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm") [flags 0x3]  <function_decl 0x7f4419482900 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":592 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 118 117 119 7 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":595 81 {*movdi_internal}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 1 dx [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":595 81 {*movdi_internal}
     (nil))
(insn 120 119 121 7 (set (mem/f:DI (reg/f:DI 0 ax [147]) [3 this_42(D)->D.61366._M_impl._M_start+0 S8 A64])
        (reg/f:DI 1 dx [148])) "/usr/include/c++/7/bits/vector.tcc":595 81 {*movdi_internal}
     (nil))
(insn 121 120 122 7 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":596 81 {*movdi_internal}
     (nil))
(insn 122 121 123 7 (set (reg/f:DI 1 dx [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":596 81 {*movdi_internal}
     (nil))
(insn 123 122 124 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [149])
                (const_int 8 [0x8])) [3 this_42(D)->D.61366._M_impl._M_finish+0 S8 A64])
        (reg/f:DI 1 dx [150])) "/usr/include/c++/7/bits/vector.tcc":596 81 {*movdi_internal}
     (nil))
(insn 124 123 125 7 (set (reg/f:DI 1 dx [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":597 81 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:DI 0 ax [152])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 __len+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":597 81 {*movdi_internal}
     (nil))
(insn 126 125 127 7 (parallel [
            (set (reg/f:DI 1 dx [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 1 dx [151])
                    (reg:DI 0 ax [152])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/vector.tcc":597 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 __new_start+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [8 __len+0 S8 A64]))
        (nil)))
(insn 127 126 128 7 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":597 81 {*movdi_internal}
     (nil))
(insn 128 127 180 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [153])
                (const_int 16 [0x10])) [3 this_42(D)->D.61366._M_impl._M_end_of_storage+0 S8 A64])
        (reg/f:DI 1 dx [orig:120 _34 ] [120])) "/usr/include/c++/7/bits/vector.tcc":597 81 {*movdi_internal}
     (nil))
(jump_insn 180 128 181 7 (set (pc)
        (label_ref:DI 183)) "/usr/include/c++/7/bits/vector.tcc":600 649 {jump}
     (nil)
 -> 183)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 172)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              6 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 8 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 154 155 156
(code_label/s 172 181 174 8 253 (nil) [1 uses])
(note 174 172 138 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 138 174 139 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 _18 ] [104])) "/usr/include/c++/7/bits/vector.tcc":583 81 {*movdi_internal}
     (nil))
(call_insn 139 138 140 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_begin_catch") [flags 0x41]  <function_decl 0x7f441a89be00 __cxa_begin_catch>) [0 __cxa_begin_catch S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":583 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 140 139 141 8 (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":586 81 {*movdi_internal}
     (nil))
(insn 141 140 142 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 _19 ] [105])) "/usr/include/c++/7/bits/vector.tcc":586 81 {*movdi_internal}
     (nil))
(call_insn 142 141 143 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/vector.tcc":586 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 143 142 144 8 (set (reg/f:DI 1 dx [orig:106 _20 ] [106])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/vector.tcc":586 81 {*movdi_internal}
     (nil))
(insn 144 143 145 8 (set (reg:DI 2 cx [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 __new_finish+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":585 81 {*movdi_internal}
     (nil))
(insn 145 144 147 8 (set (reg:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":585 81 {*movdi_internal}
     (nil))
(insn 147 145 148 8 (set (reg:DI 4 si)
        (reg:DI 2 cx [155])) "/usr/include/c++/7/bits/vector.tcc":585 81 {*movdi_internal}
     (nil))
(insn 148 147 149 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) "/usr/include/c++/7/bits/vector.tcc":585 81 {*movdi_internal}
     (nil))
(call_insn 149 148 150 8 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPccEvT_S1_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419321500 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":585 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 157 158
(note 150 149 151 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 9 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":587 81 {*movdi_internal}
     (nil))
(insn 152 151 153 9 (set (reg:DI 1 dx [157])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 __len+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":587 81 {*movdi_internal}
     (nil))
(insn 153 152 155 9 (set (reg:DI 2 cx [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __new_start+0 S8 A64])) "/usr/include/c++/7/bits/vector.tcc":587 81 {*movdi_internal}
     (nil))
(insn 155 153 156 9 (set (reg:DI 4 si)
        (reg:DI 2 cx [158])) "/usr/include/c++/7/bits/vector.tcc":587 81 {*movdi_internal}
     (nil))
(insn 156 155 157 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:107 _21 ] [107])) "/usr/include/c++/7/bits/vector.tcc":587 81 {*movdi_internal}
     (nil))
(call_insn 157 156 158 9 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm") [flags 0x3]  <function_decl 0x7f4419482900 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":587 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 158 157 159 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 159 158 160 10 (call (mem:QI (symbol_ref:DI ("__cxa_rethrow") [flags 0x41]  <function_decl 0x7f44191f4300 __cxa_rethrow>) [0 __cxa_rethrow S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":588 655 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 160 159 175)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 13, flags: (RTL, MODIFIED)
;;  pred:       8 (ABNORMAL,ABNORMAL_CALL,EH)
;;              9 (ABNORMAL,ABNORMAL_CALL,EH)
;;              10 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 11 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125 159
(code_label/s 175 160 177 11 254 (nil) [1 uses])
(note 177 175 176 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 176 177 163 11 (set (reg:DI 3 bx [159])
        (reg:DI 0 ax)) 81 {*movdi_internal}
     (nil))
(call_insn 163 176 164 11 (call (mem:QI (symbol_ref:DI ("__cxa_end_catch") [flags 0x41]  <function_decl 0x7f441a89bd00 __cxa_end_catch>) [0 __cxa_end_catch S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/vector.tcc":583 655 {*call}
     (expr_list:REG_EH_REGION (const_int -3 [0xfffffffffffffffd])
        (nil))
    (nil))
(insn 164 163 165 11 (set (reg/f:DI 0 ax [orig:125 D.70500 ] [125])
        (reg:DI 3 bx [159])) 81 {*movdi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 D.70500 ] [125])) 81 {*movdi_internal}
     (nil))
(call_insn 166 165 167 11 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f441c511100 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 167 166 183)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL, MODIFIED)
;;  pred:       2
;;              4 [100.0%] 
;;              7 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 183 167 182 13 255 (nil) [3 uses])
(note 182 183 184 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 184 182 168 13 (const_int 0 [0]) "/usr/include/c++/7/bits/vector.tcc":600 684 {nop}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 168 184 169 12 247 (nil) [0 uses])
(note 169 168 185 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 185 169 0 NOTE_INSN_DELETED)

;; Function void std::vector<_Tp, _Alloc>::_M_erase_at_end(std::vector<_Tp, _Alloc>::pointer) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc, funcdef_no=3305, decl_uid=61246, cgraph_uid=1179, symbol_order=1201)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 5
   Insn 19: point = 1, n_alt = 3
   Insn 18: point = 2, n_alt = 3
   Insn 17: point = 3, n_alt = 0
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = -2
   Insn 14: point = 5, n_alt = -2
   Insn 13: point = 6, n_alt = 3
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 9, n_alt = 3
   Insn 10: point = 10, n_alt = -2
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 11, n_alt = -2
   Insn 7: point = 12, n_alt = 3
   Insn 3: point = 13, n_alt = 5
   Insn 2: point = 13, n_alt = 5
 r87: [11..12]
 r88: [5..10]
 r89: [4..7]
 r90: [8..9]
 r91: [3..6]
 r92: [0..2]
 r93: [0..1]
Compressing live ranges: from 13 to 8 - 61%
Ranges after the compression:
 r87: [6..7]
 r88: [2..5]
 r89: [2..3]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 17.


void std::vector<_Tp, _Alloc>::_M_erase_at_end(std::vector<_Tp, _Alloc>::pointer) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={7d,5u} r1={5d,2u} r2={4d,1u} r4={4d,2u} r5={5d,3u} r6={1d,9u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 199{172d,27u,0e} in 16{14 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":1511 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __pos+0 S8 A64])
        (reg:DI 4 si [ __pos ])) "/usr/include/c++/7/bits/stl_vector.h":1511 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1513 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 2 cx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 8 [0x8])) [3 this_4(D)->D.61366._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __pos+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_vector.h":1513 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPccEvT_S1_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419321500 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":1513 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1514 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 1 dx [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __pos+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1514 81 {*movdi_internal}
     (nil))
(insn 20 19 23 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 8 [0x8])) [3 this_4(D)->D.61366._M_impl._M_finish+0 S8 A64])
        (reg/f:DI 1 dx [93])) "/usr/include/c++/7/bits/stl_vector.h":1514 81 {*movdi_internal}
     (nil))
(insn 23 20 24 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":1515 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::begin() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt6vectorIcSaIcEE5beginEv, funcdef_no=3306, decl_uid=60861, cgraph_uid=1180, symbol_order=1202)

      Creating newreg=92
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=93
Removing SCRATCH in insn #20 (nop 3)
rescanning insn with uid = 20.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r92
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r93
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 22: point = 0, n_alt = 0
  BB 4
   Insn 25: point = 0, n_alt = -1
  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 1, n_alt = -2
   Insn 15: point = 2, n_alt = -2
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 0
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = -2
   Insn 8: point = 7, n_alt = 3
   Insn 7: point = 8, n_alt = 3
   Insn 4: point = 9, n_alt = 0
   Insn 2: point = 11, n_alt = 5
 r87: [6..8]
 r88: [3..4]
 r89: [1..2]
 r90: [5..7]
 r92: [9..10]
 r93: [0..0]
Compressing live ranges: from 11 to 9 - 81%
Ranges after the compression:
 r87: [5..6]
 r88: [3..4]
 r89: [1..2]
 r90: [5..6]
 r92: [7..8]
 r93: [0..0]

********** Assignment #1: **********

	 Assigning to 92 (cl=INDEX_REGS, orig=92, freq=1, tfirst=92, tfreq=1)...
	   Assign 0 to reload r92 (freq=1)
	 Assigning to 93 (cl=INDEX_REGS, orig=93, freq=1, tfirst=93, tfreq=1)...
	   Assign 2 to reload r93 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 8
changing reg in insn 10
changing reg in insn 4
changing reg in insn 20
deleting insn with uid = 15.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 22.


std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::begin() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={4d,1u} r2={4d} r4={4d,1u} r5={4d,2u} r6={1d,10u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 197{172d,25u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":563 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [9 D.70502+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":563 1002 {stack_tls_protect_set_di}
     (nil))
(insn 7 4 8 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":564 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [90])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":564 218 {*adddi_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":564 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_vector.h":564 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_") [flags 0x3]  <function_decl 0x7f44190b9200 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":564 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 12 11 20 2 (set (reg:DI 0 ax [orig:88 D.69542 ] [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [83 D.66720+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":564 81 {*movdi_internal}
     (nil))
(insn 20 12 21 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [9 D.70502+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [93]))
        ]) "/usr/include/c++/7/bits/stl_vector.h":564 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 21 20 27 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":564 617 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 27 21 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 22 27 23 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":564 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 24 23 28 4 259 (nil) [1 uses])
(note 28 24 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 28 29 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":564 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 29 25 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::reference __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*() const [with _Iterator = char*; _Container = std::vector<char, std::allocator<char> >] (_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv, funcdef_no=3307, decl_uid=65623, cgraph_uid=1181, symbol_order=1203)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::__normal_iterator<_Iterator, _Container>::reference __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*() const [with _Iterator = char*; _Container = std::vector<char, std::allocator<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [90 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_iterator.h":792 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [90 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":793 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [89]) [3 this_2(D)->_M_current+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":793 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_iterator.h":793 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_iterator.h":793 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm, funcdef_no=3308, decl_uid=60669, cgraph_uid=1182, symbol_order=1204)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 26: point = 0, n_alt = -1
  BB 3
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 2, n_alt = -2
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 9: point = 6, n_alt = -1
   Insn 8: point = 6, n_alt = 1
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [0..5]
 r88: [2..4]
 r89: [1..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,12u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{96d,28u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":179 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":179 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 13 12 15 3 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 15 13 16 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(call_insn 17 16 25 3 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm") [flags 0x3]  <function_decl 0x7f441b4d7800 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":180 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 17 24 5 264 (nil) [1 uses])
(note 24 25 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 20 5 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":181 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 26 21 4 262 (nil) [0 uses])
(note 21 20 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 21 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = char*] (_ZSt8_DestroyIPcEvT_S1_, funcdef_no=3309, decl_uid=65700, cgraph_uid=1183, symbol_order=1205)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 110{94d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_") [flags 0x3]  <function_decl 0x7f4419202300 __destroy>) [0 __destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":137 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 11 15 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":138 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::whitespace_pred::test(Ch) [with Ch = char] (_ZN8rapidxml12xml_documentIcE15whitespace_pred4testEc, funcdef_no=3310, decl_uid=65715, cgraph_uid=1184, symbol_order=1206)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::whitespace_pred::test(Ch) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1430 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1430 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1430 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.35_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1432 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.35_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1432 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1432 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE17lookup_whitespaceE") [flags 0x2]  <var_decl 0x7f441a7e52d0 lookup_whitespace>)) "libs/src/../include/rapidxml/rapidxml.hpp":1432 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_whitespace S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1432 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1433 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1433 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_element(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE13parse_elementILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3311, decl_uid=65722, cgraph_uid=1185, symbol_order=1207)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=151 from oldreg=92, assigning class GENERAL_REGS to r151
   51: {r151:DI=r151:DI-r93:DI;clobber flags:CC;}
      REG_DEAD r93:DI
      REG_DEAD r92:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  175: r151:DI=r92:DI
    Inserting insn reload after:
  176: r94:DI=r151:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 98:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 118:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 128:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 143:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 144:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 159:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 3
   Insn 42: point = 0, n_alt = 0
   Insn 41: point = 0, n_alt = -2
   Insn 40: point = 1, n_alt = 4
   Insn 39: point = 1, n_alt = 4
   Insn 38: point = 1, n_alt = 0
   Insn 37: point = 1, n_alt = -2
   Insn 36: point = 1, n_alt = 4
   Insn 35: point = 1, n_alt = -2
   Insn 34: point = 2, n_alt = 3
   Insn 33: point = 4, n_alt = 3
   Insn 32: point = 5, n_alt = -2
   Insn 31: point = 7, n_alt = -2
   Insn 30: point = 8, n_alt = 0
   Insn 29: point = 8, n_alt = 2
  BB 8
   Insn 120: point = 8, n_alt = 0
   Insn 119: point = 8, n_alt = -2
   Insn 118: point = 9, n_alt = 4
   Insn 117: point = 9, n_alt = 4
   Insn 116: point = 9, n_alt = 0
   Insn 115: point = 9, n_alt = -2
   Insn 114: point = 9, n_alt = 4
   Insn 113: point = 9, n_alt = -2
   Insn 112: point = 10, n_alt = 3
   Insn 111: point = 12, n_alt = 3
   Insn 110: point = 13, n_alt = -2
   Insn 109: point = 15, n_alt = -2
   Insn 108: point = 16, n_alt = 0
   Insn 107: point = 16, n_alt = 2
  BB 10
   Insn 146: point = 16, n_alt = 0
   Insn 145: point = 16, n_alt = -2
   Insn 144: point = 17, n_alt = 4
   Insn 143: point = 17, n_alt = 4
   Insn 142: point = 17, n_alt = 0
   Insn 141: point = 17, n_alt = -2
   Insn 140: point = 17, n_alt = 4
   Insn 139: point = 17, n_alt = -2
   Insn 138: point = 18, n_alt = 3
   Insn 137: point = 20, n_alt = 3
   Insn 136: point = 21, n_alt = -2
   Insn 135: point = 23, n_alt = -2
   Insn 134: point = 24, n_alt = 0
   Insn 133: point = 24, n_alt = 2
  BB 11
   Insn 168: point = 24, n_alt = -1
   Insn 167: point = 24, n_alt = -2
   Insn 163: point = 25, n_alt = -2
   Insn 160: point = 27, n_alt = 3
   Insn 159: point = 28, n_alt = 6
   Insn 158: point = 29, n_alt = 0
   Insn 157: point = 31, n_alt = -2
   Insn 156: point = 32, n_alt = 0
   Insn 155: point = 32, n_alt = -2
   Insn 154: point = 33, n_alt = 3
   Insn 153: point = 34, n_alt = -2
   Insn 152: point = 35, n_alt = 0
   Insn 151: point = 35, n_alt = -2
   Insn 150: point = 36, n_alt = 3
  BB 9
   Insn 172: point = 37, n_alt = -1
   Insn 128: point = 37, n_alt = 5
   Insn 127: point = 38, n_alt = 3
   Insn 126: point = 39, n_alt = 3
   Insn 125: point = 41, n_alt = 3
   Insn 124: point = 43, n_alt = 3
  BB 7
   Insn 105: point = 44, n_alt = -1
   Insn 104: point = 44, n_alt = 0
   Insn 103: point = 45, n_alt = 2
   Insn 102: point = 47, n_alt = 3
   Insn 101: point = 49, n_alt = 3
   Insn 100: point = 50, n_alt = 5
   Insn 99: point = 51, n_alt = 3
   Insn 98: point = 52, n_alt = 3
   Insn 97: point = 54, n_alt = 3
   Insn 96: point = 56, n_alt = 3
  BB 6
   Insn 94: point = 57, n_alt = -1
   Insn 93: point = 57, n_alt = 0
   Insn 92: point = 58, n_alt = 2
   Insn 91: point = 60, n_alt = 3
   Insn 90: point = 62, n_alt = 3
  BB 5
   Insn 170: point = 63, n_alt = -1
   Insn 85: point = 63, n_alt = 0
   Insn 84: point = 63, n_alt = -2
   Insn 83: point = 64, n_alt = -2
   Insn 82: point = 65, n_alt = -2
   Insn 81: point = 66, n_alt = 3
   Insn 80: point = 67, n_alt = 3
   Insn 79: point = 68, n_alt = 3
   Insn 78: point = 69, n_alt = 5
   Insn 77: point = 70, n_alt = 3
   Insn 76: point = 71, n_alt = 3
   Insn 75: point = 73, n_alt = 3
   Insn 74: point = 75, n_alt = 3
  BB 4
   Insn 72: point = 76, n_alt = -1
   Insn 71: point = 76, n_alt = 0
   Insn 70: point = 77, n_alt = 2
   Insn 69: point = 79, n_alt = 3
   Insn 68: point = 81, n_alt = 3
   Insn 67: point = 82, n_alt = 0
   Insn 66: point = 82, n_alt = -2
   Insn 65: point = 83, n_alt = -2
   Insn 64: point = 84, n_alt = -2
   Insn 63: point = 85, n_alt = 3
   Insn 62: point = 86, n_alt = 3
   Insn 61: point = 87, n_alt = 3
   Insn 60: point = 88, n_alt = 0
   Insn 59: point = 88, n_alt = -2
   Insn 58: point = 89, n_alt = 3
   Insn 57: point = 90, n_alt = 0
   Insn 56: point = 90, n_alt = -2
   Insn 55: point = 91, n_alt = -2
   Insn 54: point = 92, n_alt = -2
   Insn 53: point = 93, n_alt = 3
   Insn 52: point = 94, n_alt = -2
   Insn 176: point = 96, n_alt = -2
	Hard reg 1 is preferable by r151 with profit 1
   Insn 51: point = 98, n_alt = 0
   Insn 175: point = 99, n_alt = -2
	Hard reg 1 is preferable by r151 with profit 1
	Hard reg 2 is preferable by r151 with profit 1
   Insn 50: point = 101, n_alt = 3
   Insn 49: point = 102, n_alt = -2
   Insn 48: point = 104, n_alt = 3
   Insn 47: point = 106, n_alt = 3
   Insn 46: point = 107, n_alt = 3
  BB 2
   Insn 27: point = 108, n_alt = -1
   Insn 26: point = 108, n_alt = 0
   Insn 25: point = 109, n_alt = 3
   Insn 24: point = 111, n_alt = 3
   Insn 23: point = 112, n_alt = 0
   Insn 22: point = 112, n_alt = -2
   Insn 21: point = 113, n_alt = 3
   Insn 20: point = 114, n_alt = 5
   Insn 19: point = 115, n_alt = 3
   Insn 18: point = 117, n_alt = 3
   Insn 17: point = 118, n_alt = 5
   Insn 16: point = 119, n_alt = -2
   Insn 15: point = 120, n_alt = 0
   Insn 14: point = 120, n_alt = -2
   Insn 13: point = 121, n_alt = 0
   Insn 12: point = 121, n_alt = 2
   Insn 11: point = 121, n_alt = 2
   Insn 10: point = 121, n_alt = 2
   Insn 9: point = 121, n_alt = 2
   Insn 8: point = 121, n_alt = 0
   Insn 7: point = 123, n_alt = 3
   Insn 3: point = 124, n_alt = 5
   Insn 2: point = 124, n_alt = 5
 r87: [120..121]
 r88: [108..109]
 r89: [1..2]
 r90: [90..107]
 r91: [103..104]
 r92: [100..102]
 r93: [98..101]
 r94: [95..96]
 r95: [92..94]
 r96: [78..79]
 r97: [76..77]
 r98: [72..73]
 r99: [69..71]
 r100: [59..60]
 r101: [57..58]
 r102: [53..54]
 r103: [50..52]
 r104: [46..47]
 r105: [44..45]
 r106: [9..10]
 r107: [40..41]
 r108: [37..39]
 r109: [17..18]
 r110: [35..36]
 r111: [30..34]
 r112: [32..33]
 r113: [30..31]
 r114: [28..29]
 r115: [118..119]
 r116: [16..21]
 r117: [8..13]
 r118: [26..27]
 r119: [0..5]
 r120: [24..25]
 r121: [122..123]
 r122: [116..117]
 r123: [114..115]
 r124: [112..113]
 r125: [110..111]
 r126: [6..7]
 r127: [3..4]
 r128: [105..106]
 r129: [91..93]
 r130: [88..89]
 r131: [84..87]
 r132: [83..86]
 r133: [82..85]
 r134: [80..81]
 r135: [74..75]
 r136: [69..70]
 r137: [65..68]
 r138: [64..67]
 r139: [63..66]
 r140: [61..62]
 r141: [55..56]
 r142: [50..51]
 r143: [48..49]
 r144: [14..15]
 r145: [11..12]
 r146: [42..43]
 r147: [37..38]
 r148: [22..23]
 r149: [19..20]
 r151: [97..99]
Compressing live ranges: from 124 to 100 - 80%
Ranges after the compression:
 r87: [96..97]
 r88: [84..85]
 r89: [0..1]
 r90: [72..83]
 r91: [80..81]
 r92: [78..79]
 r93: [76..79]
 r94: [74..75]
 r95: [72..73]
 r96: [64..65]
 r97: [62..63]
 r98: [58..59]
 r99: [56..57]
 r100: [50..51]
 r101: [48..49]
 r102: [44..45]
 r103: [42..43]
 r104: [38..39]
 r105: [36..37]
 r106: [6..7]
 r107: [32..33]
 r108: [30..31]
 r109: [12..13]
 r110: [28..29]
 r111: [24..27]
 r112: [26..27]
 r113: [24..25]
 r114: [22..23]
 r115: [94..95]
 r116: [12..15]
 r117: [6..9]
 r118: [20..21]
 r119: [0..3]
 r120: [18..19]
 r121: [98..99]
 r122: [92..93]
 r123: [90..91]
 r124: [88..89]
 r125: [86..87]
 r126: [4..5]
 r127: [2..3]
 r128: [82..83]
 r129: [72..73]
 r130: [70..71]
 r131: [68..69]
 r132: [68..69]
 r133: [68..69]
 r134: [66..67]
 r135: [60..61]
 r136: [56..57]
 r137: [54..55]
 r138: [54..55]
 r139: [54..55]
 r140: [52..53]
 r141: [46..47]
 r142: [42..43]
 r143: [40..41]
 r144: [10..11]
 r145: [8..9]
 r146: [34..35]
 r147: [30..31]
 r148: [16..17]
 r149: [14..15]
 r151: [76..77]

********** Assignment #1: **********

	 Assigning to 151 (cl=GENERAL_REGS, orig=92, freq=3, tfirst=151, tfreq=3)...
	   Assign 2 to reload r151 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 14
changing reg in insn 25
changing reg in insn 26
changing reg in insn 34
changing reg in insn 35
changing reg in insn 46
changing reg in insn 56
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 112
changing reg in insn 113
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 138
changing reg in insn 139
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 16
changing reg in insn 17
changing reg in insn 136
changing reg in insn 145
changing reg in insn 141
changing reg in insn 110
changing reg in insn 119
changing reg in insn 115
changing reg in insn 160
changing reg in insn 163
changing reg in insn 32
changing reg in insn 41
changing reg in insn 37
changing reg in insn 163
changing reg in insn 167
changing reg in insn 7
changing reg in insn 8
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 62
changing reg in insn 65
changing reg in insn 63
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 80
changing reg in insn 83
changing reg in insn 81
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
deleting insn with uid = 16.
deleting insn with uid = 31.
deleting insn with uid = 175.
deleting insn with uid = 52.
deleting insn with uid = 54.
deleting insn with uid = 64.
deleting insn with uid = 82.
deleting insn with uid = 109.
deleting insn with uid = 135.
deleting insn with uid = 157.
deleting insn with uid = 163.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 156.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_element(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={58d,47u} r1={34d,16u} r2={24d,6u} r3={4d,7u} r4={28d,11u} r5={35d,18u} r6={1d,46u} r7={1d,28u} r8={17d} r9={17d} r10={17d} r11={17d} r12={17d} r13={17d} r14={17d} r15={17d} r17={27d,4u} r18={17d} r19={17d} r20={1d,1u,1e} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={19d,1u} r38={19d,1u} r39={17d} r40={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} r77={17d} r78={17d} r79={17d} r80={17d} 
;;    total ref usage 1534{1347d,186u,1e} in 131{114 regular + 17 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 115 121 122 123 124 125
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":2037 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":2037 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [121])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2040 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 37 r8)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 2 cx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 82 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE13allocate_nodeENS_9node_typeEPKcS4_mm") [flags 0x3]  <function_decl 0x7f441985f700 allocate_node>) [0 allocate_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2040 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])
        (reg/f:DI 0 ax [orig:115 _33 ] [115])) "libs/src/../include/rapidxml/rapidxml.hpp":2040 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2043 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [123])
        (mem/f:DI (reg/f:DI 0 ax [122]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2043 81 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 name+0 S8 A64])
        (reg/f:DI 0 ax [123])) "libs/src/../include/rapidxml/rapidxml.hpp":2043 81 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2044 81 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [124])) "libs/src/../include/rapidxml/rapidxml.hpp":2044 81 {*movdi_internal}
     (nil))
(call_insn 23 22 24 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_14node_name_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419202600 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2044 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 2 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2045 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [125]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2045 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 name+0 S8 A64])
            (reg/f:DI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":2045 8 {*cmpdi_1}
     (nil))
(jump_insn 27 26 28 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2045 617 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 119 126 127
(note 28 27 29 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 3 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(call_insn 30 29 32 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2046 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 30 33 3 (set (reg/f:DI 3 bx [orig:119 _59 ] [119])
        (reg/f:DI 0 ax [126])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [127]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f44189d0630 *.LC17>)) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:119 _59 ] [119])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(call_insn 38 37 39 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 39 38 40 3 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:119 _59 ] [119])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 81 {*movdi_internal}
     (nil))
(call_insn 42 41 43 3 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2046 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 43 42 44)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 94 95 96 97 128 129 130 131 132 133 134
(code_label 44 43 45 4 269 (nil) [1 uses])
(note 45 44 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 4 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 1 dx [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
        (mem/f:DI (reg/f:DI 1 dx [128]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 2 cx [orig:92 _6 ] [92])
        (reg/f:DI 1 dx [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 1 dx [orig:93 name.40_7 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 51 50 176 4 (parallel [
            (set (reg:DI 2 cx [orig:92 _6 ] [92])
                (minus:DI (reg:DI 2 cx [orig:92 _6 ] [92])
                    (reg:DI 1 dx [orig:93 name.40_7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2047 274 {*subdi_1}
     (nil))
(insn 176 51 53 4 (set (reg:DI 1 dx [orig:94 _8 ] [94])
        (reg:DI 2 cx [orig:92 _6 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 53 176 55 4 (set (reg:DI 2 cx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 55 53 56 4 (set (reg:DI 4 si)
        (reg:DI 2 cx [129])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 81 {*movdi_internal}
     (nil))
(call_insn 57 56 58 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKcm") [flags 0x3]  <function_decl 0x7f441984ae00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2047 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 58 57 59 4 (set (reg:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2050 81 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [130])) "libs/src/../include/rapidxml/rapidxml.hpp":2050 81 {*movdi_internal}
     (nil))
(call_insn 60 59 61 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2050 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 4 (set (reg:DI 1 dx [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 81 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DI 2 cx [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 81 {*movdi_internal}
     (nil))
(insn 63 62 65 4 (set (reg:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 81 {*movdi_internal}
     (nil))
(insn 65 63 66 4 (set (reg:DI 4 si)
        (reg:DI 2 cx [132])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 81 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [133])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 81 {*movdi_internal}
     (nil))
(call_insn 67 66 68 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE21parse_node_attributesILi0EEEvRPcPNS_8xml_nodeIcEE") [flags 0x3]  <function_decl 0x7f4419202700 parse_node_attributes>) [0 parse_node_attributes S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2053 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2056 81 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [134]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2056 81 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [0 *_10+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2056 84 {*movqi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":2056 5 {*cmpqi_1}
     (nil))
(jump_insn 72 71 73 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2056 617 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99 135 136 137 138 139
(note 73 72 74 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 5 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2058 81 {*movdi_internal}
     (nil))
(insn 75 74 76 5 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [135]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2058 81 {*movdi_internal}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg/f:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2058 218 {*adddi_1}
     (nil))
(insn 77 76 78 5 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2058 81 {*movdi_internal}
     (nil))
(insn 78 77 79 5 (set (mem/f:DI (reg/f:DI 0 ax [136]) [3 *text_35(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 _13 ] [99])) "libs/src/../include/rapidxml/rapidxml.hpp":2058 81 {*movdi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:DI 1 dx [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 81 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:DI 2 cx [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 81 {*movdi_internal}
     (nil))
(insn 81 80 83 5 (set (reg:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 81 {*movdi_internal}
     (nil))
(insn 83 81 84 5 (set (reg:DI 4 si)
        (reg:DI 2 cx [138])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 81 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 81 {*movdi_internal}
     (nil))
(call_insn 85 84 170 5 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE19parse_node_contentsILi0EEEvRPcPNS_8xml_nodeIcEE") [flags 0x3]  <function_decl 0x7f4419202800 parse_node_contents>) [0 parse_node_contents S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2059 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 170 85 171 5 (set (pc)
        (label_ref 148)) 649 {jump}
     (nil)
 -> 148)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 171 170 88)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 140
(code_label 88 171 89 6 270 (nil) [1 uses])
(note 89 88 90 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 6 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2061 81 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [140]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2061 81 {*movdi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:QI 0 ax [orig:101 _15 ] [101])
        (mem:QI (reg/f:DI 0 ax [orig:100 _14 ] [100]) [0 *_14+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2061 84 {*movqi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:101 _15 ] [101])
            (const_int 47 [0x2f]))) "libs/src/../include/rapidxml/rapidxml.hpp":2061 5 {*cmpqi_1}
     (nil))
(jump_insn 94 93 95 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2061 617 {*jcc_1}
     (nil)
 -> 131)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103 104 105 141 142 143
(note 95 94 96 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 7 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2063 81 {*movdi_internal}
     (nil))
(insn 97 96 98 7 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (reg/f:DI 0 ax [141]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2063 81 {*movdi_internal}
     (nil))
(insn 98 97 99 7 (parallel [
            (set (reg/f:DI 1 dx [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2063 218 {*adddi_1}
     (nil))
(insn 99 98 100 7 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2063 81 {*movdi_internal}
     (nil))
(insn 100 99 101 7 (set (mem/f:DI (reg/f:DI 0 ax [142]) [3 *text_35(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:103 _17 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":2063 81 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2064 81 {*movdi_internal}
     (nil))
(insn 102 101 103 7 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [143]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2064 81 {*movdi_internal}
     (nil))
(insn 103 102 104 7 (set (reg:QI 0 ax [orig:105 _19 ] [105])
        (mem:QI (reg/f:DI 0 ax [orig:104 _18 ] [104]) [0 *_18+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2064 84 {*movqi_internal}
     (nil))
(insn 104 103 105 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 _19 ] [105])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":2064 5 {*cmpqi_1}
     (nil))
(jump_insn 105 104 106 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2064 617 {*jcc_1}
     (nil)
 -> 122)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 117 144 145
(note 106 105 107 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 8 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(call_insn 108 107 110 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2065 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 110 108 111 8 (set (reg/f:DI 3 bx [orig:117 _48 ] [117])
        (reg/f:DI 0 ax [144])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 111 110 112 8 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 112 111 113 8 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [145]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 113 112 114 8 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:106 _20 ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f44189d06c0 *.LC18>)) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:117 _48 ] [117])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(call_insn 116 115 117 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 117 116 118 8 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 118 117 119 8 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:117 _48 ] [117])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 81 {*movdi_internal}
     (nil))
(call_insn 120 119 121 8 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2065 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 121 120 122)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 146 147
(code_label 122 121 123 9 273 (nil) [1 uses])
(note 123 122 124 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 9 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2066 81 {*movdi_internal}
     (nil))
(insn 125 124 126 9 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [146]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2066 81 {*movdi_internal}
     (nil))
(insn 126 125 127 9 (parallel [
            (set (reg/f:DI 1 dx [orig:108 _22 ] [108])
                (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2066 218 {*adddi_1}
     (nil))
(insn 127 126 128 9 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2066 81 {*movdi_internal}
     (nil))
(insn 128 127 172 9 (set (mem/f:DI (reg/f:DI 0 ax [147]) [3 *text_35(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:108 _22 ] [108])) "libs/src/../include/rapidxml/rapidxml.hpp":2066 81 {*movdi_internal}
     (nil))
(jump_insn 172 128 173 9 (set (pc)
        (label_ref 148)) 649 {jump}
     (nil)
 -> 148)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 173 172 131)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 116 148 149
(code_label 131 173 132 10 272 (nil) [1 uses])
(note 132 131 133 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 10 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(call_insn 134 133 136 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2069 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 136 134 137 10 (set (reg/f:DI 3 bx [orig:116 _42 ] [116])
        (reg/f:DI 0 ax [148])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 137 136 138 10 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 138 137 139 10 (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [149]) [3 *text_35(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 139 138 140 10 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:109 _23 ] [109])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 140 139 141 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f44189d06c0 *.LC18>)) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 141 140 142 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:116 _42 ] [116])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(call_insn 142 141 143 10 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 143 142 144 10 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 144 143 145 10 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(insn 145 144 146 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:116 _42 ] [116])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 81 {*movdi_internal}
     (nil))
(call_insn 146 145 147 10 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2069 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 148)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111 112 113 114 118 120
(code_label 148 147 149 11 271 (nil) [2 uses])
(note 149 148 150 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 11 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2073 81 {*movdi_internal}
     (nil))
(insn 151 150 152 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:110 _24 ] [110])) "libs/src/../include/rapidxml/rapidxml.hpp":2073 81 {*movdi_internal}
     (nil))
(call_insn 152 151 153 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE4nameEv") [flags 0x3]  <function_decl 0x7f441984aa00 name>) [0 name S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2073 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 11 (set (reg/f:DI 3 bx [orig:111 _25 ] [111])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2073 81 {*movdi_internal}
     (nil))
(insn 154 153 155 11 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2073 81 {*movdi_internal}
     (nil))
(insn 155 154 156 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:112 _26 ] [112])) "libs/src/../include/rapidxml/rapidxml.hpp":2073 81 {*movdi_internal}
     (nil))
(call_insn 156 155 158 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE9name_sizeEv") [flags 0x3]  <function_decl 0x7f441984ab00 name_size>) [0 name_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2073 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 158 156 159 11 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (plus:DI (reg:DI 0 ax [orig:113 _27 ] [113])
                    (reg/f:DI 3 bx [orig:111 _25 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2073 218 {*adddi_1}
     (nil))
(insn 159 158 160 11 (set (mem:QI (reg/f:DI 0 ax [orig:114 _28 ] [114]) [0 *_28+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2073 84 {*movqi_internal}
     (nil))
(insn 160 159 167 11 (set (reg/f:DI 0 ax [orig:118 _57 ] [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [51 element+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2076 81 {*movdi_internal}
     (nil))
(insn 167 160 168 11 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:120 <retval> ] [120])) "libs/src/../include/rapidxml/rapidxml.hpp":2077 81 {*movdi_internal}
     (nil))
(insn 168 167 174 11 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2077 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 174 168 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_xml_declaration(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE21parse_xml_declarationILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3312, decl_uid=65726, cgraph_uid=1186, symbol_order=1208)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 46:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 56:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 6
   Insn 40: point = 0, n_alt = 0
   Insn 39: point = 0, n_alt = -2
   Insn 38: point = 1, n_alt = 4
   Insn 37: point = 1, n_alt = 4
   Insn 36: point = 1, n_alt = 0
   Insn 35: point = 1, n_alt = -2
   Insn 34: point = 1, n_alt = 4
   Insn 33: point = 1, n_alt = -2
   Insn 32: point = 2, n_alt = 3
   Insn 31: point = 4, n_alt = 3
   Insn 30: point = 5, n_alt = -2
   Insn 29: point = 7, n_alt = -2
   Insn 28: point = 8, n_alt = 0
   Insn 27: point = 8, n_alt = 2
  BB 8
   Insn 67: point = 8, n_alt = -1
   Insn 66: point = 8, n_alt = -2
   Insn 62: point = 9, n_alt = -2
   Insn 59: point = 11, n_alt = 2
   Insn 58: point = 12, n_alt = 5
   Insn 57: point = 13, n_alt = 3
   Insn 56: point = 14, n_alt = 3
   Insn 55: point = 16, n_alt = 3
   Insn 54: point = 18, n_alt = 3
  BB 4
   Insn 18: point = 19, n_alt = -1
   Insn 17: point = 19, n_alt = 0
   Insn 16: point = 20, n_alt = 2
   Insn 15: point = 22, n_alt = 0
   Insn 14: point = 24, n_alt = 3
   Insn 13: point = 26, n_alt = 3
  BB 3
   Insn 11: point = 27, n_alt = -1
   Insn 10: point = 27, n_alt = 0
   Insn 9: point = 28, n_alt = 2
   Insn 8: point = 30, n_alt = 3
   Insn 7: point = 32, n_alt = 3
  BB 7
   Insn 69: point = 33, n_alt = -1
   Insn 48: point = 33, n_alt = 5
   Insn 47: point = 34, n_alt = 3
   Insn 46: point = 35, n_alt = 3
   Insn 45: point = 37, n_alt = 3
   Insn 44: point = 39, n_alt = 3
  BB 5
   Insn 25: point = 40, n_alt = -1
   Insn 24: point = 40, n_alt = 0
   Insn 23: point = 41, n_alt = 2
   Insn 22: point = 43, n_alt = 3
   Insn 21: point = 45, n_alt = 3
  BB 2
   Insn 3: point = 46, n_alt = 5
   Insn 2: point = 46, n_alt = 5
 r87: [29..30]
 r88: [27..28]
 r89: [23..24]
 r90: [21..22]
 r91: [19..20]
 r92: [42..43]
 r93: [40..41]
 r94: [1..2]
 r95: [36..37]
 r96: [33..35]
 r97: [15..16]
 r98: [12..14]
 r99: [10..11]
 r100: [0..5]
 r101: [8..9]
 r102: [31..32]
 r103: [25..26]
 r104: [44..45]
 r105: [6..7]
 r106: [3..4]
 r107: [38..39]
 r108: [33..34]
 r109: [17..18]
 r110: [12..13]
Compressing live ranges: from 46 to 42 - 91%
Ranges after the compression:
 r87: [26..27]
 r88: [24..25]
 r89: [20..21]
 r90: [18..19]
 r91: [16..17]
 r92: [38..39]
 r93: [36..37]
 r94: [0..1]
 r95: [32..33]
 r96: [30..31]
 r97: [12..13]
 r98: [10..11]
 r99: [8..9]
 r100: [0..3]
 r101: [6..7]
 r102: [28..29]
 r103: [22..23]
 r104: [40..41]
 r105: [4..5]
 r106: [2..3]
 r107: [34..35]
 r108: [30..31]
 r109: [14..15]
 r110: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 32
changing reg in insn 33
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 30
changing reg in insn 39
changing reg in insn 35
changing reg in insn 62
changing reg in insn 66
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
deleting insn with uid = 29.
deleting insn with uid = 62.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 40.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_xml_declaration(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={24d,22u} r1={8d,4u} r2={4d} r3={1d,2u} r4={6d,3u} r5={7d,4u} r6={1d,18u} r7={1d,11u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 338{270d,68u,0e} in 45{42 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1738 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1738 81 {*movdi_internal}
     (nil))
(note 4 3 49 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 102
(code_label 49 4 6 3 279 (nil) [1 uses])
(note 6 49 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 81 {*movdi_internal}
     (nil))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [102]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 84 {*movqi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _2 ] [88])
            (const_int 63 [0x3f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1744 5 {*cmpqi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1744 617 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 103
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 81 {*movdi_internal}
     (nil))
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [103]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 81 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1744 218 {*adddi_1}
     (nil))
(insn 16 15 17 4 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [0 *_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1744 84 {*movqi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":1744 5 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1744 617 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       8
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 104
(code_label 19 18 20 5 276 (nil) [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1746 81 {*movdi_internal}
     (nil))
(insn 22 21 23 5 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [104]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1746 81 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [0 *_6+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1746 84 {*movqi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 _7 ] [93])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1746 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1746 617 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 100 105 106
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(call_insn 28 27 30 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1747 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 28 31 6 (set (reg/f:DI 3 bx [orig:100 _20 ] [100])
        (reg/f:DI 0 ax [105])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [106]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:94 _8 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:100 _20 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(call_insn 36 35 37 6 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 6 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:100 _20 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 81 {*movdi_internal}
     (nil))
(call_insn 40 39 41 6 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1747 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 41 40 42)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 107 108
(code_label 42 41 43 7 278 (nil) [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1748 81 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [107]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1748 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg/f:DI 1 dx [orig:96 _10 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1748 218 {*adddi_1}
     (nil))
(insn 47 46 48 7 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1748 81 {*movdi_internal}
     (nil))
(insn 48 47 69 7 (set (mem/f:DI (reg/f:DI 0 ax [108]) [3 *text_15(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:96 _10 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1748 81 {*movdi_internal}
     (nil))
(jump_insn 69 48 70 7 (set (pc)
        (label_ref 49)) "libs/src/../include/rapidxml/rapidxml.hpp":1744 649 {jump}
     (nil)
 -> 49)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 70 69 52)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 97 98 99 101 109 110
(code_label 52 70 53 8 277 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1750 81 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [109]) [3 *text_15(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1750 81 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg/f:DI 1 dx [orig:98 _12 ] [98])
                (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1750 218 {*adddi_1}
     (nil))
(insn 57 56 58 8 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1750 81 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (mem/f:DI (reg/f:DI 0 ax [110]) [3 *text_15(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:98 _12 ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":1750 81 {*movdi_internal}
     (nil))
(insn 59 58 66 8 (set (reg/f:DI 0 ax [orig:99 _17 ] [99])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1751 81 {*movdi_internal}
     (nil))
(insn 66 59 67 8 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:101 <retval> ] [101])) "libs/src/../include/rapidxml/rapidxml.hpp":1769 81 {*movdi_internal}
     (nil))
(insn 67 66 71 8 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1769 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 71 67 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_pi(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE8parse_piILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3313, decl_uid=65729, cgraph_uid=1187, symbol_order=1209)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 57:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 6
   Insn 41: point = 0, n_alt = 0
   Insn 40: point = 0, n_alt = -2
   Insn 39: point = 1, n_alt = 4
   Insn 38: point = 1, n_alt = 4
   Insn 37: point = 1, n_alt = 0
   Insn 36: point = 1, n_alt = -2
   Insn 35: point = 1, n_alt = 4
   Insn 34: point = 1, n_alt = -2
   Insn 33: point = 2, n_alt = 3
   Insn 32: point = 4, n_alt = 3
   Insn 31: point = 5, n_alt = -2
   Insn 30: point = 7, n_alt = -2
   Insn 29: point = 8, n_alt = 0
   Insn 28: point = 8, n_alt = 2
  BB 8
   Insn 68: point = 8, n_alt = -1
   Insn 67: point = 8, n_alt = -2
   Insn 63: point = 9, n_alt = -2
   Insn 60: point = 11, n_alt = 2
   Insn 59: point = 12, n_alt = 5
   Insn 58: point = 13, n_alt = 3
   Insn 57: point = 14, n_alt = 3
   Insn 56: point = 16, n_alt = 3
   Insn 55: point = 18, n_alt = 3
  BB 4
   Insn 19: point = 19, n_alt = -1
   Insn 18: point = 19, n_alt = 0
   Insn 17: point = 20, n_alt = 2
   Insn 16: point = 22, n_alt = 0
   Insn 15: point = 24, n_alt = 3
   Insn 14: point = 26, n_alt = 3
  BB 3
   Insn 12: point = 27, n_alt = -1
   Insn 11: point = 27, n_alt = 0
   Insn 10: point = 28, n_alt = 2
   Insn 9: point = 30, n_alt = 3
   Insn 8: point = 32, n_alt = 3
  BB 7
   Insn 70: point = 33, n_alt = -1
   Insn 49: point = 33, n_alt = 5
   Insn 48: point = 34, n_alt = 3
   Insn 47: point = 35, n_alt = 3
   Insn 46: point = 37, n_alt = 3
   Insn 45: point = 39, n_alt = 3
  BB 5
   Insn 26: point = 40, n_alt = -1
   Insn 25: point = 40, n_alt = 0
   Insn 24: point = 41, n_alt = 2
   Insn 23: point = 43, n_alt = 3
   Insn 22: point = 45, n_alt = 3
  BB 2
   Insn 3: point = 46, n_alt = 5
   Insn 2: point = 46, n_alt = 5
 r87: [10..11]
 r88: [0..5]
 r89: [29..30]
 r90: [27..28]
 r91: [23..24]
 r92: [21..22]
 r93: [19..20]
 r94: [42..43]
 r95: [40..41]
 r96: [1..2]
 r97: [36..37]
 r98: [33..35]
 r99: [15..16]
 r100: [12..14]
 r101: [8..9]
 r102: [31..32]
 r103: [25..26]
 r104: [44..45]
 r105: [6..7]
 r106: [3..4]
 r107: [38..39]
 r108: [33..34]
 r109: [17..18]
 r110: [12..13]
Compressing live ranges: from 46 to 42 - 91%
Ranges after the compression:
 r87: [8..9]
 r88: [0..3]
 r89: [26..27]
 r90: [24..25]
 r91: [20..21]
 r92: [18..19]
 r93: [16..17]
 r94: [38..39]
 r95: [36..37]
 r96: [0..1]
 r97: [32..33]
 r98: [30..31]
 r99: [12..13]
 r100: [10..11]
 r101: [6..7]
 r102: [28..29]
 r103: [22..23]
 r104: [40..41]
 r105: [4..5]
 r106: [2..3]
 r107: [34..35]
 r108: [30..31]
 r109: [14..15]
 r110: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 60
changing reg in insn 63
changing reg in insn 31
changing reg in insn 40
changing reg in insn 36
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 33
changing reg in insn 34
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 63
changing reg in insn 67
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
deleting insn with uid = 30.
deleting insn with uid = 63.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 41.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_pi(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={24d,22u} r1={8d,4u} r2={4d} r3={1d,2u} r4={6d,3u} r5={7d,4u} r6={1d,18u} r7={1d,11u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 338{270d,68u,0e} in 45{42 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1880 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1880 81 {*movdi_internal}
     (nil))
(note 4 3 50 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 102
(code_label 50 4 7 3 285 (nil) [1 uses])
(note 7 50 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg/f:DI 0 ax [orig:89 _11 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [102]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 81 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:90 _12 ] [90])
        (mem:QI (reg/f:DI 0 ax [orig:89 _11 ] [89]) [0 *_11+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 84 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 _12 ] [90])
            (const_int 63 [0x3f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1925 5 {*cmpqi_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1925 617 {*jcc_1}
     (nil)
 -> 20)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 103
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 81 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg/f:DI 0 ax [orig:91 _13 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [103]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 81 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _14 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:91 _13 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1925 218 {*adddi_1}
     (nil))
(insn 17 16 18 4 (set (reg:QI 0 ax [orig:93 _15 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 _14 ] [92]) [0 *_14+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1925 84 {*movqi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 _15 ] [93])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":1925 5 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1925 617 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       8
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 104
(code_label 20 19 21 5 282 (nil) [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1927 81 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg/f:DI 0 ax [orig:94 _16 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [104]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1927 81 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:QI 0 ax [orig:95 _17 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _16 ] [94]) [0 *_16+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1927 84 {*movqi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _17 ] [95])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1927 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1927 617 {*jcc_1}
     (nil)
 -> 43)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 96 105 106
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(call_insn 29 28 31 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1928 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 29 32 6 (set (reg/f:DI 3 bx [orig:88 _9 ] [88])
        (reg/f:DI 0 ax [105])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 33 32 34 6 (set (reg/f:DI 0 ax [orig:96 _18 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [106]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:96 _18 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:88 _9 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(call_insn 37 36 38 6 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 38 37 39 6 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:88 _9 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 81 {*movdi_internal}
     (nil))
(call_insn 41 40 42 6 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1928 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 42 41 43)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 107 108
(code_label 43 42 44 7 284 (nil) [1 uses])
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1929 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg/f:DI 0 ax [orig:97 _19 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [107]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1929 81 {*movdi_internal}
     (nil))
(insn 47 46 48 7 (parallel [
            (set (reg/f:DI 1 dx [orig:98 _20 ] [98])
                (plus:DI (reg/f:DI 0 ax [orig:97 _19 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1929 218 {*adddi_1}
     (nil))
(insn 48 47 49 7 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1929 81 {*movdi_internal}
     (nil))
(insn 49 48 70 7 (set (mem/f:DI (reg/f:DI 0 ax [108]) [3 *text_4(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:98 _20 ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":1929 81 {*movdi_internal}
     (nil))
(jump_insn 70 49 71 7 (set (pc)
        (label_ref 50)) "libs/src/../include/rapidxml/rapidxml.hpp":1925 649 {jump}
     (nil)
 -> 50)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 53)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 99 100 101 109 110
(code_label 53 71 54 8 283 (nil) [1 uses])
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1931 81 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg/f:DI 0 ax [orig:99 _21 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [109]) [3 *text_4(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1931 81 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (parallel [
            (set (reg/f:DI 1 dx [orig:100 _22 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:99 _21 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1931 218 {*adddi_1}
     (nil))
(insn 58 57 59 8 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1931 81 {*movdi_internal}
     (nil))
(insn 59 58 60 8 (set (mem/f:DI (reg/f:DI 0 ax [110]) [3 *text_4(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:100 _22 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1931 81 {*movdi_internal}
     (nil))
(insn 60 59 67 8 (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1932 81 {*movdi_internal}
     (nil))
(insn 67 60 68 8 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:101 <retval> ] [101])) "libs/src/../include/rapidxml/rapidxml.hpp":1934 81 {*movdi_internal}
     (nil))
(insn 68 67 72 8 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1934 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 72 68 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_comment(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE13parse_commentILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3314, decl_uid=65734, cgraph_uid=1188, symbol_order=1210)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 63:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 65:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 7
   Insn 47: point = 0, n_alt = 0
   Insn 46: point = 0, n_alt = -2
   Insn 45: point = 1, n_alt = 4
   Insn 44: point = 1, n_alt = 4
   Insn 43: point = 1, n_alt = 0
   Insn 42: point = 1, n_alt = -2
   Insn 41: point = 1, n_alt = 4
   Insn 40: point = 1, n_alt = -2
   Insn 39: point = 2, n_alt = 3
   Insn 38: point = 4, n_alt = 3
   Insn 37: point = 5, n_alt = -2
   Insn 36: point = 7, n_alt = -2
   Insn 35: point = 8, n_alt = 0
   Insn 34: point = 8, n_alt = 2
  BB 9
   Insn 74: point = 8, n_alt = -1
   Insn 73: point = 8, n_alt = -2
   Insn 69: point = 9, n_alt = -2
   Insn 66: point = 11, n_alt = 2
   Insn 65: point = 12, n_alt = 5
   Insn 64: point = 13, n_alt = 3
   Insn 63: point = 14, n_alt = 3
   Insn 62: point = 16, n_alt = 3
   Insn 61: point = 18, n_alt = 3
  BB 5
   Insn 25: point = 19, n_alt = -1
   Insn 24: point = 19, n_alt = 0
   Insn 23: point = 20, n_alt = 2
   Insn 22: point = 22, n_alt = 0
   Insn 21: point = 24, n_alt = 3
   Insn 20: point = 26, n_alt = 3
  BB 4
   Insn 18: point = 27, n_alt = -1
   Insn 17: point = 27, n_alt = 0
   Insn 16: point = 28, n_alt = 2
   Insn 15: point = 30, n_alt = 0
   Insn 14: point = 32, n_alt = 3
   Insn 13: point = 34, n_alt = 3
  BB 3
   Insn 11: point = 35, n_alt = -1
   Insn 10: point = 35, n_alt = 0
   Insn 9: point = 36, n_alt = 2
   Insn 8: point = 38, n_alt = 3
   Insn 7: point = 40, n_alt = 3
  BB 8
   Insn 76: point = 41, n_alt = -1
   Insn 55: point = 41, n_alt = 5
   Insn 54: point = 42, n_alt = 3
   Insn 53: point = 43, n_alt = 3
   Insn 52: point = 45, n_alt = 3
   Insn 51: point = 47, n_alt = 3
  BB 6
   Insn 32: point = 48, n_alt = -1
   Insn 31: point = 48, n_alt = 0
   Insn 30: point = 49, n_alt = 2
   Insn 29: point = 51, n_alt = 3
   Insn 28: point = 53, n_alt = 3
  BB 2
   Insn 3: point = 54, n_alt = 5
   Insn 2: point = 54, n_alt = 5
 r87: [37..38]
 r88: [35..36]
 r89: [31..32]
 r90: [29..30]
 r91: [27..28]
 r92: [23..24]
 r93: [21..22]
 r94: [19..20]
 r95: [50..51]
 r96: [48..49]
 r97: [1..2]
 r98: [44..45]
 r99: [41..43]
 r100: [15..16]
 r101: [12..14]
 r102: [10..11]
 r103: [0..5]
 r104: [8..9]
 r105: [39..40]
 r106: [33..34]
 r107: [25..26]
 r108: [52..53]
 r109: [6..7]
 r110: [3..4]
 r111: [46..47]
 r112: [41..42]
 r113: [17..18]
 r114: [12..13]
Compressing live ranges: from 54 to 50 - 92%
Ranges after the compression:
 r87: [34..35]
 r88: [32..33]
 r89: [28..29]
 r90: [26..27]
 r91: [24..25]
 r92: [20..21]
 r93: [18..19]
 r94: [16..17]
 r95: [46..47]
 r96: [44..45]
 r97: [0..1]
 r98: [40..41]
 r99: [38..39]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [0..3]
 r104: [6..7]
 r105: [36..37]
 r106: [30..31]
 r107: [22..23]
 r108: [48..49]
 r109: [4..5]
 r110: [2..3]
 r111: [42..43]
 r112: [38..39]
 r113: [14..15]
 r114: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 37
changing reg in insn 46
changing reg in insn 42
changing reg in insn 69
changing reg in insn 73
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
deleting insn with uid = 36.
deleting insn with uid = 69.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 47.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_comment(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={28d,26u} r1={8d,4u} r2={4d} r3={1d,2u} r4={6d,3u} r5={7d,4u} r6={1d,20u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 352{276d,76u,0e} in 51{48 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1773 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1773 81 {*movdi_internal}
     (nil))
(note 4 3 56 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 105
(code_label 56 4 6 3 291 (nil) [1 uses])
(note 6 56 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [105]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 84 {*movqi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _2 ] [88])
            (const_int 45 [0x2d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 5 {*cmpqi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 106
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [106]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1779 218 {*adddi_1}
     (nil))
(insn 16 15 17 4 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [0 *_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 84 {*movqi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int 45 [0x2d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 5 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 107
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [107]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 81 {*movdi_internal}
     (nil))
(insn 22 21 23 5 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1779 218 {*adddi_1}
     (nil))
(insn 23 22 24 5 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [0 *_7+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1779 84 {*movqi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 _8 ] [94])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 5 {*cmpqi_1}
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1779 617 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 108
(code_label 26 25 27 6 288 (nil) [2 uses])
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1781 81 {*movdi_internal}
     (nil))
(insn 29 28 30 6 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [108]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1781 81 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:QI 0 ax [orig:96 _10 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 _9 ] [95]) [0 *_9+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1781 84 {*movqi_internal}
     (nil))
(insn 31 30 32 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 _10 ] [96])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1781 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 32 31 33 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1781 617 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 103 109 110
(note 33 32 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 7 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(call_insn 35 34 37 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1782 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 35 38 7 (set (reg/f:DI 3 bx [orig:103 _23 ] [103])
        (reg/f:DI 0 ax [109])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 39 38 40 7 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [110]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 40 39 41 7 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:97 _11 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:103 _23 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(call_insn 43 42 44 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 44 43 45 7 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:103 _23 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 7 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1782 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 49)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 111 112
(code_label 49 48 50 8 290 (nil) [1 uses])
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1783 81 {*movdi_internal}
     (nil))
(insn 52 51 53 8 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [111]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1783 81 {*movdi_internal}
     (nil))
(insn 53 52 54 8 (parallel [
            (set (reg/f:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1783 218 {*adddi_1}
     (nil))
(insn 54 53 55 8 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1783 81 {*movdi_internal}
     (nil))
(insn 55 54 76 8 (set (mem/f:DI (reg/f:DI 0 ax [112]) [3 *text_18(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 _13 ] [99])) "libs/src/../include/rapidxml/rapidxml.hpp":1783 81 {*movdi_internal}
     (nil))
(jump_insn 76 55 77 8 (set (pc)
        (label_ref 56)) "libs/src/../include/rapidxml/rapidxml.hpp":1779 649 {jump}
     (nil)
 -> 56)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 77 76 59)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 100 101 102 104 113 114
(code_label 59 77 60 9 289 (nil) [1 uses])
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 9 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1785 81 {*movdi_internal}
     (nil))
(insn 62 61 63 9 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [113]) [3 *text_18(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1785 81 {*movdi_internal}
     (nil))
(insn 63 62 64 9 (parallel [
            (set (reg/f:DI 1 dx [orig:101 _15 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 _14 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1785 218 {*adddi_1}
     (nil))
(insn 64 63 65 9 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1785 81 {*movdi_internal}
     (nil))
(insn 65 64 66 9 (set (mem/f:DI (reg/f:DI 0 ax [114]) [3 *text_18(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:101 _15 ] [101])) "libs/src/../include/rapidxml/rapidxml.hpp":1785 81 {*movdi_internal}
     (nil))
(insn 66 65 73 9 (set (reg/f:DI 0 ax [orig:102 _20 ] [102])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1786 81 {*movdi_internal}
     (nil))
(insn 73 66 74 9 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:104 <retval> ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1810 81 {*movdi_internal}
     (nil))
(insn 74 73 78 9 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1810 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 78 74 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_cdata(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE11parse_cdataILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3315, decl_uid=65738, cgraph_uid=1189, symbol_order=1211)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=131 from oldreg=106, assigning class GENERAL_REGS to r131
   82: {r131:DI=r131:DI-r107:DI;clobber flags:CC;}
      REG_DEAD r107:DI
      REG_DEAD r106:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  110: r131:DI=r106:DI
    Inserting insn reload after:
  111: r108:DI=r131:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 91:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 7
   Insn 52: point = 0, n_alt = 0
   Insn 51: point = 0, n_alt = -2
   Insn 50: point = 1, n_alt = 4
   Insn 49: point = 1, n_alt = 4
   Insn 48: point = 1, n_alt = 0
   Insn 47: point = 1, n_alt = -2
   Insn 46: point = 1, n_alt = 4
   Insn 45: point = 1, n_alt = -2
   Insn 44: point = 2, n_alt = 3
   Insn 43: point = 4, n_alt = 3
   Insn 42: point = 5, n_alt = -2
   Insn 41: point = 7, n_alt = -2
   Insn 40: point = 8, n_alt = 0
   Insn 39: point = 8, n_alt = 2
  BB 9
   Insn 105: point = 8, n_alt = -1
   Insn 104: point = 8, n_alt = -2
   Insn 100: point = 9, n_alt = -2
   Insn 97: point = 11, n_alt = 3
   Insn 96: point = 12, n_alt = 5
   Insn 95: point = 13, n_alt = 3
   Insn 94: point = 14, n_alt = 3
   Insn 93: point = 16, n_alt = 3
   Insn 92: point = 18, n_alt = 3
   Insn 91: point = 19, n_alt = 6
   Insn 90: point = 20, n_alt = 3
   Insn 89: point = 22, n_alt = 3
   Insn 88: point = 23, n_alt = 0
   Insn 87: point = 23, n_alt = -2
   Insn 86: point = 24, n_alt = -2
   Insn 85: point = 25, n_alt = -2
   Insn 84: point = 26, n_alt = 3
   Insn 83: point = 27, n_alt = -2
   Insn 111: point = 29, n_alt = -2
	Hard reg 1 is preferable by r131 with profit 1
   Insn 82: point = 31, n_alt = 0
   Insn 110: point = 32, n_alt = -2
	Hard reg 1 is preferable by r131 with profit 1
	Hard reg 2 is preferable by r131 with profit 1
   Insn 81: point = 34, n_alt = 3
   Insn 80: point = 35, n_alt = -2
   Insn 79: point = 37, n_alt = 3
   Insn 78: point = 39, n_alt = 3
   Insn 77: point = 40, n_alt = 3
   Insn 76: point = 41, n_alt = 5
   Insn 75: point = 42, n_alt = -2
   Insn 74: point = 43, n_alt = 0
   Insn 73: point = 43, n_alt = -2
   Insn 72: point = 44, n_alt = 0
   Insn 71: point = 44, n_alt = 2
   Insn 70: point = 44, n_alt = 2
   Insn 69: point = 44, n_alt = 2
   Insn 68: point = 44, n_alt = 2
   Insn 67: point = 44, n_alt = 0
   Insn 66: point = 46, n_alt = 3
  BB 5
   Insn 30: point = 47, n_alt = -1
   Insn 29: point = 47, n_alt = 0
   Insn 28: point = 48, n_alt = 2
   Insn 27: point = 50, n_alt = 0
   Insn 26: point = 52, n_alt = 3
   Insn 25: point = 54, n_alt = 3
  BB 4
   Insn 23: point = 55, n_alt = -1
   Insn 22: point = 55, n_alt = 0
   Insn 21: point = 56, n_alt = 2
   Insn 20: point = 58, n_alt = 0
   Insn 19: point = 60, n_alt = 3
   Insn 18: point = 62, n_alt = 3
  BB 3
   Insn 16: point = 63, n_alt = -1
   Insn 15: point = 63, n_alt = 0
   Insn 14: point = 64, n_alt = 2
   Insn 13: point = 66, n_alt = 3
   Insn 12: point = 68, n_alt = 3
  BB 8
   Insn 107: point = 69, n_alt = -1
   Insn 60: point = 69, n_alt = 5
   Insn 59: point = 70, n_alt = 3
   Insn 58: point = 71, n_alt = 3
   Insn 57: point = 73, n_alt = 3
   Insn 56: point = 75, n_alt = 3
  BB 6
   Insn 37: point = 76, n_alt = -1
   Insn 36: point = 76, n_alt = 0
   Insn 35: point = 77, n_alt = 2
   Insn 34: point = 79, n_alt = 3
   Insn 33: point = 81, n_alt = 3
  BB 2
   Insn 10: point = 82, n_alt = 5
   Insn 9: point = 83, n_alt = 3
   Insn 8: point = 85, n_alt = 3
   Insn 3: point = 86, n_alt = 5
   Insn 2: point = 86, n_alt = 5
 r87: [41..42]
 r88: [10..11]
 r89: [0..5]
 r90: [65..66]
 r91: [63..64]
 r92: [59..60]
 r93: [57..58]
 r94: [55..56]
 r95: [51..52]
 r96: [49..50]
 r97: [47..48]
 r98: [78..79]
 r99: [76..77]
 r100: [1..2]
 r101: [72..73]
 r102: [69..71]
 r103: [43..44]
 r104: [23..40]
 r105: [36..37]
 r106: [33..35]
 r107: [31..34]
 r108: [28..29]
 r109: [25..27]
 r110: [19..20]
 r111: [15..16]
 r112: [12..14]
 r113: [8..9]
 r114: [84..85]
 r115: [82..83]
 r116: [67..68]
 r117: [61..62]
 r118: [53..54]
 r119: [80..81]
 r120: [6..7]
 r121: [3..4]
 r122: [74..75]
 r123: [69..70]
 r124: [45..46]
 r125: [38..39]
 r126: [24..26]
 r127: [21..22]
 r128: [17..18]
 r129: [12..13]
 r131: [30..32]
Compressing live ranges: from 86 to 76 - 88%
Ranges after the compression:
 r87: [32..33]
 r88: [8..9]
 r89: [0..3]
 r90: [56..57]
 r91: [54..55]
 r92: [50..51]
 r93: [48..49]
 r94: [46..47]
 r95: [42..43]
 r96: [40..41]
 r97: [38..39]
 r98: [68..69]
 r99: [66..67]
 r100: [0..1]
 r101: [62..63]
 r102: [60..61]
 r103: [34..35]
 r104: [20..31]
 r105: [28..29]
 r106: [26..27]
 r107: [24..27]
 r108: [22..23]
 r109: [20..21]
 r110: [16..17]
 r111: [12..13]
 r112: [10..11]
 r113: [6..7]
 r114: [74..75]
 r115: [72..73]
 r116: [58..59]
 r117: [52..53]
 r118: [44..45]
 r119: [70..71]
 r120: [4..5]
 r121: [2..3]
 r122: [64..65]
 r123: [60..61]
 r124: [36..37]
 r125: [30..31]
 r126: [20..21]
 r127: [18..19]
 r128: [14..15]
 r129: [10..11]
 r131: [24..25]

********** Assignment #1: **********

	 Assigning to 131 (cl=GENERAL_REGS, orig=106, freq=3, tfirst=131, tfreq=3)...
	   Assign 2 to reload r131 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 75
changing reg in insn 76
changing reg in insn 97
changing reg in insn 100
changing reg in insn 42
changing reg in insn 51
changing reg in insn 47
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 44
changing reg in insn 45
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 67
changing reg in insn 73
changing reg in insn 77
changing reg in insn 87
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 100
changing reg in insn 104
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 66
changing reg in insn 67
changing reg in insn 78
changing reg in insn 79
changing reg in insn 84
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
deleting insn with uid = 41.
deleting insn with uid = 75.
deleting insn with uid = 110.
deleting insn with uid = 83.
deleting insn with uid = 85.
deleting insn with uid = 100.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 88.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_cdata(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={37d,34u} r1={15d,9u} r2={10d,4u} r3={1d,2u} r4={10d,5u} r5={11d,6u} r6={1d,30u} r7={1d,14u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={15d,4u} r18={5d} r19={5d} r20={1d,1u,1e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={7d,1u} r38={7d,1u} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 556{444d,111u,1e} in 78{73 regular + 5 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 114 115
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1998 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1998 81 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2015 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [115])
        (mem/f:DI (reg/f:DI 0 ax [114]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2015 81 {*movdi_internal}
     (nil))
(insn 10 9 61 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 value+0 S8 A64])
        (reg/f:DI 0 ax [115])) "libs/src/../include/rapidxml/rapidxml.hpp":2015 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              8 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 116
(code_label 61 10 11 3 297 (nil) [1 uses])
(note 11 61 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [orig:90 _16 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [116]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:QI 0 ax [orig:91 _17 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 _16 ] [90]) [0 *_16+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 84 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _17 ] [91])
            (const_int 93 [0x5d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 5 {*cmpqi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 617 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 117
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (reg/f:DI 0 ax [orig:92 _18 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [117]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _19 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _18 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2016 218 {*adddi_1}
     (nil))
(insn 21 20 22 4 (set (reg:QI 0 ax [orig:94 _20 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 _19 ] [93]) [0 *_19+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 84 {*movqi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 _20 ] [94])
            (const_int 93 [0x5d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 5 {*cmpqi_1}
     (nil))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 617 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 118
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 0 ax [orig:95 _21 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [118]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 81 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _22 ] [96])
                (plus:DI (reg/f:DI 0 ax [orig:95 _21 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2016 218 {*adddi_1}
     (nil))
(insn 28 27 29 5 (set (reg:QI 0 ax [orig:97 _23 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _22 ] [96]) [0 *_22+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2016 84 {*movqi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _23 ] [97])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 5 {*cmpqi_1}
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2016 617 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 119
(code_label 31 30 32 6 294 (nil) [2 uses])
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2018 81 {*movdi_internal}
     (nil))
(insn 34 33 35 6 (set (reg/f:DI 0 ax [orig:98 _24 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [119]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2018 81 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:QI 0 ax [orig:99 _25 ] [99])
        (mem:QI (reg/f:DI 0 ax [orig:98 _24 ] [98]) [0 *_24+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2018 84 {*movqi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _25 ] [99])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2018 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 37 36 38 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2018 617 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 100 120 121
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(call_insn 40 39 42 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2019 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 42 40 43 7 (set (reg/f:DI 3 bx [orig:89 _15 ] [89])
        (reg/f:DI 0 ax [120])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg/f:DI 0 ax [orig:100 _26 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [121]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:100 _26 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 47 46 48 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:89 _15 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(call_insn 48 47 49 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 49 48 50 7 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:89 _15 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 81 {*movdi_internal}
     (nil))
(call_insn 52 51 53 7 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2019 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 54)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 122 123
(code_label 54 53 55 8 296 (nil) [1 uses])
(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 8 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2020 81 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (reg/f:DI 0 ax [orig:101 _27 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [122]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2020 81 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _28 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 _27 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2020 218 {*adddi_1}
     (nil))
(insn 59 58 60 8 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2020 81 {*movdi_internal}
     (nil))
(insn 60 59 107 8 (set (mem/f:DI (reg/f:DI 0 ax [123]) [3 *text_9(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:102 _28 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":2020 81 {*movdi_internal}
     (nil))
(jump_insn 107 60 108 8 (set (pc)
        (label_ref 61)) "libs/src/../include/rapidxml/rapidxml.hpp":2016 649 {jump}
     (nil)
 -> 61)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 108 107 64)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 103 104 105 106 107 108 109 110 111 112 113 124 125 126 127 128 129
(code_label 64 108 65 9 295 (nil) [1 uses])
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 67 66 68 9 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _29 ] [103])
                (plus:DI (reg/f:DI 0 ax [124])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2024 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 68 67 69 9 (set (reg:DI 38 r9)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (reg:DI 37 r8)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 70 69 71 9 (set (reg:DI 2 cx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:SI 4 si)
        (const_int 3 [0x3])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 82 {*movsi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 _29 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(call_insn 74 73 76 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE13allocate_nodeENS_9node_typeEPKcS4_mm") [flags 0x3]  <function_decl 0x7f441985f700 allocate_node>) [0 allocate_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2024 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 76 74 77 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 cdata+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 _5 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":2024 81 {*movdi_internal}
     (nil))
(insn 77 76 78 9 (set (reg/f:DI 0 ax [orig:104 _30 ] [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 cdata+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 78 77 79 9 (set (reg/f:DI 1 dx [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 79 78 80 9 (set (reg/f:DI 1 dx [orig:105 _31 ] [105])
        (mem/f:DI (reg/f:DI 1 dx [125]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (reg:DI 2 cx [orig:106 _32 ] [106])
        (reg/f:DI 1 dx [orig:105 _31 ] [105])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 1 dx [orig:107 value.136_33 ] [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 82 81 111 9 (parallel [
            (set (reg:DI 2 cx [orig:106 _32 ] [106])
                (minus:DI (reg:DI 2 cx [orig:106 _32 ] [106])
                    (reg:DI 1 dx [orig:107 value.136_33 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2025 274 {*subdi_1}
     (nil))
(insn 111 82 84 9 (set (reg:DI 1 dx [orig:108 _34 ] [108])
        (reg:DI 2 cx [orig:106 _32 ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 84 111 86 9 (set (reg:DI 2 cx [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 86 84 87 9 (set (reg:DI 4 si)
        (reg:DI 2 cx [126])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(insn 87 86 88 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 _30 ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 81 {*movdi_internal}
     (nil))
(call_insn 88 87 89 9 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2025 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 89 88 90 9 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2029 81 {*movdi_internal}
     (nil))
(insn 90 89 91 9 (set (reg/f:DI 0 ax [orig:110 _36 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [127]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2029 81 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (set (mem:QI (reg/f:DI 0 ax [orig:110 _36 ] [110]) [0 *_36+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2029 84 {*movqi_internal}
     (nil))
(insn 92 91 93 9 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2031 81 {*movdi_internal}
     (nil))
(insn 93 92 94 9 (set (reg/f:DI 0 ax [orig:111 _37 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [128]) [3 *text_9(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2031 81 {*movdi_internal}
     (nil))
(insn 94 93 95 9 (parallel [
            (set (reg/f:DI 1 dx [orig:112 _38 ] [112])
                (plus:DI (reg/f:DI 0 ax [orig:111 _37 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2031 218 {*adddi_1}
     (nil))
(insn 95 94 96 9 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2031 81 {*movdi_internal}
     (nil))
(insn 96 95 97 9 (set (mem/f:DI (reg/f:DI 0 ax [129]) [3 *text_9(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:112 _38 ] [112])) "libs/src/../include/rapidxml/rapidxml.hpp":2031 81 {*movdi_internal}
     (nil))
(insn 97 96 104 9 (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 cdata+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2032 81 {*movdi_internal}
     (nil))
(insn 104 97 105 9 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:113 <retval> ] [113])) "libs/src/../include/rapidxml/rapidxml.hpp":2033 81 {*movdi_internal}
     (nil))
(insn 105 104 109 9 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2033 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 109 105 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_doctype(Ch*&) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE13parse_doctypeILi0EEEPNS_8xml_nodeIcEERPc, funcdef_no=3316, decl_uid=65742, cgraph_uid=1190, symbol_order=1212)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 53:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 58:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 128:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 20
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 14
   Insn 76: point = 0, n_alt = 0
   Insn 75: point = 0, n_alt = -2
   Insn 74: point = 1, n_alt = 4
   Insn 73: point = 1, n_alt = 4
   Insn 72: point = 1, n_alt = 0
   Insn 71: point = 1, n_alt = -2
   Insn 70: point = 1, n_alt = 4
   Insn 69: point = 1, n_alt = -2
   Insn 68: point = 2, n_alt = 3
   Insn 67: point = 4, n_alt = 3
   Insn 66: point = 5, n_alt = -2
   Insn 65: point = 7, n_alt = -2
   Insn 64: point = 8, n_alt = 0
   Insn 63: point = 8, n_alt = 2
  BB 16
   Insn 107: point = 8, n_alt = 0
   Insn 106: point = 8, n_alt = -2
   Insn 105: point = 9, n_alt = 4
   Insn 104: point = 9, n_alt = 4
   Insn 103: point = 9, n_alt = 0
   Insn 102: point = 9, n_alt = -2
   Insn 101: point = 9, n_alt = 4
   Insn 100: point = 9, n_alt = -2
   Insn 99: point = 10, n_alt = 3
   Insn 98: point = 12, n_alt = 3
   Insn 97: point = 13, n_alt = -2
   Insn 96: point = 15, n_alt = -2
   Insn 95: point = 16, n_alt = 0
   Insn 94: point = 16, n_alt = 2
  BB 19
   Insn 137: point = 16, n_alt = -1
   Insn 136: point = 16, n_alt = -2
   Insn 132: point = 17, n_alt = -2
   Insn 129: point = 19, n_alt = 2
   Insn 128: point = 20, n_alt = 5
   Insn 127: point = 21, n_alt = 3
   Insn 126: point = 22, n_alt = 3
   Insn 125: point = 24, n_alt = 3
   Insn 124: point = 26, n_alt = 3
  BB 3
   Insn 15: point = 27, n_alt = -1
   Insn 14: point = 27, n_alt = 0
   Insn 13: point = 28, n_alt = 2
   Insn 12: point = 30, n_alt = 3
   Insn 11: point = 32, n_alt = 3
  BB 18
   Insn 155: point = 33, n_alt = -1
  BB 17
   Insn 157: point = 33, n_alt = -1
   Insn 115: point = 33, n_alt = 5
   Insn 114: point = 34, n_alt = 3
   Insn 113: point = 35, n_alt = 3
   Insn 112: point = 37, n_alt = 3
   Insn 111: point = 39, n_alt = 3
  BB 20
   Insn 161: point = 40, n_alt = -1
  BB 7
   Insn 37: point = 40, n_alt = -1
   Insn 36: point = 40, n_alt = 1
  BB 15
   Insn 153: point = 40, n_alt = -1
   Insn 84: point = 40, n_alt = 5
   Insn 83: point = 41, n_alt = 3
   Insn 82: point = 42, n_alt = 3
   Insn 81: point = 44, n_alt = 3
   Insn 80: point = 46, n_alt = 3
  BB 13
   Insn 151: point = 47, n_alt = -1
   Insn 58: point = 47, n_alt = 1
  BB 11
   Insn 147: point = 47, n_alt = -1
  BB 10
   Insn 48: point = 47, n_alt = -1
   Insn 47: point = 47, n_alt = 0
  BB 9
   Insn 46: point = 49, n_alt = -1
   Insn 45: point = 49, n_alt = 0
  BB 12
   Insn 149: point = 50, n_alt = -1
   Insn 53: point = 50, n_alt = 1
  BB 8
   Insn 44: point = 50, n_alt = -1
   Insn 43: point = 50, n_alt = 0
   Insn 42: point = 50, n_alt = 0
   Insn 41: point = 52, n_alt = 2
   Insn 40: point = 54, n_alt = 3
   Insn 39: point = 56, n_alt = 3
  BB 6
   Insn 34: point = 57, n_alt = 1
   Insn 33: point = 57, n_alt = 5
   Insn 32: point = 58, n_alt = 3
   Insn 31: point = 59, n_alt = 3
   Insn 30: point = 61, n_alt = 3
   Insn 29: point = 63, n_alt = 3
  BB 5
   Insn 24: point = 64, n_alt = -1
   Insn 23: point = 64, n_alt = 0
  BB 4
   Insn 22: point = 66, n_alt = -1
   Insn 21: point = 66, n_alt = 0
   Insn 20: point = 66, n_alt = 0
   Insn 19: point = 68, n_alt = 2
   Insn 18: point = 70, n_alt = 3
   Insn 17: point = 72, n_alt = 3
  BB 2
   Insn 9: point = 73, n_alt = 5
   Insn 8: point = 74, n_alt = 3
   Insn 7: point = 76, n_alt = 3
   Insn 3: point = 77, n_alt = 5
   Insn 2: point = 77, n_alt = 5
 r87: [29..30]
 r88: [27..28]
 r89: [69..70]
 r90: [67..68]
 r91: [64..66]
 r92: [60..61]
 r93: [57..59]
 r94: [53..54]
 r95: [51..52]
 r96: [47..50]
 r97: [1..2]
 r98: [43..44]
 r99: [40..42]
 r100: [9..10]
 r101: [36..37]
 r102: [33..35]
 r103: [23..24]
 r104: [20..22]
 r105: [0..5]
 r106: [8..13]
 r107: [18..19]
 r108: [16..17]
 r109: [75..76]
 r110: [73..74]
 r111: [31..32]
 r112: [71..72]
 r113: [62..63]
 r114: [57..58]
 r115: [55..56]
 r116: [6..7]
 r117: [3..4]
 r118: [45..46]
 r119: [40..41]
 r120: [14..15]
 r121: [11..12]
 r122: [38..39]
 r123: [33..34]
 r124: [25..26]
 r125: [20..21]
Compressing live ranges: from 77 to 66 - 85%
Ranges after the compression:
 r87: [24..25]
 r88: [22..23]
 r89: [58..59]
 r90: [56..57]
 r91: [54..55]
 r92: [50..51]
 r93: [48..49]
 r94: [44..45]
 r95: [42..43]
 r96: [40..41]
 r97: [0..1]
 r98: [36..37]
 r99: [34..35]
 r100: [6..7]
 r101: [30..31]
 r102: [28..29]
 r103: [18..19]
 r104: [16..17]
 r105: [0..3]
 r106: [6..9]
 r107: [14..15]
 r108: [12..13]
 r109: [64..65]
 r110: [62..63]
 r111: [26..27]
 r112: [60..61]
 r113: [52..53]
 r114: [48..49]
 r115: [46..47]
 r116: [4..5]
 r117: [2..3]
 r118: [38..39]
 r119: [34..35]
 r120: [10..11]
 r121: [8..9]
 r122: [32..33]
 r123: [28..29]
 r124: [20..21]
 r125: [16..17]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 43
changing reg in insn 68
changing reg in insn 69
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 99
changing reg in insn 100
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 66
changing reg in insn 75
changing reg in insn 71
changing reg in insn 97
changing reg in insn 106
changing reg in insn 102
changing reg in insn 129
changing reg in insn 132
changing reg in insn 132
changing reg in insn 136
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
deleting insn with uid = 65.
deleting insn with uid = 96.
deleting insn with uid = 132.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 107.


rapidxml::xml_node<Ch>* rapidxml::xml_document<Ch>::parse_doctype(Ch*&) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={38d,37u} r1={15d,8u} r2={7d} r3={2d,4u} r4={11d,5u} r5={13d,7u} r6={1d,43u} r7={1d,26u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={19d,7u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 652{514d,138u,0e} in 89{83 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109 110
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1814 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1814 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1817 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [110])
        (mem/f:DI (reg/f:DI 0 ax [109]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1817 81 {*movdi_internal}
     (nil))
(insn 9 8 118 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])
        (reg/f:DI 0 ax [110])) "libs/src/../include/rapidxml/rapidxml.hpp":1817 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              18 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 111
(code_label 118 9 10 3 311 (nil) [1 uses])
(note 10 118 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1820 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [111]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1820 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1820 84 {*movqi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _2 ] [88])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":1820 5 {*cmpqi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1820 617 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       19
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 112
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1823 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [112]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1823 81 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:QI 0 ax [orig:90 _4 ] [90])
        (mem:QI (reg/f:DI 0 ax [orig:89 _3 ] [89]) [0 *_3+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1823 84 {*movqi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (sign_extend:SI (reg:QI 0 ax [orig:90 _4 ] [90]))) "libs/src/../include/rapidxml/rapidxml.hpp":1823 151 {extendqisi2}
     (nil))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 _5 ] [91])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1823 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 22 21 139 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1823 617 {*jcc_1}
     (nil)
 -> 92)
;;  succ:       16
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 17 [flags]
(note 139 22 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 139 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 _5 ] [91])
            (const_int 91 [0x5b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1823 7 {*cmpsi_1}
     (nil))
(jump_insn 24 23 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 145)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1823 617 {*jcc_1}
     (nil)
 -> 145)
;;  succ:       6 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 113 114
(note 28 24 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1830 81 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [113]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1830 81 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1830 218 {*adddi_1}
     (nil))
(insn 32 31 33 6 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1830 81 {*movdi_internal}
     (nil))
(insn 33 32 34 6 (set (mem/f:DI (reg/f:DI 0 ax [114]) [3 *text_23(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:93 _7 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":1830 81 {*movdi_internal}
     (nil))
(insn 34 33 85 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":1831 82 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              15 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 85 34 35 7 309 (nil) [1 uses])
(note 35 85 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1832 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 37 36 38 7 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 160)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1832 617 {*jcc_1}
     (nil)
 -> 160)
;;  succ:       20
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 115
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1834 81 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [115]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1834 81 {*movdi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:QI 0 ax [orig:95 _9 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [0 *_8+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1834 84 {*movqi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:SI 0 ax [orig:96 _10 ] [96])
        (sign_extend:SI (reg:QI 0 ax [orig:95 _9 ] [95]))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 151 {extendqisi2}
     (nil))
(insn 43 42 44 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _10 ] [96])
            (const_int 91 [0x5b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 7 {*cmpsi_1}
     (nil))
(jump_insn 44 43 141 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 617 {*jcc_1}
     (nil)
 -> 51)
;;  succ:       12
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96
;; lr  def 	 17 [flags]
(note 141 44 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 141 46 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _10 ] [96])
            (const_int 93 [0x5d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 7 {*cmpsi_1}
     (nil))
(jump_insn 46 45 142 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 617 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       13
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96
;; lr  def 	 17 [flags]
(note 142 46 47 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 47 142 48 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _10 ] [96])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 48 47 146 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1834 617 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       14
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 146 48 147 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 147 146 148 11 (set (pc)
        (label_ref 78)) "libs/src/../include/rapidxml/rapidxml.hpp":1834 649 {jump}
     (nil)
 -> 78)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 148 147 51)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 51 148 52 12 306 (nil) [1 uses])
(note 52 51 53 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 149 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1836 217 {*addsi_1}
     (nil))
(jump_insn 149 53 150 12 (set (pc)
        (label_ref 78)) "libs/src/../include/rapidxml/rapidxml.hpp":1836 649 {jump}
     (nil)
 -> 78)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 150 149 56)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 56 150 57 13 307 (nil) [1 uses])
(note 57 56 58 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 151 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [19 depth+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1837 217 {*addsi_1}
     (nil))
(jump_insn 151 58 152 13 (set (pc)
        (label_ref 78)) "libs/src/../include/rapidxml/rapidxml.hpp":1837 649 {jump}
     (nil)
 -> 78)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 152 151 61)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 105 116 117
(code_label 61 152 62 14 308 (nil) [1 uses])
(note 62 61 63 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 14 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(call_insn 64 63 66 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1838 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 66 64 67 14 (set (reg/f:DI 3 bx [orig:105 _32 ] [105])
        (reg/f:DI 0 ax [116])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 67 66 68 14 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 68 67 69 14 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [117]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 69 68 70 14 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:97 _11 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 70 69 71 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 71 70 72 14 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:105 _32 ] [105])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(call_insn 72 71 73 14 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 73 72 74 14 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 74 73 75 14 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(insn 75 74 76 14 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:105 _32 ] [105])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 81 {*movdi_internal}
     (nil))
(call_insn 76 75 77 14 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1838 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 77 76 78)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       12 [100.0%] 
;;              11 [100.0%] 
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 118 119
(code_label 78 77 79 15 305 (nil) [3 uses])
(note 79 78 80 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 15 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1840 81 {*movdi_internal}
     (nil))
(insn 81 80 82 15 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [118]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1840 81 {*movdi_internal}
     (nil))
(insn 82 81 83 15 (parallel [
            (set (reg/f:DI 1 dx [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1840 218 {*adddi_1}
     (nil))
(insn 83 82 84 15 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1840 81 {*movdi_internal}
     (nil))
(insn 84 83 153 15 (set (mem/f:DI (reg/f:DI 0 ax [119]) [3 *text_23(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 _13 ] [99])) "libs/src/../include/rapidxml/rapidxml.hpp":1840 81 {*movdi_internal}
     (nil))
(jump_insn 153 84 154 15 (set (pc)
        (label_ref 85)) "libs/src/../include/rapidxml/rapidxml.hpp":1832 649 {jump}
     (nil)
 -> 85)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 154 153 92)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100 106 120 121
(code_label 92 154 93 16 302 (nil) [1 uses])
(note 93 92 94 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 16 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(call_insn 95 94 97 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1847 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 95 98 16 (set (reg/f:DI 3 bx [orig:106 _37 ] [106])
        (reg/f:DI 0 ax [120])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 98 97 99 16 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 99 98 100 16 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [121]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 100 99 101 16 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:100 _14 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 101 100 102 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 102 101 103 16 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:106 _37 ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(call_insn 103 102 104 16 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 104 103 105 16 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 105 104 106 16 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(insn 106 105 107 16 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:106 _37 ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 81 {*movdi_internal}
     (nil))
(call_insn 107 106 108 16 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1847 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 108 107 145)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 20, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 122 123
(code_label 145 108 110 17 314 (nil) [1 uses])
(note 110 145 111 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 17 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1851 81 {*movdi_internal}
     (nil))
(insn 112 111 113 17 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [122]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1851 81 {*movdi_internal}
     (nil))
(insn 113 112 114 17 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1851 218 {*adddi_1}
     (nil))
(insn 114 113 115 17 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1851 81 {*movdi_internal}
     (nil))
(insn 115 114 157 17 (set (mem/f:DI (reg/f:DI 0 ax [123]) [3 *text_23(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:102 _16 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1851 81 {*movdi_internal}
     (nil))
(jump_insn 157 115 158 17 (set (pc)
        (label_ref 116)) 649 {jump}
     (nil)
 -> 116)
;;  succ:       18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 160)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 18, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 160 158 159 20 315 (nil) [1 uses])
(note 159 160 161 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 161 159 116 20 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1842 684 {nop}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 19, flags: (RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              17
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 116 161 117 18 310 (nil) [1 uses])
(note 117 116 155 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 155 117 156 18 (set (pc)
        (label_ref 118)) "libs/src/../include/rapidxml/rapidxml.hpp":1820 649 {jump}
     (nil)
 -> 118)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 144)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 103 104 107 108 124 125
(code_label 144 156 123 19 313 (nil) [1 uses])
(note 123 144 124 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 19 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1872 81 {*movdi_internal}
     (nil))
(insn 125 124 126 19 (set (reg/f:DI 0 ax [orig:103 _27 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [124]) [3 *text_23(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1872 81 {*movdi_internal}
     (nil))
(insn 126 125 127 19 (parallel [
            (set (reg/f:DI 1 dx [orig:104 _28 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:103 _27 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1872 218 {*adddi_1}
     (nil))
(insn 127 126 128 19 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1872 81 {*movdi_internal}
     (nil))
(insn 128 127 129 19 (set (mem/f:DI (reg/f:DI 0 ax [125]) [3 *text_23(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:104 _28 ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1872 81 {*movdi_internal}
     (nil))
(insn 129 128 136 19 (set (reg/f:DI 0 ax [orig:107 _42 ] [107])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1873 81 {*movdi_internal}
     (nil))
(insn 136 129 137 19 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:108 <retval> ] [108])) "libs/src/../include/rapidxml/rapidxml.hpp":1876 81 {*movdi_internal}
     (nil))
(insn 137 136 162 19 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1876 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 162 137 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::xml_base<Ch>::parent() const [with Ch = char] (_ZNK8rapidxml8xml_baseIcE6parentEv, funcdef_no=3317, decl_uid=60182, cgraph_uid=1191, symbol_order=1213)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


rapidxml::xml_node<Ch>* rapidxml::xml_base<Ch>::parent() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":770 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":772 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [51 this_2(D)->m_parent+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":772 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":773 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":773 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function rapidxml::node_type rapidxml::xml_node<Ch>::type() const [with Ch = char] (_ZNK8rapidxml8xml_nodeIcE4typeEv, funcdef_no=3318, decl_uid=60203, cgraph_uid=1192, symbol_order=1214)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


rapidxml::node_type rapidxml::xml_node<Ch>::type() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":913 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":915 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg:SI 0 ax [orig:87 _3 ] [87])
        (mem:SI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 40 [0x28])) [52 this_2(D)->m_type+0 S4 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":915 82 {*movsi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":916 82 {*movsi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:SI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":916 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char] (_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm, funcdef_no=3320, decl_uid=17776, cgraph_uid=1194, symbol_order=1216)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..5]
 r88: [1..4]
 r89: [0..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(call_insn 14 13 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm") [flags 0x3]  <function_decl 0x7f441b91f000 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":462 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_destroy_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E, funcdef_no=3353, decl_uid=53182, cgraph_uid=1227, symbol_order=1249)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 2, n_alt = -2
   Insn 13: point = 3, n_alt = 0
   Insn 12: point = 3, n_alt = -2
   Insn 11: point = 4, n_alt = 3
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 0
   Insn 8: point = 6, n_alt = -2
   Insn 7: point = 7, n_alt = 3
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [1..5]
 r88: [0..2]
 r89: [6..7]
 r90: [3..4]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [0..3]
 r88: [0..1]
 r89: [4..5]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 10
changing reg in insn 15
changing reg in insn 14
changing reg in insn 16
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_destroy_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={4d} r2={4d} r3={1d,1u} r4={5d,2u} r5={7d,4u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 264{241d,23u,0e} in 13{10 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":648 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_tree.h":648 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE9_M_valptrEv") [flags 0x3]  <function_decl 0x7f4419073d00 _M_valptr>) [0 _M_valptr S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":650 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 3 bx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(call_insn 13 12 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv") [flags 0x3]  <function_decl 0x7f4419c29b00 _M_get_Node_allocator>) [0 _M_get_Node_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":650 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_tree.h":650 81 {*movdi_internal}
     (nil))
(call_insn 17 16 20 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEE7destroyIS9_EEvRSB_PT_") [flags 0x3]  <function_decl 0x7f4418ede000 destroy>) [0 destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":650 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 20 17 21 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":652 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 21 20 0 NOTE_INSN_DELETED)

;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_put_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E, funcdef_no=3354, decl_uid=53160, cgraph_uid=1228, symbol_order=1250)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 12: point = 2, n_alt = 2
   Insn 11: point = 2, n_alt = 3
   Insn 10: point = 3, n_alt = -2
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = -2
   Insn 7: point = 5, n_alt = 3
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [0..3]
 r88: [4..5]
 r89: [1..2]
Compressing live ranges: from 6 to 4 - 66%
Ranges after the compression:
 r87: [0..1]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 14
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 13
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.


void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_put_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={4d,1u} r4={4d,2u} r5={5d,3u} r6={1d,6u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 190{169d,21u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":591 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_tree.h":591 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv") [flags 0x3]  <function_decl 0x7f4419c29b00 _M_get_Node_allocator>) [0 _M_get_Node_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":592 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 2 cx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":592 81 {*movdi_internal}
     (nil))
(call_insn 15 14 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEE10deallocateERSB_PSA_m") [flags 0x3]  <function_decl 0x7f4418ebef00 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_tree.h":592 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 15 19 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_tree.h":592 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 18 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = TSX::Parser::Terrain] (_ZNSaIN3TSX6Parser7TerrainEEC2Ev, funcdef_no=3356, decl_uid=56303, cgraph_uid=1230, symbol_order=1252)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [88 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [88 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEEC2Ev") [flags 0x3]  <function_decl 0x7f44199fd900 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":131 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":131 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = TSX::Parser::Terrain] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEED2Ev, funcdef_no=3359, decl_uid=56243, cgraph_uid=1233, symbol_order=1255)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [91 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":86 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":86 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = TSX::Parser::Terrain] (_ZNSt16allocator_traitsISaIN3TSX6Parser7TerrainEEE10deallocateERS3_PS2_m, funcdef_no=3361, decl_uid=55993, cgraph_uid=1235, symbol_order=1257)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..5]
 r88: [1..4]
 r89: [0..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [76 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [76 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(call_insn 14 13 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEE10deallocateEPS3_m") [flags 0x3]  <function_decl 0x7f44199fd000 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":462 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = TSX::Parser::Terrain] (_ZSt11__addressofIN3TSX6Parser7TerrainEEPT_RS3_, funcdef_no=3363, decl_uid=67838, cgraph_uid=1236, symbol_order=1258)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr _Tp* std::__addressof(_Tp&) [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [92 __r+0 S8 A64])
        (reg:DI 5 di [ __r ])) "/usr/include/c++/7/bits/move.h":47 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [92 __r+0 S8 A64])) "/usr/include/c++/7/bits/move.h":48 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/move.h":48 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/move.h":48 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Terrain*; bool <anonymous> = false] (_ZNSt12_Destroy_auxILb0EE9__destroyIPN3TSX6Parser7TerrainEEEvT_S6_, funcdef_no=3362, decl_uid=66421, cgraph_uid=1237, symbol_order=1259)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 17:  (0) rm  (1) 0  (2) re {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 29: point = 0, n_alt = -1
  BB 3
   Insn 9: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 1
   Insn 7: point = 1, n_alt = 3
  BB 4
   Insn 25: point = 2, n_alt = -1
   Insn 17: point = 2, n_alt = 1
   Insn 16: point = 2, n_alt = 0
   Insn 15: point = 2, n_alt = -2
   Insn 14: point = 3, n_alt = -2
   Insn 13: point = 4, n_alt = 0
   Insn 12: point = 4, n_alt = -2
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Terrain*; bool <anonymous> = false]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={3d} r2={3d} r4={3d,1u} r5={5d,3u} r6={1d,13u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 198{168d,30u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":105 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":105 81 {*movdi_internal}
     (nil))
(note 4 3 18 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 18 4 6 3 330 (nil) [1 uses])
(note 6 18 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":107 81 {*movdi_internal}
     (nil))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [88])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [41 __last+0 S8 A64]))) "/usr/include/c++/7/bits/stl_construct.h":107 8 {*cmpdi_1}
     (nil))
(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 28)
            (pc))) "/usr/include/c++/7/bits/stl_construct.h":107 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 89
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(insn 12 11 13 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(call_insn 13 12 15 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt11__addressofIN3TSX6Parser7TerrainEEPT_RS3_") [flags 0x3]  <function_decl 0x7f4418eea100 __addressof>) [0 __addressof S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_construct.h":108 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 13 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIN3TSX6Parser7TerrainEEvPT_") [flags 0x3]  <function_decl 0x7f4418eea200 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":108 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 25 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [41 __first+0 S8 A64])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_construct.h":107 218 {*adddi_1}
     (nil))
(jump_insn 25 17 26 4 (set (pc)
        (label_ref 18)) "/usr/include/c++/7/bits/stl_construct.h":107 649 {jump}
     (nil)
 -> 18)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 28)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 28 26 27 6 331 (nil) [1 uses])
(note 27 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 27 23 6 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":109 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 23 29 24 5 328 (nil) [0 uses])
(note 24 23 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 24 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = TSX::Parser::Tile] (_ZNSaIN3TSX6Parser4TileEEC2Ev, funcdef_no=3365, decl_uid=57398, cgraph_uid=1239, symbol_order=1261)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [89 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [89 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":131 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEEC2Ev") [flags 0x3]  <function_decl 0x7f441968e200 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":131 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":131 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = TSX::Parser::Tile] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEED2Ev, funcdef_no=3368, decl_uid=57338, cgraph_uid=1242, symbol_order=1264)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [93 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":86 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":86 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = TSX::Parser::Tile] (_ZNSt16allocator_traitsISaIN3TSX6Parser4TileEEE10deallocateERS3_PS2_m, funcdef_no=3370, decl_uid=57088, cgraph_uid=1244, symbol_order=1266)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..5]
 r88: [1..4]
 r89: [0..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [79 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [79 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(call_insn 14 13 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEE10deallocateEPS3_m") [flags 0x3]  <function_decl 0x7f4419a95900 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":462 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = TSX::Parser::Tile] (_ZSt11__addressofIN3TSX6Parser4TileEEPT_RS3_, funcdef_no=3372, decl_uid=67857, cgraph_uid=1245, symbol_order=1267)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr _Tp* std::__addressof(_Tp&) [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [94 __r+0 S8 A64])
        (reg:DI 5 di [ __r ])) "/usr/include/c++/7/bits/move.h":47 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [94 __r+0 S8 A64])) "/usr/include/c++/7/bits/move.h":48 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/move.h":48 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/move.h":48 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Tile*; bool <anonymous> = false] (_ZNSt12_Destroy_auxILb0EE9__destroyIPN3TSX6Parser4TileEEEvT_S6_, funcdef_no=3371, decl_uid=66630, cgraph_uid=1246, symbol_order=1268)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 17:  (0) rm  (1) 0  (2) re {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 29: point = 0, n_alt = -1
  BB 3
   Insn 9: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 1
   Insn 7: point = 1, n_alt = 3
  BB 4
   Insn 25: point = 2, n_alt = -1
   Insn 17: point = 2, n_alt = 1
   Insn 16: point = 2, n_alt = 0
   Insn 15: point = 2, n_alt = -2
   Insn 14: point = 3, n_alt = -2
   Insn 13: point = 4, n_alt = 0
   Insn 12: point = 4, n_alt = -2
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = TSX::Parser::Tile*; bool <anonymous> = false]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={3d} r2={3d} r4={3d,1u} r5={5d,3u} r6={1d,13u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 198{168d,30u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":105 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":105 81 {*movdi_internal}
     (nil))
(note 4 3 18 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 18 4 6 3 339 (nil) [1 uses])
(note 6 18 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":107 81 {*movdi_internal}
     (nil))
(insn 8 7 9 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [88])
            (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [45 __last+0 S8 A64]))) "/usr/include/c++/7/bits/stl_construct.h":107 8 {*cmpdi_1}
     (nil))
(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 28)
            (pc))) "/usr/include/c++/7/bits/stl_construct.h":107 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 89
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(insn 12 11 13 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(call_insn 13 12 15 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt11__addressofIN3TSX6Parser4TileEEPT_RS3_") [flags 0x3]  <function_decl 0x7f4418eeac00 __addressof>) [0 __addressof S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_construct.h":108 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 13 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_construct.h":108 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIN3TSX6Parser4TileEEvPT_") [flags 0x3]  <function_decl 0x7f4418eead00 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":108 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 25 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [45 __first+0 S8 A64])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_construct.h":107 218 {*adddi_1}
     (nil))
(jump_insn 25 17 26 4 (set (pc)
        (label_ref 18)) "/usr/include/c++/7/bits/stl_construct.h":107 649 {jump}
     (nil)
 -> 18)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 28)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 28 26 27 6 340 (nil) [1 uses])
(note 27 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 27 23 6 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":109 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 23 29 24 5 337 (nil) [0 uses])
(note 24 23 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 24 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC2Ev, funcdef_no=3374, decl_uid=60661, cgraph_uid=1248, symbol_order=1270)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 5
   Insn 13: point = 1, n_alt = 3
   Insn 12: point = 2, n_alt = 5
   Insn 11: point = 3, n_alt = 3
   Insn 10: point = 4, n_alt = 5
   Insn 9: point = 5, n_alt = 3
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{95d,17u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":88 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:DI ("_ZNSaIcEC2Ev") [flags 0x41]  <function_decl 0x7f441b92c700 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (reg/f:DI 0 ax [88]) [3 this_2(D)->_M_start+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [3 this_2(D)->_M_finish+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [84 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 14 13 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 16 [0x10])) [3 this_2(D)->_M_end_of_storage+0 S8 A64])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":89 81 {*movdi_internal}
     (nil))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":90 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function _ForwardIterator std::__uninitialized_default_n_a(_ForwardIterator, _Size, std::allocator<_Tp>&) [with _ForwardIterator = char*; _Size = long unsigned int; _Tp = char] (_ZSt27__uninitialized_default_n_aIPcmcET_S1_T0_RSaIT1_E, funcdef_no=3382, decl_uid=66682, cgraph_uid=1256, symbol_order=1278)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = -2
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 3
   Insn 8: point = 7, n_alt = 3
   Insn 4: point = 8, n_alt = 5
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [5..7]
 r90: [4..6]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 13.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


_ForwardIterator std::__uninitialized_default_n_a(_ForwardIterator, _Size, std::allocator<_Tp>&) [with _ForwardIterator = char*; _Size = long unsigned int; _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 116{95d,21u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":643 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_uninitialized.h":643 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [86 D.66685+0 S8 A64])
        (reg:DI 1 dx [ D.66685 ])) "/usr/include/c++/7/bits/stl_uninitialized.h":643 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":645 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":645 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "/usr/include/c++/7/bits/stl_uninitialized.h":645 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":645 81 {*movdi_internal}
     (nil))
(call_insn 12 11 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt25__uninitialized_default_nIPcmET_S1_T0_") [flags 0x3]  <function_decl 0x7f4418ef2900 __uninitialized_default_n>) [0 __uninitialized_default_n S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":645 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 20 12 21 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_uninitialized.h":645 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":645 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::_M_check_len(std::vector<_Tp, _Alloc>::size_type, const char*) const [with _Tp = char; _Alloc = std::allocator<char>] (_ZNKSt6vectorIcSaIcEE12_M_check_lenEmPKc, funcdef_no=3383, decl_uid=61242, cgraph_uid=1257, symbol_order=1279)

      Creating newreg=112
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=113
Removing SCRATCH in insn #81 (nop 3)
rescanning insn with uid = 81.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r112
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=114 from oldreg=87, assigning class GENERAL_REGS to r114
   17: {r114:DI=r114:DI-r88:DI;clobber flags:CC;}
      REG_DEAD r88:DI
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   93: r114:DI=r87:DI
    Inserting insn reload after:
   94: r89:DI=r114:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 39:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r113
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 3
   Insn 26: point = 0, n_alt = 0
   Insn 25: point = 0, n_alt = -2
   Insn 24: point = 1, n_alt = 3
  BB 9
   Insn 83: point = 2, n_alt = 0
  BB 10
   Insn 86: point = 2, n_alt = -1
  BB 8
   Insn 82: point = 2, n_alt = -1
   Insn 81: point = 2, n_alt = 0
   Insn 80: point = 3, n_alt = -2
   Insn 76: point = 4, n_alt = -2
  BB 6
   Insn 90: point = 7, n_alt = -1
   Insn 66: point = 7, n_alt = -2
   Insn 65: point = 8, n_alt = 0
   Insn 64: point = 8, n_alt = -2
   Insn 63: point = 9, n_alt = 3
  BB 7
   Insn 71: point = 10, n_alt = 3
  BB 5
   Insn 60: point = 11, n_alt = -1
   Insn 59: point = 11, n_alt = 0
   Insn 58: point = 12, n_alt = -2
   Insn 57: point = 13, n_alt = 0
   Insn 56: point = 13, n_alt = -2
   Insn 55: point = 14, n_alt = 3
  BB 4
   Insn 53: point = 15, n_alt = -1
   Insn 52: point = 15, n_alt = 0
   Insn 51: point = 16, n_alt = -2
   Insn 50: point = 17, n_alt = 0
   Insn 49: point = 17, n_alt = -2
   Insn 48: point = 18, n_alt = 3
   Insn 47: point = 19, n_alt = 5
   Insn 46: point = 20, n_alt = 0
   Insn 45: point = 22, n_alt = 3
   Insn 44: point = 24, n_alt = -2
   Insn 43: point = 25, n_alt = 0
   Insn 42: point = 25, n_alt = -2
   Insn 41: point = 26, n_alt = -2
   Insn 40: point = 27, n_alt = 3
   Insn 39: point = 28, n_alt = 3
   Insn 38: point = 29, n_alt = 5
   Insn 37: point = 30, n_alt = -2
   Insn 36: point = 31, n_alt = 0
   Insn 35: point = 31, n_alt = -2
   Insn 34: point = 32, n_alt = 3
   Insn 33: point = 33, n_alt = -2
   Insn 32: point = 34, n_alt = 0
   Insn 31: point = 34, n_alt = -2
   Insn 30: point = 35, n_alt = 3
  BB 2
   Insn 22: point = 36, n_alt = -1
   Insn 21: point = 36, n_alt = 0
   Insn 20: point = 37, n_alt = 0
   Insn 19: point = 38, n_alt = 0
   Insn 18: point = 39, n_alt = 3
   Insn 94: point = 40, n_alt = -2
	Hard reg 1 is preferable by r114 with profit 1
   Insn 17: point = 42, n_alt = 0
   Insn 93: point = 43, n_alt = -2
	Hard reg 1 is preferable by r114 with profit 1
	Hard reg 3 is preferable by r114 with profit 1
   Insn 16: point = 45, n_alt = -2
   Insn 15: point = 46, n_alt = 0
   Insn 14: point = 46, n_alt = -2
   Insn 13: point = 47, n_alt = 3
   Insn 12: point = 48, n_alt = -2
   Insn 11: point = 49, n_alt = 0
   Insn 10: point = 49, n_alt = -2
   Insn 9: point = 50, n_alt = 3
   Insn 6: point = 51, n_alt = 0
   Insn 4: point = 53, n_alt = 5
   Insn 3: point = 53, n_alt = 5
   Insn 2: point = 53, n_alt = 5
 r87: [44..48]
 r88: [42..45]
 r89: [38..40]
 r90: [38..39]
 r91: [0..1]
 r92: [21..33]
 r93: [29..30]
 r94: [23..24]
 r95: [21..22]
 r96: [15..16]
 r97: [11..12]
 r98: [10..10] [5..7]
 r99: [36..37]
 r100: [3..4]
 r101: [49..50]
 r102: [46..47]
 r103: [34..35]
 r104: [31..32]
 r105: [26..28]
 r106: [25..27]
 r107: [19..20]
 r108: [17..18]
 r109: [13..14]
 r110: [8..9]
 r112: [51..52]
 r113: [2..2]
 r114: [41..43]
Compressing live ranges: from 53 to 46 - 86%
Ranges after the compression:
 r87: [38..41]
 r88: [36..39]
 r89: [34..35]
 r90: [34..35]
 r91: [0..1]
 r92: [20..29]
 r93: [26..27]
 r94: [22..23]
 r95: [20..21]
 r96: [14..15]
 r97: [10..11]
 r98: [9..9] [5..6]
 r99: [32..33]
 r100: [3..4]
 r101: [42..43]
 r102: [40..41]
 r103: [30..31]
 r104: [28..29]
 r105: [24..25]
 r106: [24..25]
 r107: [18..19]
 r108: [16..17]
 r109: [12..13]
 r110: [7..8]
 r112: [44..45]
 r113: [2..2]
 r114: [36..37]

********** Assignment #1: **********

	 Assigning to 114 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=114, tfreq=3)...
	   Assign 3 to reload r114 (freq=3)
	 Assigning to 112 (cl=INDEX_REGS, orig=112, freq=1, tfirst=112, tfreq=1)...
	   Assign 0 to reload r112 (freq=1)
	 Assigning to 113 (cl=INDEX_REGS, orig=113, freq=1, tfirst=113, tfreq=1)...
	   Assign 2 to reload r113 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 25
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 71
changing reg in insn 66
changing reg in insn 76
changing reg in insn 20
changing reg in insn 21
changing reg in insn 76
changing reg in insn 80
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 55
changing reg in insn 56
changing reg in insn 63
changing reg in insn 64
changing reg in insn 6
changing reg in insn 81
deleting insn with uid = 16.
deleting insn with uid = 93.
deleting insn with uid = 37.
deleting insn with uid = 44.
deleting insn with uid = 51.
deleting insn with uid = 58.
deleting insn with uid = 66.
deleting insn with uid = 76.
deleting insn with uid = 80.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 83.


std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::_M_check_len(std::vector<_Tp, _Alloc>::size_type, const char*) const [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={26d,22u} r1={13d,3u} r2={12d} r3={3d,3u} r4={12d,2u} r5={20d,10u} r6={1d,31u} r7={1d,20u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={20d,5u} r18={10d} r19={10d} r20={1d,1u} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 876{779d,97u,0e} in 56{46 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 99 101 102
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":1497 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":1497 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 __s+0 S8 A64])
        (reg:DI 1 dx [ __s ])) "/usr/include/c++/7/bits/stl_vector.h":1497 81 {*movdi_internal}
     (nil))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70505+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [112])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1497 1002 {stack_tls_protect_set_di}
     (nil))
(insn 9 6 10 2 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE8max_sizeEv") [flags 0x3]  <function_decl 0x7f44194a1100 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1499 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 3 bx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1499 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 15 94 2 (parallel [
            (set (reg:DI 3 bx [orig:87 _1 ] [87])
                (minus:DI (reg:DI 3 bx [orig:87 _1 ] [87])
                    (reg:DI 0 ax [orig:88 _2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1499 274 {*subdi_1}
     (nil))
(insn 94 17 18 2 (set (reg:DI 1 dx [orig:89 _3 ] [89])
        (reg:DI 3 bx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(insn 18 94 19 2 (set (reg:DI 0 ax [orig:90 __n.17_4 ] [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1499 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 1 dx [orig:89 _3 ] [89])
            (reg:DI 0 ax [orig:90 __n.17_4 ] [90]))) "/usr/include/c++/7/bits/stl_vector.h":1499 8 {*cmpdi_1}
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax [orig:99 retval.16_19 ] [99])
        (ltu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1499 613 {*setcc_qi}
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 retval.16_19 ] [99])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1499 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":1499 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:91 __s.18_5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [3 __s+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1500 81 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 __s.18_5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":1500 81 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (call (mem:QI (symbol_ref:DI ("_ZSt20__throw_length_errorPKc") [flags 0x41]  <function_decl 0x7f441c200100 __throw_length_error>) [0 __throw_length_error S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":1500 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 96 103 104 105 106 107 108
(code_label 28 27 29 4 345 (nil) [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(call_insn 32 31 33 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1502 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 4 (set (reg:DI 3 bx [orig:92 _6 ] [92])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(call_insn 36 35 38 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1502 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 36 39 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 D.67887+0 S8 A64])
        (reg:DI 0 ax [orig:93 _7 ] [93])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 1 dx [105])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1502 218 {*adddi_1}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 0 ax [106])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1502 218 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [105])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(call_insn 43 42 45 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt3maxImERKT_S2_S2_") [flags 0x3]  <function_decl 0x7f4418ef2c00 max>) [0 max S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1502 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 45 43 46 4 (set (reg:DI 0 ax [orig:95 _9 ] [95])
        (mem:DI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [8 *_8+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 0 ax [107])
                (plus:DI (reg:DI 0 ax [orig:95 _9 ] [95])
                    (reg:DI 3 bx [orig:92 _6 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1502 218 {*adddi_1}
     (nil))
(insn 47 46 48 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __len+0 S8 A64])
        (reg:DI 0 ax [107])) "/usr/include/c++/7/bits/stl_vector.h":1502 81 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(call_insn 50 49 52 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE4sizeEv") [flags 0x3]  <function_decl 0x7f44194a1000 size>) [0 size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1503 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 52 50 53 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 __len+0 S8 A64])
            (reg:DI 0 ax [orig:96 _10 ] [96]))) "/usr/include/c++/7/bits/stl_vector.h":1503 8 {*cmpdi_1}
     (nil))
(jump_insn 53 52 54 4 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":1503 617 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 109
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 5 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(call_insn 57 56 59 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE8max_sizeEv") [flags 0x3]  <function_decl 0x7f44194a1100 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1503 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 57 60 5 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 __len+0 S8 A64])
            (reg:DI 0 ax [orig:97 _11 ] [97]))) "/usr/include/c++/7/bits/stl_vector.h":1503 8 {*cmpdi_1}
     (nil))
(jump_insn 60 59 61 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":1503 617 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 110
(code_label 61 60 62 6 346 (nil) [1 uses])
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(insn 64 63 65 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
(call_insn 65 64 90 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt6vectorIcSaIcEE8max_sizeEv") [flags 0x3]  <function_decl 0x7f44194a1100 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":1503 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 90 65 91 6 (set (pc)
        (label_ref 72)) "/usr/include/c++/7/bits/stl_vector.h":1503 649 {jump}
     (nil)
 -> 72)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98

(barrier 91 90 69)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 98
(code_label 69 91 70 7 347 (nil) [1 uses])
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 7 (set (reg:DI 0 ax [orig:98 iftmp.19_12 ] [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __len+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":1503 81 {*movdi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98
;; lr  def 	 0 [ax] 17 [flags] 100
(code_label 72 71 73 8 348 (nil) [1 uses])
(note 73 72 81 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 81 73 82 8 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70505+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [113]))
        ]) "/usr/include/c++/7/bits/stl_vector.h":1504 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 82 81 88 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":1504 617 {*jcc_1}
     (nil)
 -> 85)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 88 82 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 83 88 84 9 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":1504 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 84 83 85)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 85 84 89 10 350 (nil) [1 uses])
(note 89 85 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 89 92 10 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":1504 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 92 86 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = char; _Alloc = std::allocator<char>] (_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEm, funcdef_no=3384, decl_uid=60666, cgraph_uid=1258, symbol_order=1280)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = -2
  BB 3
   Insn 32: point = 4, n_alt = -1
   Insn 15: point = 4, n_alt = -2
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = -2
   Insn 11: point = 7, n_alt = 3
   Insn 10: point = 8, n_alt = 3
  BB 4
   Insn 20: point = 9, n_alt = 2
  BB 2
   Insn 8: point = 10, n_alt = -1
   Insn 7: point = 10, n_alt = 1
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [5..8]
 r88: [9..9] [2..4]
 r89: [0..1]
 r90: [6..7]
Compressing live ranges: from 10 to 7 - 70%
Ranges after the compression:
 r87: [4..5]
 r88: [6..6] [2..3]
 r89: [0..1]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 20
changing reg in insn 15
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
deleting insn with uid = 25.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,10u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{97d,27u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":169 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":169 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":172 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":172 617 {*jcc_1}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 90
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":172 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 1 dx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":172 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [90])) "/usr/include/c++/7/bits/stl_vector.h":172 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":172 81 {*movdi_internal}
     (nil))
(call_insn 14 13 32 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIcEE8allocateERS0_m") [flags 0x3]  <function_decl 0x7f441b4d7600 allocate>) [0 allocate S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":172 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 32 14 33 3 (set (pc)
        (label_ref 23)) "/usr/include/c++/7/bits/stl_vector.h":172 649 {jump}
     (nil)
 -> 23)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 33 32 18)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88
(code_label 18 33 19 4 352 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 23 4 (set (reg/f:DI 0 ax [orig:88 iftmp.20_2 ] [88])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":172 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 23 20 24 5 354 (nil) [1 uses])
(note 24 23 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 24 30 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_vector.h":173 81 {*movdi_internal}
     (nil))
(insn 30 29 34 5 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":173 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 30 0 NOTE_INSN_DELETED)

;; Function _ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = char*; _ForwardIterator = char*; _Allocator = std::allocator<char>] (_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_, funcdef_no=3385, decl_uid=66694, cgraph_uid=1259, symbol_order=1281)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 32: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -2
   Insn 24: point = 3, n_alt = -2
   Insn 23: point = 4, n_alt = 0
   Insn 22: point = 4, n_alt = -2
   Insn 21: point = 5, n_alt = -2
   Insn 20: point = 6, n_alt = -2
   Insn 19: point = 7, n_alt = -2
   Insn 18: point = 8, n_alt = 3
   Insn 17: point = 9, n_alt = 3
   Insn 16: point = 10, n_alt = -2
   Insn 15: point = 11, n_alt = 0
   Insn 14: point = 11, n_alt = -2
   Insn 13: point = 12, n_alt = 3
   Insn 12: point = 13, n_alt = -2
   Insn 11: point = 14, n_alt = 0
   Insn 10: point = 14, n_alt = -2
   Insn 9: point = 15, n_alt = 3
   Insn 5: point = 16, n_alt = 5
   Insn 4: point = 16, n_alt = 5
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r87: [2..3]
 r88: [4..10]
 r89: [5..13]
 r90: [0..1]
 r91: [14..15]
 r92: [11..12]
 r93: [7..9]
 r94: [6..8]
Compressing live ranges: from 16 to 10 - 62%
Ranges after the compression:
 r87: [2..3]
 r88: [4..5]
 r89: [4..7]
 r90: [0..1]
 r91: [8..9]
 r92: [6..7]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 24
changing reg in insn 27
changing reg in insn 16
changing reg in insn 22
changing reg in insn 12
changing reg in insn 21
changing reg in insn 27
changing reg in insn 31
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
deleting insn with uid = 22.
deleting insn with uid = 24.
deleting insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.


_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = char*; _ForwardIterator = char*; _Allocator = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={8d,8u} r1={6d,3u} r2={5d,2u} r3={1d,1u} r4={5d,2u} r5={7d,4u} r6={1d,10u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 282{246d,36u,0e} in 20{17 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":305 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_uninitialized.h":305 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_uninitialized.h":305 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [86 __alloc+0 S8 A64])
        (reg:DI 2 cx [ __alloc ])) "/usr/include/c++/7/bits/stl_uninitialized.h":305 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_") [flags 0x3]  <function_decl 0x7f4418efc500 __make_move_if_noexcept_iterator>) [0 __make_move_if_noexcept_iterator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":311 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 3 bx [orig:89 D.69474 ] [89])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_") [flags 0x3]  <function_decl 0x7f4418efc500 __make_move_if_noexcept_iterator>) [0 __make_move_if_noexcept_iterator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":311 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di [orig:88 D.69475 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":311 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 1 dx [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [86 __alloc+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":312 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":312 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [93])) "/usr/include/c++/7/bits/stl_uninitialized.h":312 81 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (reg:DI 0 ax [94])) "/usr/include/c++/7/bits/stl_uninitialized.h":312 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (set (reg:DI 4 si)
        (reg:DI 3 bx [orig:89 D.69474 ] [89])) "/usr/include/c++/7/bits/stl_uninitialized.h":312 81 {*movdi_internal}
     (nil))
(call_insn 23 21 31 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E") [flags 0x3]  <function_decl 0x7f4418f42200 __uninitialized_copy_a>) [0 __uninitialized_copy_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":312 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 31 23 32 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":313 81 {*movdi_internal}
     (nil))
(insn 32 31 34 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":313 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 32 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = char*; _Container = std::vector<char, std::allocator<char> >] (_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC2ERKS1_, funcdef_no=3387, decl_uid=65665, cgraph_uid=1261, symbol_order=1283)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 5
   Insn 9: point = 1, n_alt = 3
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 4, n_alt = 3
   Insn 3: point = 5, n_alt = 5
   Insn 2: point = 5, n_alt = 5
 r87: [0..2]
 r88: [3..4]
 r89: [0..1]
Compressing live ranges: from 5 to 4 - 80%
Ranges after the compression:
 r87: [0..1]
 r88: [2..3]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = char*; _Container = std::vector<char, std::allocator<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 35{21d,14u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [90 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_iterator.h":779 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 __i+0 S8 A64])
        (reg:DI 4 si [ __i ])) "/usr/include/c++/7/bits/stl_iterator.h":779 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [87 __i+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":780 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [88]) [3 *__i_5(D)+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":780 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [90 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":780 81 {*movdi_internal}
     (nil))
(insn 10 9 13 2 (set (mem/f:DI (reg/f:DI 0 ax [89]) [3 this_3(D)->_M_current+0 S8 A64])
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_iterator.h":780 81 {*movdi_internal}
     (nil))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_iterator.h":780 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = char*] (_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_, funcdef_no=3389, decl_uid=66817, cgraph_uid=1263, symbol_order=1285)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 27{18d,9u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 D.66818+0 S8 A64])
        (reg:DI 5 di [ D.66818 ])) "/usr/include/c++/7/bits/stl_construct.h":117 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 D.66819+0 S8 A64])
        (reg:DI 4 si [ D.66819 ])) "/usr/include/c++/7/bits/stl_construct.h":117 81 {*movdi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":117 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 9 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_node<Ch>* rapidxml::memory_pool<Ch>::allocate_node(rapidxml::node_type, const Ch*, const Ch*, std::size_t, std::size_t) [with Ch = char] (_ZN8rapidxml11memory_poolIcE13allocate_nodeENS_9node_typeEPKcS4_mm, funcdef_no=3390, decl_uid=60327, cgraph_uid=1264, symbol_order=1286)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 98: point = 0, n_alt = -1
   Insn 97: point = 0, n_alt = -2
   Insn 93: point = 1, n_alt = -2
   Insn 90: point = 3, n_alt = 3
  BB 11
   Insn 104: point = 4, n_alt = -1
   Insn 76: point = 4, n_alt = 0
   Insn 75: point = 4, n_alt = -2
   Insn 74: point = 5, n_alt = -2
   Insn 73: point = 6, n_alt = -2
   Insn 72: point = 7, n_alt = 3
   Insn 71: point = 8, n_alt = 3
   Insn 70: point = 9, n_alt = 3
  BB 12
   Insn 85: point = 10, n_alt = 0
   Insn 84: point = 10, n_alt = -2
   Insn 83: point = 11, n_alt = -2
   Insn 82: point = 12, n_alt = 3
   Insn 81: point = 13, n_alt = 3
  BB 10
   Insn 68: point = 14, n_alt = -1
   Insn 67: point = 14, n_alt = 1
  BB 9
   Insn 65: point = 14, n_alt = -1
   Insn 64: point = 14, n_alt = 1
  BB 7
   Insn 102: point = 14, n_alt = -1
   Insn 50: point = 14, n_alt = 0
   Insn 49: point = 14, n_alt = -2
   Insn 48: point = 15, n_alt = -2
   Insn 47: point = 16, n_alt = -2
   Insn 46: point = 17, n_alt = 3
   Insn 45: point = 18, n_alt = 3
   Insn 44: point = 19, n_alt = 3
  BB 8
   Insn 59: point = 20, n_alt = 0
   Insn 58: point = 20, n_alt = -2
   Insn 57: point = 21, n_alt = -2
   Insn 56: point = 22, n_alt = 3
   Insn 55: point = 23, n_alt = 3
  BB 6
   Insn 42: point = 24, n_alt = -1
   Insn 41: point = 24, n_alt = 1
  BB 5
   Insn 39: point = 24, n_alt = -1
   Insn 38: point = 24, n_alt = 1
   Insn 37: point = 24, n_alt = 5
  BB 3
   Insn 100: point = 26, n_alt = -1
   Insn 29: point = 26, n_alt = -2
   Insn 28: point = 28, n_alt = 0
   Insn 27: point = 28, n_alt = -2
   Insn 26: point = 28, n_alt = -2
   Insn 25: point = 29, n_alt = 0
  BB 4
   Insn 34: point = 31, n_alt = -2
  BB 2
   Insn 23: point = 34, n_alt = -1
   Insn 22: point = 34, n_alt = 0
   Insn 21: point = 34, n_alt = -2
   Insn 20: point = 35, n_alt = 0
   Insn 19: point = 35, n_alt = 2
   Insn 18: point = 35, n_alt = -2
   Insn 17: point = 36, n_alt = 3
   Insn 16: point = 37, n_alt = 5
   Insn 15: point = 38, n_alt = -2
   Insn 14: point = 39, n_alt = 0
   Insn 13: point = 39, n_alt = -2
   Insn 12: point = 40, n_alt = 2
   Insn 11: point = 40, n_alt = 3
   Insn 7: point = 41, n_alt = 5
   Insn 6: point = 41, n_alt = 5
   Insn 5: point = 41, n_alt = 5
   Insn 4: point = 41, n_alt = 5
   Insn 3: point = 41, n_alt = 1
   Insn 2: point = 41, n_alt = 5
 r87: [14..19]
 r88: [20..23]
 r89: [4..9]
 r90: [10..13]
 r91: [31..31] [24..26]
 r92: [37..38]
 r93: [35..36]
 r94: [32..34] [27..30]
 r95: [2..3]
 r96: [0..1]
 r97: [39..40]
 r98: [28..29]
 r99: [16..18]
 r100: [15..17]
 r101: [21..22]
 r102: [6..8]
 r103: [5..7]
 r104: [11..12]
Compressing live ranges: from 41 to 25 - 60%
Ranges after the compression:
 r87: [8..9]
 r88: [10..11]
 r89: [4..5]
 r90: [6..7]
 r91: [16..16] [12..13]
 r92: [21..22]
 r93: [19..20]
 r94: [17..18] [14..15]
 r95: [2..3]
 r96: [0..1]
 r97: [23..24]
 r98: [14..15]
 r99: [8..9]
 r100: [8..9]
 r101: [10..11]
 r102: [4..5]
 r103: [4..5]
 r104: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 44
changing reg in insn 49
changing reg in insn 55
changing reg in insn 58
changing reg in insn 70
changing reg in insn 75
changing reg in insn 81
changing reg in insn 84
changing reg in insn 34
changing reg in insn 29
changing reg in insn 37
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 34
changing reg in insn 29
changing reg in insn 27
changing reg in insn 22
changing reg in insn 90
changing reg in insn 93
changing reg in insn 93
changing reg in insn 97
changing reg in insn 11
changing reg in insn 13
changing reg in insn 25
changing reg in insn 26
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 74
changing reg in insn 82
changing reg in insn 83
deleting insn with uid = 15.
deleting insn with uid = 47.
deleting insn with uid = 73.
deleting insn with uid = 93.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 85.


rapidxml::xml_node<Ch>* rapidxml::memory_pool<Ch>::allocate_node(rapidxml::node_type, const Ch*, const Ch*, std::size_t, std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={19d,13u} r1={12d,5u} r2={10d,3u} r3={1d,4u} r4={15d,8u} r5={15d,8u} r6={1d,39u} r7={1d,20u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={12d,5u} r18={7d} r19={7d} r20={1d,1u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={8d,1u} r38={8d,1u} r39={7d} r40={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} 
;;    total ref usage 667{559d,108u,0e} in 61{54 regular + 7 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 97
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [52 type+0 S4 A32])
        (reg:SI 4 si [ type ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 82 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 name+0 S8 A64])
        (reg:DI 1 dx [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 value+0 S8 A64])
        (reg:DI 2 cx [ value ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [8 name_size+0 S8 A64])
        (reg:DI 37 r8 [ name_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [8 value_size+0 S8 A64])
        (reg:DI 38 r9 [ value_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":415 81 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":419 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (const_int 96 [0x60])) "libs/src/../include/rapidxml/rapidxml.hpp":419 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "libs/src/../include/rapidxml/rapidxml.hpp":419 81 {*movdi_internal}
     (nil))
(call_insn 14 13 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE16allocate_alignedEm") [flags 0x3]  <function_decl 0x7f441986d000 allocate_aligned>) [0 allocate_aligned S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":419 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 14 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [9 memory+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 _14 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":419 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [orig:93 _16 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [9 memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:93 _16 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (const_int 96 [0x60])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZnwmPv") [flags 0x3]  <function_decl 0x7f441b8f5000 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":420 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 21 20 22 2 (set (reg/f:DI 3 bx [orig:94 _18 ] [94])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 3 bx [orig:94 _18 ] [94])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":420 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":420 617 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 98
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [52 type+0 S4 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":420 82 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:SI 4 si)
        (reg:SI 0 ax [98])) "libs/src/../include/rapidxml/rapidxml.hpp":420 82 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(call_insn 28 27 29 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcEC1ENS_9node_typeE") [flags 0x3]  <function_decl 0x7f441985f300 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":420 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 29 28 100 3 (set (reg/f:DI 0 ax [orig:91 iftmp.41_5 ] [91])
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(jump_insn 100 29 101 3 (set (pc)
        (label_ref 35)) 649 {jump}
     (nil)
 -> 35)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

(barrier 101 100 32)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 91
(code_label 32 101 33 4 360 (nil) [1 uses])
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:DI 0 ax [orig:91 iftmp.41_5 ] [91])
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 17 [flags]
(code_label 35 34 36 5 361 (nil) [1 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 iftmp.41_5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":420 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [3 name+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":421 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 39 38 40 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":421 617 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [8 name_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":423 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 42 41 43 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":423 617 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 99 100
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":424 81 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 1 dx [99])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [8 name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":424 81 {*movdi_internal}
     (nil))
(insn 46 45 48 7 (set (reg:DI 2 cx [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":424 81 {*movdi_internal}
     (nil))
(insn 48 46 49 7 (set (reg:DI 4 si)
        (reg:DI 2 cx [100])) "libs/src/../include/rapidxml/rapidxml.hpp":424 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":424 81 {*movdi_internal}
     (nil))
(call_insn 50 49 102 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKcm") [flags 0x3]  <function_decl 0x7f441984ae00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":424 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 102 50 103 7 (set (pc)
        (label_ref 62)) 649 {jump}
     (nil)
 -> 62)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 103 102 53)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 101
(code_label 53 103 54 8 363 (nil) [1 uses])
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":426 81 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:DI 1 dx [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":426 81 {*movdi_internal}
     (nil))
(insn 57 56 58 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [101])) "libs/src/../include/rapidxml/rapidxml.hpp":426 81 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":426 81 {*movdi_internal}
     (nil))
(call_insn 59 58 62 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKc") [flags 0x3]  <function_decl 0x7f441984af00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":426 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;;              8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 62 59 63 9 362 (nil) [2 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [3 value+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":428 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":428 617 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       10 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [8 value_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":430 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 68 67 69 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":430 617 {*jcc_1}
     (nil)
 -> 79)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 102 103
(note 69 68 70 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 11 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":431 81 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (reg:DI 1 dx [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [8 value_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":431 81 {*movdi_internal}
     (nil))
(insn 72 71 74 11 (set (reg:DI 2 cx [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":431 81 {*movdi_internal}
     (nil))
(insn 74 72 75 11 (set (reg:DI 4 si)
        (reg:DI 2 cx [103])) "libs/src/../include/rapidxml/rapidxml.hpp":431 81 {*movdi_internal}
     (nil))
(insn 75 74 76 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":431 81 {*movdi_internal}
     (nil))
(call_insn 76 75 104 11 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":431 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 104 76 105 11 (set (pc)
        (label_ref 88)) 649 {jump}
     (nil)
 -> 88)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 105 104 79)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 104
(code_label 79 105 80 12 366 (nil) [1 uses])
(note 80 79 81 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 12 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":433 81 {*movdi_internal}
     (nil))
(insn 82 81 83 12 (set (reg:DI 1 dx [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":433 81 {*movdi_internal}
     (nil))
(insn 83 82 84 12 (set (reg:DI 4 si)
        (reg:DI 1 dx [104])) "libs/src/../include/rapidxml/rapidxml.hpp":433 81 {*movdi_internal}
     (nil))
(insn 84 83 85 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":433 81 {*movdi_internal}
     (nil))
(call_insn 85 84 88 12 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKc") [flags 0x3]  <function_decl 0x7f441984a700 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":433 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9
;;              12 (FALLTHRU)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 95 96
(code_label 88 85 89 13 365 (nil) [2 uses])
(note 89 88 90 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 97 13 (set (reg/f:DI 0 ax [orig:95 _33 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":435 81 {*movdi_internal}
     (nil))
(insn 97 90 98 13 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:96 <retval> ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":436 81 {*movdi_internal}
     (nil))
(insn 98 97 106 13 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":436 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 106 98 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::node_name_pred; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_14node_name_predELi0EEEvRPc, funcdef_no=3391, decl_uid=66824, cgraph_uid=1265, symbol_order=1287)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::node_name_pred; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 371 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE14node_name_pred4testEc") [flags 0x3]  <function_decl 0x7f4418f47b00 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.45_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.45_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 370 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_base<Ch>::name(const Ch*, std::size_t) [with Ch = char] (_ZN8rapidxml8xml_baseIcE4nameEPKcm, funcdef_no=3392, decl_uid=60168, cgraph_uid=1266, symbol_order=1288)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = 5
   Insn 12: point = 1, n_alt = 3
   Insn 11: point = 2, n_alt = 3
   Insn 10: point = 3, n_alt = 5
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [3..5]
 r88: [3..4]
 r89: [0..2]
 r90: [0..1]
Compressing live ranges: from 6 to 4 - 66%
Ranges after the compression:
 r87: [2..3]
 r88: [2..3]
 r89: [0..1]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_base<Ch>::name(const Ch*, std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,2u} r1={3d,3u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,9u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 41{22d,19u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89 90
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":721 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":721 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 size+0 S8 A64])
        (reg:DI 1 dx [ size ])) "libs/src/../include/rapidxml/rapidxml.hpp":721 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":723 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":723 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (reg/f:DI 0 ax [87]) [3 this_2(D)->m_name+0 S8 A64])
        (reg/f:DI 1 dx [88])) "libs/src/../include/rapidxml/rapidxml.hpp":723 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":724 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":724 81 {*movdi_internal}
     (nil))
(insn 13 12 16 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 16 [0x10])) [8 this_2(D)->m_name_size+0 S8 A64])
        (reg:DI 1 dx [90])) "libs/src/../include/rapidxml/rapidxml.hpp":724 81 {*movdi_internal}
     (nil))
(insn 16 13 17 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":725 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 16 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_document<Ch>::parse_node_attributes(Ch*&, rapidxml::xml_node<Ch>*) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE21parse_node_attributesILi0EEEvRPcPNS_8xml_nodeIcEE, funcdef_no=3393, decl_uid=66828, cgraph_uid=1267, symbol_order=1289)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=176 from oldreg=97, assigning class GENERAL_REGS to r176
   67: {r176:DI=r176:DI-r98:DI;clobber flags:CC;}
      REG_DEAD r98:DI
      REG_DEAD r97:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  244: r176:DI=r97:DI
    Inserting insn reload after:
  245: r99:DI=r176:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 98:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 99:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 109:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 119:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 126:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 143:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 144:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 154:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 157:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 166:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 175:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 181:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=177 from oldreg=116, assigning class GENERAL_REGS to r177
  181: {r177:DI=r177:DI-r117:DI;clobber flags:CC;}
      REG_DEAD r117:DI
      REG_DEAD r116:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  246: r177:DI=r116:DI
    Inserting insn reload after:
  247: r118:DI=r177:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 190:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 204:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 215:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 224
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 225:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 18
EBB 17

********** Pseudo live ranges #1: **********

  BB 5
   Insn 48: point = 0, n_alt = 0
   Insn 47: point = 0, n_alt = -2
   Insn 46: point = 1, n_alt = 4
   Insn 45: point = 1, n_alt = 4
   Insn 44: point = 1, n_alt = 0
   Insn 43: point = 1, n_alt = -2
   Insn 42: point = 1, n_alt = 4
   Insn 41: point = 1, n_alt = -2
   Insn 40: point = 2, n_alt = 3
   Insn 39: point = 3, n_alt = -2
   Insn 38: point = 5, n_alt = -2
   Insn 37: point = 6, n_alt = 0
   Insn 36: point = 6, n_alt = 2
  BB 7
   Insn 101: point = 6, n_alt = 0
   Insn 100: point = 6, n_alt = -2
   Insn 99: point = 7, n_alt = 4
   Insn 98: point = 7, n_alt = 4
   Insn 97: point = 7, n_alt = 0
   Insn 96: point = 7, n_alt = -2
   Insn 95: point = 7, n_alt = 4
   Insn 94: point = 7, n_alt = -2
   Insn 93: point = 8, n_alt = 3
   Insn 92: point = 10, n_alt = 3
   Insn 91: point = 11, n_alt = -2
   Insn 90: point = 13, n_alt = -2
   Insn 89: point = 14, n_alt = 0
   Insn 88: point = 14, n_alt = 2
  BB 10
   Insn 146: point = 14, n_alt = 0
   Insn 145: point = 14, n_alt = -2
   Insn 144: point = 15, n_alt = 4
   Insn 143: point = 15, n_alt = 4
   Insn 142: point = 15, n_alt = 0
   Insn 141: point = 15, n_alt = -2
   Insn 140: point = 15, n_alt = 4
   Insn 139: point = 15, n_alt = -2
   Insn 138: point = 16, n_alt = 3
   Insn 137: point = 18, n_alt = 3
   Insn 136: point = 19, n_alt = -2
   Insn 135: point = 21, n_alt = -2
   Insn 134: point = 22, n_alt = 0
   Insn 133: point = 22, n_alt = 2
  BB 15
   Insn 207: point = 22, n_alt = 0
   Insn 206: point = 22, n_alt = -2
   Insn 205: point = 23, n_alt = 4
   Insn 204: point = 23, n_alt = 4
   Insn 203: point = 23, n_alt = 0
   Insn 202: point = 23, n_alt = -2
   Insn 201: point = 23, n_alt = 4
   Insn 200: point = 23, n_alt = -2
   Insn 199: point = 24, n_alt = 3
   Insn 198: point = 26, n_alt = 3
   Insn 197: point = 27, n_alt = -2
   Insn 196: point = 29, n_alt = -2
   Insn 195: point = 30, n_alt = 0
   Insn 194: point = 30, n_alt = 2
  BB 17
  BB 18
   Insn 242: point = 30, n_alt = -1
  BB 3
   Insn 18: point = 30, n_alt = -1
   Insn 17: point = 30, n_alt = 0
   Insn 16: point = 31, n_alt = 0
   Insn 15: point = 32, n_alt = 0
   Insn 14: point = 33, n_alt = -2
   Insn 13: point = 34, n_alt = 0
   Insn 12: point = 34, n_alt = -2
   Insn 11: point = 35, n_alt = 0
   Insn 10: point = 37, n_alt = 2
   Insn 9: point = 39, n_alt = 3
   Insn 8: point = 41, n_alt = 3
  BB 16
   Insn 238: point = 42, n_alt = -1
   Insn 228: point = 42, n_alt = 0
   Insn 227: point = 42, n_alt = -2
   Insn 226: point = 43, n_alt = 3
   Insn 225: point = 44, n_alt = 6
   Insn 224: point = 45, n_alt = 0
   Insn 223: point = 47, n_alt = -2
   Insn 222: point = 48, n_alt = 0
   Insn 221: point = 48, n_alt = -2
   Insn 220: point = 49, n_alt = 3
   Insn 219: point = 50, n_alt = -2
   Insn 218: point = 51, n_alt = 0
   Insn 217: point = 51, n_alt = -2
   Insn 216: point = 52, n_alt = 3
   Insn 215: point = 53, n_alt = 5
   Insn 214: point = 54, n_alt = 3
   Insn 213: point = 55, n_alt = 3
   Insn 212: point = 57, n_alt = 3
   Insn 211: point = 59, n_alt = 3
  BB 14
   Insn 192: point = 60, n_alt = -1
   Insn 191: point = 60, n_alt = 0
   Insn 190: point = 61, n_alt = 2
   Insn 189: point = 63, n_alt = 3
   Insn 188: point = 65, n_alt = 3
   Insn 187: point = 66, n_alt = 0
   Insn 186: point = 66, n_alt = -2
   Insn 185: point = 67, n_alt = -2
   Insn 184: point = 68, n_alt = -2
   Insn 183: point = 69, n_alt = 3
   Insn 182: point = 70, n_alt = -2
   Insn 247: point = 72, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1
   Insn 181: point = 74, n_alt = 0
   Insn 246: point = 75, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1
	Hard reg 2 is preferable by r177 with profit 1
   Insn 180: point = 77, n_alt = 3
   Insn 179: point = 78, n_alt = 3
   Insn 178: point = 79, n_alt = 3
  BB 12
   Insn 236: point = 80, n_alt = -1
   Insn 166: point = 80, n_alt = 5
   Insn 165: point = 81, n_alt = -2
   Insn 164: point = 82, n_alt = 0
   Insn 163: point = 82, n_alt = -2
   Insn 162: point = 83, n_alt = 3
  BB 13
   Insn 175: point = 84, n_alt = 5
   Insn 174: point = 85, n_alt = -2
   Insn 173: point = 86, n_alt = 0
   Insn 172: point = 86, n_alt = -2
   Insn 171: point = 87, n_alt = 3
  BB 11
   Insn 160: point = 88, n_alt = -1
   Insn 159: point = 88, n_alt = 0
   Insn 158: point = 88, n_alt = 1
   Insn 157: point = 88, n_alt = 5
   Insn 156: point = 89, n_alt = 3
   Insn 155: point = 91, n_alt = 3
   Insn 154: point = 92, n_alt = 5
   Insn 153: point = 93, n_alt = 3
   Insn 152: point = 94, n_alt = 3
   Insn 151: point = 96, n_alt = 3
   Insn 150: point = 98, n_alt = 3
  BB 9
   Insn 131: point = 99, n_alt = -1
   Insn 130: point = 99, n_alt = 0
  BB 8
   Insn 128: point = 99, n_alt = -1
   Insn 127: point = 99, n_alt = 0
   Insn 126: point = 99, n_alt = 6
   Insn 125: point = 100, n_alt = 2
   Insn 124: point = 102, n_alt = 3
   Insn 123: point = 104, n_alt = 3
   Insn 122: point = 105, n_alt = 0
   Insn 121: point = 105, n_alt = -2
   Insn 120: point = 106, n_alt = 3
   Insn 119: point = 107, n_alt = 6
   Insn 118: point = 108, n_alt = 0
   Insn 117: point = 110, n_alt = -2
   Insn 116: point = 111, n_alt = 0
   Insn 115: point = 111, n_alt = -2
   Insn 114: point = 112, n_alt = 3
   Insn 113: point = 113, n_alt = -2
   Insn 112: point = 114, n_alt = 0
   Insn 111: point = 114, n_alt = -2
   Insn 110: point = 115, n_alt = 3
   Insn 109: point = 116, n_alt = 5
   Insn 108: point = 117, n_alt = 3
   Insn 107: point = 118, n_alt = 3
   Insn 106: point = 120, n_alt = 3
   Insn 105: point = 122, n_alt = 3
  BB 6
   Insn 86: point = 123, n_alt = -1
   Insn 85: point = 123, n_alt = 0
   Insn 84: point = 124, n_alt = 2
   Insn 83: point = 126, n_alt = 3
   Insn 82: point = 128, n_alt = 3
   Insn 81: point = 129, n_alt = 0
   Insn 80: point = 129, n_alt = -2
   Insn 79: point = 130, n_alt = 3
   Insn 78: point = 131, n_alt = 0
   Insn 77: point = 131, n_alt = -2
   Insn 76: point = 132, n_alt = -2
   Insn 75: point = 133, n_alt = 3
   Insn 74: point = 134, n_alt = 3
   Insn 73: point = 135, n_alt = 0
   Insn 72: point = 135, n_alt = -2
   Insn 71: point = 136, n_alt = -2
   Insn 70: point = 137, n_alt = -2
   Insn 69: point = 138, n_alt = 3
   Insn 68: point = 139, n_alt = -2
   Insn 245: point = 141, n_alt = -2
	Hard reg 1 is preferable by r176 with profit 1
   Insn 67: point = 143, n_alt = 0
   Insn 244: point = 144, n_alt = -2
	Hard reg 1 is preferable by r176 with profit 1
	Hard reg 2 is preferable by r176 with profit 1
   Insn 66: point = 146, n_alt = 3
   Insn 65: point = 147, n_alt = -2
   Insn 64: point = 149, n_alt = 3
   Insn 63: point = 151, n_alt = 3
   Insn 62: point = 152, n_alt = 3
   Insn 61: point = 153, n_alt = 5
   Insn 60: point = 154, n_alt = -2
   Insn 59: point = 155, n_alt = 0
   Insn 58: point = 155, n_alt = -2
   Insn 57: point = 156, n_alt = 2
   Insn 56: point = 156, n_alt = 2
   Insn 55: point = 156, n_alt = 2
   Insn 54: point = 156, n_alt = 2
   Insn 53: point = 156, n_alt = 0
   Insn 52: point = 158, n_alt = 3
  BB 4
   Insn 34: point = 159, n_alt = -1
   Insn 33: point = 159, n_alt = 0
   Insn 32: point = 160, n_alt = 3
   Insn 31: point = 162, n_alt = 3
   Insn 30: point = 163, n_alt = 0
   Insn 29: point = 163, n_alt = -2
   Insn 28: point = 164, n_alt = 3
   Insn 27: point = 165, n_alt = 5
   Insn 26: point = 166, n_alt = 3
   Insn 25: point = 167, n_alt = 3
   Insn 24: point = 169, n_alt = 3
   Insn 23: point = 171, n_alt = 3
   Insn 22: point = 172, n_alt = 5
   Insn 21: point = 173, n_alt = 3
   Insn 20: point = 175, n_alt = 3
  BB 2
   Insn 4: point = 176, n_alt = 5
   Insn 3: point = 176, n_alt = 5
   Insn 2: point = 176, n_alt = 5
 r87: [38..39]
 r88: [36..37]
 r89: [34..35]
 r90: [32..33]
 r91: [168..169]
 r92: [165..167]
 r93: [159..160]
 r94: [155..156]
 r95: [135..152]
 r96: [148..149]
 r97: [145..147]
 r98: [143..146]
 r99: [140..141]
 r100: [137..139]
 r101: [125..126]
 r102: [123..124]
 r103: [7..8]
 r104: [119..120]
 r105: [116..118]
 r106: [114..115]
 r107: [109..113]
 r108: [111..112]
 r109: [109..110]
 r110: [107..108]
 r111: [101..102]
 r112: [15..16]
 r113: [95..96]
 r114: [92..94]
 r115: [66..79]
 r116: [76..78]
 r117: [74..77]
 r118: [71..72]
 r119: [68..70]
 r120: [62..63]
 r121: [60..61]
 r122: [23..24]
 r123: [56..57]
 r124: [53..55]
 r125: [51..52]
 r126: [46..50]
 r127: [48..49]
 r128: [46..47]
 r129: [44..45]
 r130: [30..31]
 r131: [153..154]
 r132: [14..19]
 r133: [84..85]
 r134: [80..81]
 r135: [22..27]
 r136: [6..11]
 r137: [0..3]
 r138: [40..41]
 r139: [174..175]
 r140: [172..173]
 r141: [170..171]
 r142: [165..166]
 r143: [163..164]
 r144: [161..162]
 r145: [4..5]
 r146: [1..2]
 r147: [157..158]
 r148: [150..151]
 r149: [136..138]
 r150: [132..134]
 r151: [131..133]
 r152: [129..130]
 r153: [127..128]
 r154: [12..13]
 r155: [9..10]
 r156: [121..122]
 r157: [116..117]
 r158: [105..106]
 r159: [103..104]
 r160: [99..100]
 r161: [20..21]
 r162: [17..18]
 r163: [97..98]
 r164: [92..93]
 r165: [90..91]
 r166: [88..89]
 r167: [82..83]
 r168: [86..87]
 r169: [67..69]
 r170: [64..65]
 r171: [28..29]
 r172: [25..26]
 r173: [58..59]
 r174: [53..54]
 r175: [42..43]
 r176: [142..144]
 r177: [73..75]
Compressing live ranges: from 176 to 148 - 84%
Ranges after the compression:
 r87: [30..31]
 r88: [28..29]
 r89: [26..27]
 r90: [24..25]
 r91: [140..141]
 r92: [138..139]
 r93: [132..133]
 r94: [128..129]
 r95: [114..125]
 r96: [122..123]
 r97: [120..121]
 r98: [118..121]
 r99: [116..117]
 r100: [114..115]
 r101: [106..107]
 r102: [104..105]
 r103: [4..5]
 r104: [100..101]
 r105: [98..99]
 r106: [96..97]
 r107: [92..95]
 r108: [94..95]
 r109: [92..93]
 r110: [90..91]
 r111: [84..85]
 r112: [10..11]
 r113: [78..79]
 r114: [76..77]
 r115: [56..63]
 r116: [62..63]
 r117: [60..63]
 r118: [58..59]
 r119: [56..57]
 r120: [52..53]
 r121: [50..51]
 r122: [16..17]
 r123: [46..47]
 r124: [44..45]
 r125: [42..43]
 r126: [38..41]
 r127: [40..41]
 r128: [38..39]
 r129: [36..37]
 r130: [22..23]
 r131: [126..127]
 r132: [10..13]
 r133: [68..69]
 r134: [64..65]
 r135: [16..19]
 r136: [4..7]
 r137: [0..1]
 r138: [32..33]
 r139: [146..147]
 r140: [144..145]
 r141: [142..143]
 r142: [138..139]
 r143: [136..137]
 r144: [134..135]
 r145: [2..3]
 r146: [0..1]
 r147: [130..131]
 r148: [124..125]
 r149: [114..115]
 r150: [112..113]
 r151: [112..113]
 r152: [110..111]
 r153: [108..109]
 r154: [8..9]
 r155: [6..7]
 r156: [102..103]
 r157: [98..99]
 r158: [88..89]
 r159: [86..87]
 r160: [82..83]
 r161: [14..15]
 r162: [12..13]
 r163: [80..81]
 r164: [76..77]
 r165: [74..75]
 r166: [72..73]
 r167: [66..67]
 r168: [70..71]
 r169: [56..57]
 r170: [54..55]
 r171: [20..21]
 r172: [18..19]
 r173: [48..49]
 r174: [44..45]
 r175: [34..35]
 r176: [118..119]
 r177: [60..61]

********** Assignment #1: **********

	 Assigning to 176 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=176, tfreq=3)...
	   Assign 2 to reload r176 (freq=3)
	 Assigning to 177 (cl=GENERAL_REGS, orig=116, freq=3, tfirst=177, tfreq=3)...
	   Assign 2 to reload r177 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 53
changing reg in insn 58
changing reg in insn 62
changing reg in insn 72
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 93
changing reg in insn 94
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 124
changing reg in insn 125
changing reg in insn 138
changing reg in insn 139
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 178
changing reg in insn 186
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 199
changing reg in insn 200
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 16
changing reg in insn 17
changing reg in insn 60
changing reg in insn 61
changing reg in insn 136
changing reg in insn 145
changing reg in insn 141
changing reg in insn 174
changing reg in insn 175
changing reg in insn 165
changing reg in insn 166
changing reg in insn 197
changing reg in insn 206
changing reg in insn 202
changing reg in insn 91
changing reg in insn 100
changing reg in insn 96
changing reg in insn 39
changing reg in insn 47
changing reg in insn 43
changing reg in insn 8
changing reg in insn 9
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 52
changing reg in insn 53
changing reg in insn 63
changing reg in insn 64
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 76
changing reg in insn 75
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 162
changing reg in insn 163
changing reg in insn 171
changing reg in insn 172
changing reg in insn 183
changing reg in insn 185
changing reg in insn 188
changing reg in insn 189
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 226
changing reg in insn 227
deleting insn with uid = 14.
deleting insn with uid = 38.
deleting insn with uid = 60.
deleting insn with uid = 244.
deleting insn with uid = 68.
deleting insn with uid = 70.
deleting insn with uid = 90.
deleting insn with uid = 117.
deleting insn with uid = 135.
deleting insn with uid = 165.
deleting insn with uid = 174.
deleting insn with uid = 246.
deleting insn with uid = 182.
deleting insn with uid = 184.
deleting insn with uid = 196.
deleting insn with uid = 223.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 222.
verify found no changes in insn with uid = 228.


void rapidxml::xml_document<Ch>::parse_node_attributes(Ch*&, rapidxml::xml_node<Ch>*) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8]
;;  ref usage 	r0={84d,68u} r1={48d,21u} r2={35d,7u} r3={6d,10u} r4={40d,13u} r5={55d,28u} r6={1d,73u} r7={1d,45u} r8={27d} r9={27d} r10={27d} r11={27d} r12={27d} r13={27d} r14={27d} r15={27d} r17={44d,8u} r18={27d} r19={27d} r20={1d,1u,1e} r21={28d} r22={28d} r23={28d} r24={28d} r25={28d} r26={28d} r27={28d} r28={28d} r29={27d} r30={27d} r31={27d} r32={27d} r33={27d} r34={27d} r35={27d} r36={27d} r37={29d,1u} r38={28d} r39={27d} r40={27d} r45={27d} r46={27d} r47={27d} r48={27d} r49={27d} r50={27d} r51={27d} r52={27d} r53={27d} r54={27d} r55={27d} r56={27d} r57={27d} r58={27d} r59={27d} r60={27d} r61={27d} r62={27d} r63={27d} r64={27d} r65={27d} r66={27d} r67={27d} r68={27d} r69={27d} r70={27d} r71={27d} r72={27d} r73={27d} r74={27d} r75={27d} r76={27d} r77={27d} r78={27d} r79={27d} r80={27d} 
;;    total ref usage 2384{2108d,275u,1e} in 190{163 regular + 27 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":2237 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":2237 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [51 node+0 S8 A64])
        (reg:DI 1 dx [ node ])) "libs/src/../include/rapidxml/rapidxml.hpp":2237 81 {*movdi_internal}
     (nil))
(note 5 4 229 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 130 138
(code_label 229 5 7 3 381 (nil) [1 uses])
(note 7 229 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2240 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [138]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2240 81 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2240 84 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (sign_extend:SI (reg:QI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 151 {extendqisi2}
     (nil))
(insn 12 11 13 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":2240 82 {*movsi_internal}
     (nil))
(call_insn 13 12 15 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE19attribute_name_pred4testEc") [flags 0x3]  <function_decl 0x7f4418f47e00 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 15 13 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 _4 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 1 {*cmpqi_ccno_1}
     (nil))
(insn 16 15 17 3 (set (reg:QI 0 ax [orig:130 retval.47_50 ] [130])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 613 {*setcc_qi}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:130 retval.47_50 ] [130])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 241)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2240 617 {*jcc_1}
     (nil)
 -> 241)
;;  succ:       4 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 139 140 141 142 143 144
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2243 81 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [140])
        (mem/f:DI (reg/f:DI 0 ax [139]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2243 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])
        (reg/f:DI 0 ax [140])) "libs/src/../include/rapidxml/rapidxml.hpp":2243 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2244 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [141]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2244 81 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 1 dx [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2244 218 {*adddi_1}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2244 81 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (mem/f:DI (reg/f:DI 0 ax [142]) [3 *text_48(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:92 _6 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":2244 81 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2245 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [143])) "libs/src/../include/rapidxml/rapidxml.hpp":2245 81 {*movdi_internal}
     (nil))
(call_insn 30 29 31 4 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_19attribute_name_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4418f47f00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2245 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2246 81 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [144]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2246 81 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])
            (reg/f:DI 0 ax [orig:93 _7 ] [93]))) "libs/src/../include/rapidxml/rapidxml.hpp":2246 8 {*cmpdi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2246 617 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 137 145 146
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(call_insn 37 36 39 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2247 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 37 40 5 (set (reg/f:DI 3 bx [orig:137 _98 ] [137])
        (reg/f:DI 0 ax [145])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 1 dx)
        (reg:DI 0 ax [146])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f44186591b0 *.LC19>)) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:137 _98 ] [137])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(call_insn 44 43 45 5 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 45 44 46 5 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:137 _98 ] [137])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 81 {*movdi_internal}
     (nil))
(call_insn 48 47 49 5 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2247 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 49 48 50)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 97 98 99 100 101 102 131 147 148 149 150 151 152 153
(code_label 50 49 51 6 375 (nil) [1 uses])
(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 6 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 0 ax [147])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2250 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 54 53 55 6 (set (reg:DI 37 r8)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 2 cx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 57 56 58 6 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 _8 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(call_insn 59 58 61 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE18allocate_attributeEPKcS3_mm") [flags 0x3]  <function_decl 0x7f441985f800 allocate_attribute>) [0 allocate_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2250 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 61 59 62 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [orig:131 _56 ] [131])) "libs/src/../include/rapidxml/rapidxml.hpp":2250 81 {*movdi_internal}
     (nil))
(insn 62 61 63 6 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 63 62 64 6 (set (reg/f:DI 1 dx [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 64 63 65 6 (set (reg/f:DI 1 dx [orig:96 _10 ] [96])
        (mem/f:DI (reg/f:DI 1 dx [148]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 2 cx [orig:97 _11 ] [97])
        (reg/f:DI 1 dx [orig:96 _10 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 1 dx [orig:98 name.48_12 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 67 66 245 6 (parallel [
            (set (reg:DI 2 cx [orig:97 _11 ] [97])
                (minus:DI (reg:DI 2 cx [orig:97 _11 ] [97])
                    (reg:DI 1 dx [orig:98 name.48_12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2251 274 {*subdi_1}
     (nil))
(insn 245 67 69 6 (set (reg:DI 1 dx [orig:99 _13 ] [99])
        (reg:DI 2 cx [orig:97 _11 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 69 245 71 6 (set (reg:DI 2 cx [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 71 69 72 6 (set (reg:DI 4 si)
        (reg:DI 2 cx [149])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 81 {*movdi_internal}
     (nil))
(call_insn 73 72 74 6 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKcm") [flags 0x3]  <function_decl 0x7f441984ae00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2251 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 74 73 75 6 (set (reg:DI 1 dx [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2252 81 {*movdi_internal}
     (nil))
(insn 75 74 76 6 (set (reg:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2252 81 {*movdi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [150])) "libs/src/../include/rapidxml/rapidxml.hpp":2252 81 {*movdi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [151])) "libs/src/../include/rapidxml/rapidxml.hpp":2252 81 {*movdi_internal}
     (nil))
(call_insn 78 77 79 6 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE16append_attributeEPNS_13xml_attributeIcEE") [flags 0x3]  <function_decl 0x7f441985c700 append_attribute>) [0 append_attribute S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2252 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 79 78 80 6 (set (reg:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2255 81 {*movdi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [152])) "libs/src/../include/rapidxml/rapidxml.hpp":2255 81 {*movdi_internal}
     (nil))
(call_insn 81 80 82 6 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2255 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2258 81 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [153]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2258 81 {*movdi_internal}
     (nil))
(insn 84 83 85 6 (set (reg:QI 0 ax [orig:102 _16 ] [102])
        (mem:QI (reg/f:DI 0 ax [orig:101 _15 ] [101]) [0 *_15+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2258 84 {*movqi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:102 _16 ] [102])
            (const_int 61 [0x3d]))) "libs/src/../include/rapidxml/rapidxml.hpp":2258 5 {*cmpqi_1}
     (nil))
(jump_insn 86 85 87 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2258 617 {*jcc_1}
     (nil)
 -> 103)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 136 154 155
(note 87 86 88 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 7 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(call_insn 89 88 91 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2259 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 91 89 92 7 (set (reg/f:DI 3 bx [orig:136 _94 ] [136])
        (reg/f:DI 0 ax [154])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 92 91 93 7 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 93 92 94 7 (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [155]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 94 93 95 7 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:103 _17 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 95 94 96 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f4418659240 *.LC20>)) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 96 95 97 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:136 _94 ] [136])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(call_insn 97 96 98 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 98 97 99 7 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 99 98 100 7 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(insn 100 99 101 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:136 _94 ] [136])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 81 {*movdi_internal}
     (nil))
(call_insn 101 100 102 7 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2259 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 103)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 107 108 109 110 111 156 157 158 159 160
(code_label 103 102 104 8 376 (nil) [1 uses])
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 8 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2260 81 {*movdi_internal}
     (nil))
(insn 106 105 107 8 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [156]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2260 81 {*movdi_internal}
     (nil))
(insn 107 106 108 8 (parallel [
            (set (reg/f:DI 1 dx [orig:105 _19 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 _18 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2260 218 {*adddi_1}
     (nil))
(insn 108 107 109 8 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2260 81 {*movdi_internal}
     (nil))
(insn 109 108 110 8 (set (mem/f:DI (reg/f:DI 0 ax [157]) [3 *text_48(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:105 _19 ] [105])) "libs/src/../include/rapidxml/rapidxml.hpp":2260 81 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2264 81 {*movdi_internal}
     (nil))
(insn 111 110 112 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:106 _20 ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":2264 81 {*movdi_internal}
     (nil))
(call_insn 112 111 113 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE4nameEv") [flags 0x3]  <function_decl 0x7f441984aa00 name>) [0 name S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2264 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 113 112 114 8 (set (reg/f:DI 3 bx [orig:107 _21 ] [107])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2264 81 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2264 81 {*movdi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:108 _22 ] [108])) "libs/src/../include/rapidxml/rapidxml.hpp":2264 81 {*movdi_internal}
     (nil))
(call_insn 116 115 118 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE9name_sizeEv") [flags 0x3]  <function_decl 0x7f441984ab00 name_size>) [0 name_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2264 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 118 116 119 8 (parallel [
            (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 _23 ] [109])
                    (reg/f:DI 3 bx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2264 218 {*adddi_1}
     (nil))
(insn 119 118 120 8 (set (mem:QI (reg/f:DI 0 ax [orig:110 _24 ] [110]) [0 *_24+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2264 84 {*movqi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2267 81 {*movdi_internal}
     (nil))
(insn 121 120 122 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [158])) "libs/src/../include/rapidxml/rapidxml.hpp":2267 81 {*movdi_internal}
     (nil))
(call_insn 122 121 123 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2267 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 123 122 124 8 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2270 81 {*movdi_internal}
     (nil))
(insn 124 123 125 8 (set (reg/f:DI 0 ax [orig:111 _25 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [159]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2270 81 {*movdi_internal}
     (nil))
(insn 125 124 126 8 (set (reg:QI 0 ax [160])
        (mem:QI (reg/f:DI 0 ax [orig:111 _25 ] [111]) [0 *_25+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2270 84 {*movqi_internal}
     (nil))
(insn 126 125 127 8 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -53 [0xffffffffffffffcb])) [0 quote+0 S1 A8])
        (reg:QI 0 ax [160])) "libs/src/../include/rapidxml/rapidxml.hpp":2270 84 {*movqi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -53 [0xffffffffffffffcb])) [0 quote+0 S1 A8])
            (const_int 39 [0x27]))) "libs/src/../include/rapidxml/rapidxml.hpp":2271 5 {*cmpqi_1}
     (nil))
(jump_insn 128 127 129 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2271 617 {*jcc_1}
     (nil)
 -> 148)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 129 128 130 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -53 [0xffffffffffffffcb])) [0 quote+0 S1 A8])
            (const_int 34 [0x22]))) "libs/src/../include/rapidxml/rapidxml.hpp":2271 5 {*cmpqi_1}
     (nil))
(jump_insn 131 130 132 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2271 617 {*jcc_1}
     (nil)
 -> 148)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 132 161 162
(note 132 131 133 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 10 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(call_insn 134 133 136 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2272 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 136 134 137 10 (set (reg/f:DI 3 bx [orig:132 _70 ] [132])
        (reg/f:DI 0 ax [161])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 137 136 138 10 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 138 137 139 10 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f:DI (reg/f:DI 0 ax [162]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 139 138 140 10 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:112 _26 ] [112])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 140 139 141 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f44186592d0 *.LC21>)) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 141 140 142 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:132 _70 ] [132])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(call_insn 142 141 143 10 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 143 142 144 10 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 144 143 145 10 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(insn 145 144 146 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:132 _70 ] [132])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 81 {*movdi_internal}
     (nil))
(call_insn 146 145 147 10 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2272 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 148)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 163 164 165 166
(code_label 148 147 149 11 377 (nil) [2 uses])
(note 149 148 150 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 11 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2273 81 {*movdi_internal}
     (nil))
(insn 151 150 152 11 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [163]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2273 81 {*movdi_internal}
     (nil))
(insn 152 151 153 11 (parallel [
            (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
                (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2273 218 {*adddi_1}
     (nil))
(insn 153 152 154 11 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2273 81 {*movdi_internal}
     (nil))
(insn 154 153 155 11 (set (mem/f:DI (reg/f:DI 0 ax [164]) [3 *text_48(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:114 _28 ] [114])) "libs/src/../include/rapidxml/rapidxml.hpp":2273 81 {*movdi_internal}
     (nil))
(insn 155 154 156 11 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2276 81 {*movdi_internal}
     (nil))
(insn 156 155 157 11 (set (reg/f:DI 0 ax [166])
        (mem/f:DI (reg/f:DI 0 ax [165]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2276 81 {*movdi_internal}
     (nil))
(insn 157 156 158 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])
        (reg/f:DI 0 ax [166])) "libs/src/../include/rapidxml/rapidxml.hpp":2276 81 {*movdi_internal}
     (nil))
(insn 158 157 159 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [19 AttFlags+0 S4 A32])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2277 82 {*movsi_internal}
     (nil))
(insn 159 158 160 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -53 [0xffffffffffffffcb])) [0 quote+0 S1 A8])
            (const_int 39 [0x27]))) "libs/src/../include/rapidxml/rapidxml.hpp":2278 5 {*cmpqi_1}
     (nil))
(jump_insn 160 159 161 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2278 617 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 134 167
(note 161 160 162 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 12 (set (reg:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2279 81 {*movdi_internal}
     (nil))
(insn 163 162 164 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [167])) "libs/src/../include/rapidxml/rapidxml.hpp":2279 81 {*movdi_internal}
     (nil))
(call_insn 164 163 166 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_20attribute_value_predILc39EEENS1_25attribute_value_pure_predILc39EEELi0EEEPcRS7_") [flags 0x3]  <function_decl 0x7f4418f53100 skip_and_expand_character_refs>) [0 skip_and_expand_character_refs S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2279 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 166 164 236 12 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 end+0 S8 A64])
        (reg/f:DI 0 ax [orig:134 _80 ] [134])) "libs/src/../include/rapidxml/rapidxml.hpp":2279 81 {*movdi_internal}
     (nil))
(jump_insn 236 166 237 12 (set (pc)
        (label_ref 176)) 649 {jump}
     (nil)
 -> 176)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 237 236 169)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 168
(code_label 169 237 170 13 378 (nil) [1 uses])
(note 170 169 171 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 13 (set (reg:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2281 81 {*movdi_internal}
     (nil))
(insn 172 171 173 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [168])) "libs/src/../include/rapidxml/rapidxml.hpp":2281 81 {*movdi_internal}
     (nil))
(call_insn 173 172 175 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_20attribute_value_predILc34EEENS1_25attribute_value_pure_predILc34EEELi0EEEPcRS7_") [flags 0x3]  <function_decl 0x7f4418f53200 skip_and_expand_character_refs>) [0 skip_and_expand_character_refs S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2281 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 175 173 176 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 end+0 S8 A64])
        (reg/f:DI 0 ax [orig:133 _77 ] [133])) "libs/src/../include/rapidxml/rapidxml.hpp":2281 81 {*movdi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 116 117 118 119 120 121 169 170
(code_label 176 175 177 14 379 (nil) [1 uses])
(note 177 176 178 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 178 177 179 14 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 179 178 180 14 (set (reg:DI 2 cx [orig:116 end.49_30 ] [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 end+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 180 179 181 14 (set (reg:DI 1 dx [orig:117 value.50_31 ] [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 181 180 247 14 (parallel [
            (set (reg:DI 2 cx [orig:116 end.49_30 ] [116])
                (minus:DI (reg:DI 2 cx [orig:116 end.49_30 ] [116])
                    (reg:DI 1 dx [orig:117 value.50_31 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2284 274 {*subdi_1}
     (nil))
(insn 247 181 183 14 (set (reg:DI 1 dx [orig:118 _32 ] [118])
        (reg:DI 2 cx [orig:116 end.49_30 ] [116])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 183 247 185 14 (set (reg:DI 2 cx [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 185 183 186 14 (set (reg:DI 4 si)
        (reg:DI 2 cx [169])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(insn 186 185 187 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 _29 ] [115])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 81 {*movdi_internal}
     (nil))
(call_insn 187 186 188 14 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2284 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 188 187 189 14 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2287 81 {*movdi_internal}
     (nil))
(insn 189 188 190 14 (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [170]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2287 81 {*movdi_internal}
     (nil))
(insn 190 189 191 14 (set (reg:QI 0 ax [orig:121 _35 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [0 *_34+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2287 84 {*movqi_internal}
     (nil))
(insn 191 190 192 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -53 [0xffffffffffffffcb])) [0 quote+0 S1 A8])
            (reg:QI 0 ax [orig:121 _35 ] [121]))) "libs/src/../include/rapidxml/rapidxml.hpp":2287 5 {*cmpqi_1}
     (nil))
(jump_insn 192 191 193 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2287 617 {*jcc_1}
     (nil)
 -> 209)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 135 171 172
(note 193 192 194 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 15 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(call_insn 195 194 197 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2288 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 197 195 198 15 (set (reg/f:DI 3 bx [orig:135 _90 ] [135])
        (reg/f:DI 0 ax [171])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 198 197 199 15 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 199 198 200 15 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (reg/f:DI 0 ax [172]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 200 199 201 15 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:122 _36 ] [122])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 201 200 202 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f44186592d0 *.LC21>)) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 202 201 203 15 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:135 _90 ] [135])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(call_insn 203 202 204 15 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 204 203 205 15 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 205 204 206 15 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(insn 206 205 207 15 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:135 _90 ] [135])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 81 {*movdi_internal}
     (nil))
(call_insn 207 206 208 15 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2288 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 208 207 209)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 124 125 126 127 128 129 173 174 175
(code_label 209 208 210 16 380 (nil) [1 uses])
(note 210 209 211 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 16 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2289 81 {*movdi_internal}
     (nil))
(insn 212 211 213 16 (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
        (mem/f:DI (reg/f:DI 0 ax [173]) [3 *text_48(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2289 81 {*movdi_internal}
     (nil))
(insn 213 212 214 16 (parallel [
            (set (reg/f:DI 1 dx [orig:124 _38 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:123 _37 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2289 218 {*adddi_1}
     (nil))
(insn 214 213 215 16 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2289 81 {*movdi_internal}
     (nil))
(insn 215 214 216 16 (set (mem/f:DI (reg/f:DI 0 ax [174]) [3 *text_48(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:124 _38 ] [124])) "libs/src/../include/rapidxml/rapidxml.hpp":2289 81 {*movdi_internal}
     (nil))
(insn 216 215 217 16 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2293 81 {*movdi_internal}
     (nil))
(insn 217 216 218 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 _39 ] [125])) "libs/src/../include/rapidxml/rapidxml.hpp":2293 81 {*movdi_internal}
     (nil))
(call_insn 218 217 219 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2293 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 219 218 220 16 (set (reg/f:DI 3 bx [orig:126 _40 ] [126])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":2293 81 {*movdi_internal}
     (nil))
(insn 220 219 221 16 (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2293 81 {*movdi_internal}
     (nil))
(insn 221 220 222 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:127 _41 ] [127])) "libs/src/../include/rapidxml/rapidxml.hpp":2293 81 {*movdi_internal}
     (nil))
(call_insn 222 221 224 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE10value_sizeEv") [flags 0x3]  <function_decl 0x7f441984ad00 value_size>) [0 value_size S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2293 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 224 222 225 16 (parallel [
            (set (reg/f:DI 0 ax [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (reg/f:DI 3 bx [orig:126 _40 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2293 218 {*adddi_1}
     (nil))
(insn 225 224 226 16 (set (mem:QI (reg/f:DI 0 ax [orig:129 _43 ] [129]) [0 *_43+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2293 84 {*movqi_internal}
     (nil))
(insn 226 225 227 16 (set (reg:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2296 81 {*movdi_internal}
     (nil))
(insn 227 226 228 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [175])) "libs/src/../include/rapidxml/rapidxml.hpp":2296 81 {*movdi_internal}
     (nil))
(call_insn 228 227 238 16 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2296 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 238 228 239 16 (set (pc)
        (label_ref 229)) "libs/src/../include/rapidxml/rapidxml.hpp":2240 649 {jump}
     (nil)
 -> 229)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 239 238 241)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 17, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 241 239 240 18 382 (nil) [1 uses])
(note 240 241 242 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 242 240 234 18 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":2298 684 {nop}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 234 242 235 17 373 (nil) [0 uses])
(note 235 234 243 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 243 235 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_document<Ch>::parse_node_contents(Ch*&, rapidxml::xml_node<Ch>*) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE19parse_node_contentsILi0EEEvRPcPNS_8xml_nodeIcEE, funcdef_no=3394, decl_uid=66832, cgraph_uid=1268, symbol_order=1290)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 91:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 113:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 116:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 133:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 16
EBB 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 8
   Insn 67: point = 0, n_alt = 0
   Insn 66: point = 0, n_alt = -2
   Insn 65: point = 1, n_alt = 4
   Insn 64: point = 1, n_alt = 4
   Insn 63: point = 1, n_alt = 0
   Insn 62: point = 1, n_alt = -2
   Insn 61: point = 1, n_alt = 4
   Insn 60: point = 1, n_alt = -2
   Insn 59: point = 2, n_alt = 3
   Insn 58: point = 4, n_alt = 3
   Insn 57: point = 5, n_alt = -2
   Insn 56: point = 7, n_alt = -2
   Insn 55: point = 8, n_alt = 0
   Insn 54: point = 8, n_alt = 2
  BB 12
   Insn 119: point = 8, n_alt = 0
   Insn 118: point = 8, n_alt = -2
   Insn 117: point = 9, n_alt = 4
   Insn 116: point = 9, n_alt = 4
   Insn 115: point = 9, n_alt = 0
   Insn 114: point = 9, n_alt = -2
   Insn 113: point = 9, n_alt = 4
   Insn 112: point = 9, n_alt = -2
   Insn 111: point = 10, n_alt = 3
   Insn 110: point = 12, n_alt = 3
   Insn 109: point = 13, n_alt = -2
   Insn 108: point = 15, n_alt = -2
   Insn 107: point = 16, n_alt = 0
   Insn 106: point = 16, n_alt = 2
  BB 15
  BB 9
   Insn 149: point = 16, n_alt = -1
   Insn 75: point = 16, n_alt = 5
   Insn 74: point = 17, n_alt = 3
   Insn 73: point = 18, n_alt = 3
   Insn 72: point = 20, n_alt = 3
   Insn 71: point = 22, n_alt = 3
  BB 7
   Insn 52: point = 23, n_alt = -1
   Insn 51: point = 23, n_alt = 0
   Insn 50: point = 24, n_alt = 2
   Insn 49: point = 26, n_alt = 3
   Insn 48: point = 28, n_alt = 3
   Insn 47: point = 29, n_alt = 0
   Insn 46: point = 29, n_alt = -2
   Insn 45: point = 30, n_alt = 3
   Insn 44: point = 31, n_alt = 0
   Insn 43: point = 31, n_alt = -2
   Insn 42: point = 32, n_alt = 3
   Insn 40: point = 33, n_alt = 5
   Insn 39: point = 34, n_alt = 3
   Insn 38: point = 35, n_alt = 3
   Insn 37: point = 37, n_alt = 3
   Insn 36: point = 39, n_alt = 3
  BB 6
   Insn 34: point = 40, n_alt = -1
   Insn 33: point = 40, n_alt = 0
   Insn 32: point = 41, n_alt = 2
   Insn 31: point = 43, n_alt = 0
   Insn 30: point = 45, n_alt = 3
   Insn 29: point = 47, n_alt = 3
  BB 5
   Insn 24: point = 48, n_alt = -1
   Insn 23: point = 48, n_alt = 0
  BB 4
   Insn 22: point = 50, n_alt = -1
   Insn 21: point = 50, n_alt = 0
   Insn 20: point = 50, n_alt = 0
  BB 13
   Insn 153: point = 51, n_alt = -1
   Insn 133: point = 51, n_alt = 6
   Insn 132: point = 52, n_alt = -2
   Insn 131: point = 53, n_alt = 0
   Insn 130: point = 53, n_alt = -2
   Insn 129: point = 54, n_alt = -2
   Insn 128: point = 55, n_alt = -2
   Insn 127: point = 56, n_alt = -2
   Insn 126: point = 57, n_alt = 3
   Insn 125: point = 58, n_alt = 3
   Insn 124: point = 59, n_alt = 3
   Insn 123: point = 60, n_alt = 3
  BB 3
   Insn 17: point = 61, n_alt = 6
   Insn 16: point = 62, n_alt = 2
   Insn 15: point = 64, n_alt = 3
   Insn 14: point = 66, n_alt = 3
   Insn 13: point = 67, n_alt = 0
   Insn 12: point = 67, n_alt = -2
   Insn 11: point = 68, n_alt = 3
   Insn 10: point = 69, n_alt = 5
   Insn 9: point = 70, n_alt = 3
   Insn 8: point = 72, n_alt = 3
  BB 14
   Insn 155: point = 73, n_alt = -1
  BB 16
   Insn 159: point = 73, n_alt = -1
  BB 11
   Insn 151: point = 73, n_alt = -1
   Insn 99: point = 73, n_alt = 0
   Insn 98: point = 73, n_alt = -2
   Insn 97: point = 74, n_alt = -2
   Insn 96: point = 75, n_alt = 3
   Insn 95: point = 76, n_alt = 3
  BB 10
   Insn 93: point = 77, n_alt = -1
   Insn 92: point = 77, n_alt = 1
   Insn 91: point = 77, n_alt = 5
   Insn 90: point = 78, n_alt = -2
   Insn 89: point = 79, n_alt = 0
   Insn 88: point = 79, n_alt = -2
   Insn 87: point = 80, n_alt = -2
   Insn 86: point = 81, n_alt = 3
   Insn 85: point = 82, n_alt = 3
   Insn 84: point = 83, n_alt = 5
   Insn 83: point = 84, n_alt = 3
   Insn 82: point = 85, n_alt = 3
   Insn 81: point = 87, n_alt = 3
   Insn 80: point = 89, n_alt = 3
  BB 2
   Insn 4: point = 90, n_alt = 5
   Insn 3: point = 90, n_alt = 5
   Insn 2: point = 90, n_alt = 5
 r87: [63..64]
 r88: [48..50]
 r89: [44..45]
 r90: [42..43]
 r91: [40..41]
 r92: [36..37]
 r93: [33..35]
 r94: [25..26]
 r95: [23..24]
 r96: [1..2]
 r97: [19..20]
 r98: [16..18]
 r99: [86..87]
 r100: [83..85]
 r101: [9..10]
 r102: [77..78]
 r103: [0..5]
 r104: [8..13]
 r105: [51..52]
 r106: [71..72]
 r107: [69..70]
 r108: [67..68]
 r109: [65..66]
 r110: [61..62]
 r111: [46..47]
 r112: [38..39]
 r113: [33..34]
 r114: [31..32]
 r115: [29..30]
 r116: [27..28]
 r117: [6..7]
 r118: [3..4]
 r119: [21..22]
 r120: [16..17]
 r121: [88..89]
 r122: [83..84]
 r123: [80..82]
 r124: [79..81]
 r125: [74..76]
 r126: [73..75]
 r127: [14..15]
 r128: [11..12]
 r129: [56..60]
 r130: [55..59]
 r131: [54..58]
 r132: [53..57]
Compressing live ranges: from 90 to 72 - 80%
Ranges after the compression:
 r87: [50..51]
 r88: [42..43]
 r89: [38..39]
 r90: [36..37]
 r91: [34..35]
 r92: [30..31]
 r93: [28..29]
 r94: [20..21]
 r95: [18..19]
 r96: [0..1]
 r97: [14..15]
 r98: [12..13]
 r99: [68..69]
 r100: [66..67]
 r101: [6..7]
 r102: [62..63]
 r103: [0..3]
 r104: [6..9]
 r105: [44..45]
 r106: [58..59]
 r107: [56..57]
 r108: [54..55]
 r109: [52..53]
 r110: [48..49]
 r111: [40..41]
 r112: [32..33]
 r113: [28..29]
 r114: [26..27]
 r115: [24..25]
 r116: [22..23]
 r117: [4..5]
 r118: [2..3]
 r119: [16..17]
 r120: [12..13]
 r121: [70..71]
 r122: [66..67]
 r123: [64..65]
 r124: [64..65]
 r125: [60..61]
 r126: [60..61]
 r127: [10..11]
 r128: [8..9]
 r129: [46..47]
 r130: [46..47]
 r131: [46..47]
 r132: [46..47]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 59
changing reg in insn 60
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 111
changing reg in insn 112
changing reg in insn 90
changing reg in insn 91
changing reg in insn 57
changing reg in insn 66
changing reg in insn 62
changing reg in insn 109
changing reg in insn 118
changing reg in insn 114
changing reg in insn 132
changing reg in insn 133
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 29
changing reg in insn 30
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 88
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 98
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 123
changing reg in insn 127
changing reg in insn 124
changing reg in insn 128
changing reg in insn 125
changing reg in insn 129
changing reg in insn 126
changing reg in insn 130
deleting insn with uid = 56.
deleting insn with uid = 90.
deleting insn with uid = 108.
deleting insn with uid = 127.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 132.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 131.


void rapidxml::xml_document<Ch>::parse_node_contents(Ch*&, rapidxml::xml_node<Ch>*) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={45d,37u} r1={23d,11u} r2={14d,1u} r3={2d,4u} r4={20d,8u} r5={25d,13u} r6={1d,48u} r7={1d,28u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={21d,5u} r18={12d} r19={12d} r20={1d,1u} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} 
;;    total ref usage 1111{955d,156u,0e} in 101{89 regular + 12 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":2167 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])
        (reg:DI 4 si [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":2167 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [51 node+0 S8 A64])
        (reg:DI 1 dx [ node ])) "libs/src/../include/rapidxml/rapidxml.hpp":2167 81 {*movdi_internal}
     (nil))
(note 5 4 138 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 106 107 108 109 110
(code_label 138 5 7 3 393 (nil) [1 uses])
(note 7 138 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2173 81 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg/f:DI 0 ax [107])
        (mem/f:DI (reg/f:DI 0 ax [106]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2173 81 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 contents_start+0 S8 A64])
        (reg/f:DI 0 ax [107])) "libs/src/../include/rapidxml/rapidxml.hpp":2173 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2174 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) "libs/src/../include/rapidxml/rapidxml.hpp":2174 81 {*movdi_internal}
     (nil))
(call_insn 13 12 14 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2174 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2175 81 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [109]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2175 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:QI 0 ax [110])
        (mem:QI (reg/f:DI 0 ax [orig:87 _1 ] [87]) [0 *_1+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2175 84 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -33 [0xffffffffffffffdf])) [0 next_char+0 S1 A8])
        (reg:QI 0 ax [110])) "libs/src/../include/rapidxml/rapidxml.hpp":2175 84 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              13 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 18 17 19 4 384 ("after_data_node") [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -33 [0xffffffffffffffdf])) [0 next_char+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":2184 151 {extendqisi2}
     (nil))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 _2 ] [88])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2184 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 22 21 145 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 104)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2184 617 {*jcc_1}
     (nil)
 -> 104)
;;  succ:       12
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 145 22 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 145 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 _2 ] [88])
            (const_int 60 [0x3c]))) "libs/src/../include/rapidxml/rapidxml.hpp":2184 7 {*cmpsi_1}
     (nil))
(jump_insn 24 23 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 147)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2184 617 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       6 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 111
(note 28 24 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2189 81 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [111]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2189 81 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2189 218 {*adddi_1}
     (nil))
(insn 32 31 33 6 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem:QI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [0 *_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2189 84 {*movqi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int 47 [0x2f]))) "libs/src/../include/rapidxml/rapidxml.hpp":2189 5 {*cmpqi_1}
     (nil))
(jump_insn 34 33 35 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2189 617 {*jcc_1}
     (nil)
 -> 78)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 112 113 114 115 116
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2192 81 {*movdi_internal}
     (nil))
(insn 37 36 38 7 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [112]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2192 81 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (parallel [
            (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2192 218 {*adddi_1}
     (nil))
(insn 39 38 40 7 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2192 81 {*movdi_internal}
     (nil))
(insn 40 39 42 7 (set (mem/f:DI (reg/f:DI 0 ax [113]) [3 *text_13(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:93 _7 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":2192 81 {*movdi_internal}
     (nil))
(insn 42 40 43 7 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2204 81 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) "libs/src/../include/rapidxml/rapidxml.hpp":2204 81 {*movdi_internal}
     (nil))
(call_insn 44 43 45 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_14node_name_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419202600 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2204 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 7 (set (reg:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2207 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [115])) "libs/src/../include/rapidxml/rapidxml.hpp":2207 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_15whitespace_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4419321d00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2207 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 48 47 49 7 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2208 81 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg/f:DI 0 ax [orig:94 _19 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [116]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2208 81 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg:QI 0 ax [orig:95 _20 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _19 ] [94]) [0 *_19+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":2208 84 {*movqi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _20 ] [95])
            (const_int 62 [0x3e]))) "libs/src/../include/rapidxml/rapidxml.hpp":2208 5 {*cmpqi_1}
     (nil))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2208 617 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 103 117 118
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(call_insn 55 54 57 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2209 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 57 55 58 8 (set (reg/f:DI 3 bx [orig:103 _37 ] [103])
        (reg/f:DI 0 ax [117])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 59 58 60 8 (set (reg/f:DI 0 ax [orig:96 _21 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [118]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:96 _21 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 61 60 62 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f44189d06c0 *.LC18>)) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 62 61 63 8 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:103 _37 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(call_insn 63 62 64 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 64 63 65 8 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 65 64 66 8 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(insn 66 65 67 8 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:103 _37 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 81 {*movdi_internal}
     (nil))
(call_insn 67 66 68 8 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2209 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 68 67 69)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 119 120
(code_label 69 68 70 9 389 (nil) [1 uses])
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 9 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2210 81 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg/f:DI 0 ax [orig:97 _22 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [119]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2210 81 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (parallel [
            (set (reg/f:DI 1 dx [orig:98 _23 ] [98])
                (plus:DI (reg/f:DI 0 ax [orig:97 _22 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2210 218 {*adddi_1}
     (nil))
(insn 74 73 75 9 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2210 81 {*movdi_internal}
     (nil))
(insn 75 74 149 9 (set (mem/f:DI (reg/f:DI 0 ax [120]) [3 *text_13(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:98 _23 ] [98])) "libs/src/../include/rapidxml/rapidxml.hpp":2210 81 {*movdi_internal}
     (nil))
(jump_insn 149 75 150 9 (set (pc)
        (label_ref 148)) "libs/src/../include/rapidxml/rapidxml.hpp":2211 649 {jump}
     (nil)
 -> 148)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 150 149 78)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 102 121 122 123 124
(code_label 78 150 79 10 388 (nil) [1 uses])
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2216 81 {*movdi_internal}
     (nil))
(insn 81 80 82 10 (set (reg/f:DI 0 ax [orig:99 _24 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [121]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2216 81 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (parallel [
            (set (reg/f:DI 1 dx [orig:100 _25 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:99 _24 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":2216 218 {*adddi_1}
     (nil))
(insn 83 82 84 10 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2216 81 {*movdi_internal}
     (nil))
(insn 84 83 85 10 (set (mem/f:DI (reg/f:DI 0 ax [122]) [3 *text_13(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:100 _25 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":2216 81 {*movdi_internal}
     (nil))
(insn 85 84 86 10 (set (reg:DI 1 dx [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2217 81 {*movdi_internal}
     (nil))
(insn 86 85 87 10 (set (reg:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2217 81 {*movdi_internal}
     (nil))
(insn 87 86 88 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [123])) "libs/src/../include/rapidxml/rapidxml.hpp":2217 81 {*movdi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [124])) "libs/src/../include/rapidxml/rapidxml.hpp":2217 81 {*movdi_internal}
     (nil))
(call_insn 89 88 91 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE10parse_nodeILi0EEEPNS_8xml_nodeIcEERPc") [flags 0x3]  <function_decl 0x7f4419321e00 parse_node>) [0 parse_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2217 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 91 89 92 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 _28 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":2217 81 {*movdi_internal}
     (nil))
(insn 92 91 93 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2217 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 93 92 94 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 158)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":2217 617 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       11 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125 126
(note 94 93 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 11 (set (reg:DI 1 dx [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [51 child+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2218 81 {*movdi_internal}
     (nil))
(insn 96 95 97 11 (set (reg:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2218 81 {*movdi_internal}
     (nil))
(insn 97 96 98 11 (set (reg:DI 4 si)
        (reg:DI 1 dx [125])) "libs/src/../include/rapidxml/rapidxml.hpp":2218 81 {*movdi_internal}
     (nil))
(insn 98 97 99 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [126])) "libs/src/../include/rapidxml/rapidxml.hpp":2218 81 {*movdi_internal}
     (nil))
(call_insn 99 98 151 11 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE11append_nodeEPS1_") [flags 0x3]  <function_decl 0x7f4419852f00 append_node>) [0 append_node S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2218 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 151 99 152 11 (set (pc)
        (label_ref:DI 158)) "libs/src/../include/rapidxml/rapidxml.hpp":2220 649 {jump}
     (nil)
 -> 158)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 152 151 104)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 104 127 128
(code_label 104 152 105 12 386 (nil) [1 uses])
(note 105 104 106 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 12 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(call_insn 107 106 109 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2224 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 109 107 110 12 (set (reg/f:DI 3 bx [orig:104 _41 ] [104])
        (reg/f:DI 0 ax [127])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 110 109 111 12 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 111 110 112 12 (set (reg/f:DI 0 ax [orig:101 _26 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [128]) [3 *text_13(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 112 111 113 12 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:101 _26 ] [101])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 113 112 114 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f441894c360 *.LC13>)) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 114 113 115 12 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:104 _41 ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(call_insn 115 114 116 12 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 116 115 117 12 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 117 116 118 12 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(insn 118 117 119 12 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:104 _41 ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 81 {*movdi_internal}
     (nil))
(call_insn 119 118 120 12 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":2224 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 147)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 16, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 129 130 131 132
(code_label 147 120 122 13 394 (nil) [1 uses])
(note 122 147 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 13 (set (reg:DI 2 cx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 contents_start+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 81 {*movdi_internal}
     (nil))
(insn 124 123 125 13 (set (reg:DI 1 dx [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 81 {*movdi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:DI 4 si [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 81 {*movdi_internal}
     (nil))
(insn 126 125 130 13 (set (reg:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 81 {*movdi_internal}
     (nil))
(insn 130 126 131 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [132])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 81 {*movdi_internal}
     (nil))
(call_insn 131 130 133 13 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE21parse_and_append_dataILi0EEEcPNS_8xml_nodeIcEERPcS6_") [flags 0x3]  <function_decl 0x7f4418f53500 parse_and_append_data>) [0 parse_and_append_data S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":2228 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 133 131 153 13 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -33 [0xffffffffffffffdf])) [0 next_char+0 S1 A8])
        (reg:QI 0 ax [orig:105 _45 ] [105])) "libs/src/../include/rapidxml/rapidxml.hpp":2228 84 {*movqi_internal}
     (nil))
(jump_insn 153 133 154 13 (set (pc)
        (label_ref 18)) "libs/src/../include/rapidxml/rapidxml.hpp":2229 649 {jump}
     (nil)
 -> 18)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 154 153 158)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 158 154 157 16 396 (nil) [2 uses])
(note 157 158 159 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 159 157 136 16 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":2220 684 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 15, flags: (RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 136 159 137 14 392 (nil) [0 uses])
(note 137 136 155 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 155 137 156 14 (set (pc)
        (label_ref 138)) "libs/src/../include/rapidxml/rapidxml.hpp":2170 649 {jump}
     (nil)
 -> 138)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 148)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 148 156 144 15 395 (nil) [1 uses])
(note 144 148 160 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 160 144 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_base<Ch>::value(const Ch*, std::size_t) [with Ch = char] (_ZN8rapidxml8xml_baseIcE5valueEPKcm, funcdef_no=3395, decl_uid=60175, cgraph_uid=1269, symbol_order=1291)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = 5
   Insn 12: point = 1, n_alt = 3
   Insn 11: point = 2, n_alt = 3
   Insn 10: point = 3, n_alt = 5
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [3..5]
 r88: [3..4]
 r89: [0..2]
 r90: [0..1]
Compressing live ranges: from 6 to 4 - 66%
Ranges after the compression:
 r87: [2..3]
 r88: [2..3]
 r89: [0..1]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_base<Ch>::value(const Ch*, std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,2u} r1={3d,3u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,9u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 41{22d,19u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 89 90
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":751 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 value+0 S8 A64])
        (reg:DI 4 si [ value ])) "libs/src/../include/rapidxml/rapidxml.hpp":751 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 size+0 S8 A64])
        (reg:DI 1 dx [ size ])) "libs/src/../include/rapidxml/rapidxml.hpp":751 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":753 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":753 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 8 [0x8])) [3 this_2(D)->m_value+0 S8 A64])
        (reg/f:DI 1 dx [88])) "libs/src/../include/rapidxml/rapidxml.hpp":753 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":754 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":754 81 {*movdi_internal}
     (nil))
(insn 13 12 16 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 24 [0x18])) [8 this_2(D)->m_value_size+0 S8 A64])
        (reg:DI 1 dx [90])) "libs/src/../include/rapidxml/rapidxml.hpp":754 81 {*movdi_internal}
     (nil))
(insn 16 13 17 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":755 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 16 0 NOTE_INSN_DELETED)

;; Function std::size_t rapidxml::xml_base<Ch>::value_size() const [with Ch = char] (_ZNK8rapidxml8xml_baseIcE10value_sizeEv, funcdef_no=3396, decl_uid=60166, cgraph_uid=1270, symbol_order=1292)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
  BB 3
   Insn 29: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 6, n_alt = 3
  BB 4
   Insn 17: point = 7, n_alt = 2
  BB 2
   Insn 9: point = 8, n_alt = -1
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 9, n_alt = 3
   Insn 6: point = 11, n_alt = 3
   Insn 2: point = 12, n_alt = 5
 r87: [8..9]
 r88: [7..7] [2..4]
 r89: [0..1]
 r90: [10..11]
 r91: [5..6]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r87: [7..8]
 r88: [6..6] [2..3]
 r89: [0..1]
 r90: [9..10]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 17
changing reg in insn 12
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns


std::size_t rapidxml::xml_base<Ch>::value_size() const [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,8u} r7={1d,5u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 47{25d,22u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":700 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":702 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [90])
                (const_int 8 [0x8])) [3 this_4(D)->m_value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":702 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":702 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":702 617 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88 91
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":702 81 {*movdi_internal}
     (nil))
(insn 12 11 29 3 (set (reg:DI 0 ax [orig:88 iftmp.101_2 ] [88])
        (mem:DI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 24 [0x18])) [8 this_4(D)->m_value_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":702 81 {*movdi_internal}
     (nil))
(jump_insn 29 12 30 3 (set (pc)
        (label_ref 20)) "libs/src/../include/rapidxml/rapidxml.hpp":702 649 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 30 29 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88
(code_label 15 30 16 4 399 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 4 (set (reg:DI 0 ax [orig:88 iftmp.101_2 ] [88])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":702 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 20 17 21 5 401 (nil) [1 uses])
(note 21 20 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 21 27 5 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:89 <retval> ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":703 81 {*movdi_internal}
     (nil))
(insn 27 26 31 5 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":703 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 27 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char] (_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm, funcdef_no=3398, decl_uid=11178, cgraph_uid=1272, symbol_order=1294)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{92d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [95 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 D.11181+0 S8 A64])
        (reg:DI 1 dx [ D.11181 ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f441c511f00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":125 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":126 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char] (_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_, funcdef_no=3429, decl_uid=17804, cgraph_uid=1303, symbol_order=1325)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = -2
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 9.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


static std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{93d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":495 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":496 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":496 81 {*movdi_internal}
     (nil))
(call_insn 8 7 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv") [flags 0x3]  <function_decl 0x7f441b91f100 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/alloc_traits.h":496 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 8 17 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/alloc_traits.h":496 81 {*movdi_internal}
     (nil))
(insn 17 16 19 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/alloc_traits.h":496 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Node_allocator& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_Node_allocator() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE21_M_get_Node_allocatorEv, funcdef_no=3430, decl_uid=53152, cgraph_uid=1304, symbol_order=1326)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Node_allocator& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_Node_allocator() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":574 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [25 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":575 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_tree.h":575 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":575 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function _Val* std::_Rb_tree_node<_Val>::_M_valptr() [with _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >] (_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE9_M_valptrEv, funcdef_no=3431, decl_uid=65433, cgraph_uid=1305, symbol_order=1327)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = -2
   Insn 7: point = 5, n_alt = 0
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


_Val* std::_Rb_tree_node<_Val>::_M_valptr() [with _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 111{95d,15u,1e} in 7{6 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [73 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_tree.h":234 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [73 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_tree.h":235 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_tree.h":235 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [73 this+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_tree.h":235 81 {*movdi_internal}
     (nil))
(call_insn 9 8 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE6_M_ptrEv") [flags 0x3]  <function_decl 0x7f4419073600 _M_ptr>) [0 _M_ptr S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_tree.h":235 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 9 18 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_tree.h":235 81 {*movdi_internal}
     (nil))
(insn 18 17 20 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_tree.h":235 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 18 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::destroy(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*) [with _Up = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEE7destroyIS9_EEvRSB_PT_, funcdef_no=3432, decl_uid=67794, cgraph_uid=1306, symbol_order=1328)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


static void std::allocator_traits<std::allocator<_CharT> >::destroy(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*) [with _Up = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 110{94d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [96 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":486 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [97 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":486 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [97 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":487 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [96 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":487 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/alloc_traits.h":487 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/alloc_traits.h":487 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEE7destroyISA_EEvPT_") [flags 0x3]  <function_decl 0x7f4418f83f00 destroy>) [0 destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":487 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 11 15 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":487 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEEE10deallocateERSB_PSA_m, funcdef_no=3433, decl_uid=67690, cgraph_uid=1307, symbol_order=1329)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..5]
 r88: [1..4]
 r89: [0..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [96 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [96 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(call_insn 14 13 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEE10deallocateEPSB_m") [flags 0x3]  <function_decl 0x7f4419c49100 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":462 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = TSX::Parser::Terrain] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEEC2Ev, funcdef_no=3435, decl_uid=56238, cgraph_uid=1309, symbol_order=1331)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [91 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":79 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":79 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = TSX::Parser::Terrain] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser7TerrainEE10deallocateEPS3_m, funcdef_no=3437, decl_uid=56192, cgraph_uid=1311, symbol_order=1333)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{92d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [91 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 D.56195+0 S8 A64])
        (reg:DI 1 dx [ D.56195 ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [41 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f441c511f00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":125 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":126 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Terrain::~Terrain() (_ZN3TSX6Parser7TerrainD2Ev, funcdef_no=3440, decl_uid=66400, cgraph_uid=1313, symbol_order=1335)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 3
   Insn 9: point = 2, n_alt = 0
   Insn 8: point = 2, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 12.


TSX::Parser::Terrain::~Terrain()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 185{168d,16u,1e} in 9{7 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":43 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 this+0 S8 A64])) "libs/src/../include/TSXParser.h":43 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":43 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [41 this+0 S8 A64])
            (const_int 40 [0x28]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":43 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEED1Ev") [flags 0x3]  <function_decl 0x7f4419921b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":43 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 this+0 S8 A64])) "libs/src/../include/TSXParser.h":43 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":43 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":43 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":43 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_Tp*) [with _Tp = TSX::Parser::Terrain] (_ZSt8_DestroyIN3TSX6Parser7TerrainEEvPT_, funcdef_no=3438, decl_uid=67840, cgraph_uid=1315, symbol_order=1337)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


void std::_Destroy(_Tp*) [with _Tp = TSX::Parser::Terrain]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __pointer+0 S8 A64])
        (reg:DI 5 di [ __pointer ])) "/usr/include/c++/7/bits/stl_construct.h":97 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [41 __pointer+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":98 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_construct.h":98 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser7TerrainD1Ev") [flags 0x3]  <function_decl 0x7f4419187200 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":98 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":98 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = TSX::Parser::Tile] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEEC2Ev, funcdef_no=3443, decl_uid=57333, cgraph_uid=1317, symbol_order=1339)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [93 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":79 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":79 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = TSX::Parser::Tile] (_ZN9__gnu_cxx13new_allocatorIN3TSX6Parser4TileEE10deallocateEPS3_m, funcdef_no=3445, decl_uid=57287, cgraph_uid=1319, symbol_order=1341)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{92d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [93 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 D.57290+0 S8 A64])
        (reg:DI 1 dx [ D.57290 ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [45 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f441c511f00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":125 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":126 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function TSX::Parser::Tile::~Tile() (_ZN3TSX6Parser4TileD2Ev, funcdef_no=3448, decl_uid=66623, cgraph_uid=1321, symbol_order=1343)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = 0
   Insn 12: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = 0
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = -2
   Insn 7: point = 5, n_alt = 0
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [4..5]
 r88: [0..1]
 r89: [6..7]
 r90: [2..3]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [0..1]
 r89: [6..7]
 r90: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.


TSX::Parser::Tile::~Tile()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,4u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r20={1d,1u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 189{170d,17u,2e} in 10{8 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/TSXParser.h":49 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 this+0 S8 A64])) "libs/src/../include/TSXParser.h":49 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":49 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [45 this+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/TSXParser.h":49 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEED1Ev") [flags 0x3]  <function_decl 0x7f4419921b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":49 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 this+0 S8 A64])) "libs/src/../include/TSXParser.h":49 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 0 ax [90])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/TSXParser.h":49 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [45 this+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/TSXParser.h":49 81 {*movdi_internal}
     (nil))
(call_insn 13 12 16 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt6vectorIjSaIjEED1Ev") [flags 0x3]  <function_decl 0x7f44199bc800 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/TSXParser.h":49 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 13 17 2 (const_int 0 [0]) "libs/src/../include/TSXParser.h":49 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 16 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_Tp*) [with _Tp = TSX::Parser::Tile] (_ZSt8_DestroyIN3TSX6Parser4TileEEvPT_, funcdef_no=3446, decl_uid=67859, cgraph_uid=1323, symbol_order=1345)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


void std::_Destroy(_Tp*) [with _Tp = TSX::Parser::Tile]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __pointer+0 S8 A64])
        (reg:DI 5 di [ __pointer ])) "/usr/include/c++/7/bits/stl_construct.h":97 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [45 __pointer+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":98 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_construct.h":98 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN3TSX6Parser4TileD1Ev") [flags 0x3]  <function_decl 0x7f44191b0b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":98 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":98 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function _ForwardIterator std::__uninitialized_default_n(_ForwardIterator, _Size) [with _ForwardIterator = char*; _Size = long unsigned int] (_ZSt25__uninitialized_default_nIPcmET_S1_T0_, funcdef_no=3450, decl_uid=67879, cgraph_uid=1324, symbol_order=1346)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = -2
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 3
   Insn 8: point = 7, n_alt = 3
   Insn 7: point = 8, n_alt = 6
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [5..7]
 r90: [4..6]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 13.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


_ForwardIterator std::__uninitialized_default_n(_ForwardIterator, _Size) [with _ForwardIterator = char*; _Size = long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":574 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_uninitialized.h":574 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [68 __assignable+0 S1 A8])
        (const_int 1 [0x1])) "/usr/include/c++/7/bits/stl_uninitialized.h":579 84 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":583 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":583 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "/usr/include/c++/7/bits/stl_uninitialized.h":583 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":583 81 {*movdi_internal}
     (nil))
(call_insn 12 11 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPcmEET_S3_T0_") [flags 0x3]  <function_decl 0x7f4418f98800 __uninit_default_n>) [0 __uninit_default_n S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":583 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 20 12 21 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_uninitialized.h":584 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":584 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::max_size() const [with _Tp = char; _Alloc = std::allocator<char>] (_ZNKSt6vectorIcSaIcEE8max_sizeEv, funcdef_no=3451, decl_uid=60887, cgraph_uid=1325, symbol_order=1347)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = -2
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = -2
   Insn 9: point = 5, n_alt = -2
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
deleting insn with uid = 9.
deleting insn with uid = 12.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::max_size() const [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,5u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,4u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 183{166d,17u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":675 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [67 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":676 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":676 81 {*movdi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441988a400 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":676 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 8 11 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":676 81 {*movdi_internal}
     (nil))
(call_insn 11 10 19 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_") [flags 0x3]  <function_decl 0x7f441b4d7b00 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":676 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 11 20 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/bits/stl_vector.h":676 81 {*movdi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":676 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long unsigned int] (_ZSt3maxImERKT_S2_S2_, funcdef_no=3452, decl_uid=67884, cgraph_uid=1326, symbol_order=1348)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
  BB 3
   Insn 29: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 3
  BB 4
   Insn 19: point = 5, n_alt = 3
  BB 2
   Insn 12: point = 6, n_alt = -1
   Insn 11: point = 6, n_alt = 0
   Insn 10: point = 7, n_alt = 3
   Insn 9: point = 9, n_alt = 3
   Insn 8: point = 10, n_alt = 3
   Insn 7: point = 12, n_alt = 3
   Insn 3: point = 13, n_alt = 5
   Insn 2: point = 13, n_alt = 5
 r87: [6..10]
 r88: [6..7]
 r89: [2..5]
 r90: [0..1]
 r91: [11..12]
 r92: [8..9]
Compressing live ranges: from 13 to 10 - 76%
Ranges after the compression:
 r87: [4..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]
 r92: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 14
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns


constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,11u} r7={1d,5u} r17={1d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 53{26d,27u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 91 92
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [98 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/stl_algobase.h":219 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [98 __b+0 S8 A64])
        (reg:DI 4 si [ __b ])) "/usr/include/c++/7/bits/stl_algobase.h":219 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [98 __a+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":224 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (mem:DI (reg/f:DI 0 ax [91]) [8 *__a_5(D)+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":224 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [98 __b+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":224 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [orig:88 _2 ] [88])
        (mem:DI (reg/f:DI 0 ax [92]) [8 *__b_6(D)+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":224 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 1 dx [orig:87 _1 ] [87])
            (reg:DI 0 ax [orig:88 _2 ] [88]))) "/usr/include/c++/7/bits/stl_algobase.h":224 8 {*cmpdi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "/usr/include/c++/7/bits/stl_algobase.h":224 617 {*jcc_1}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 29 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [98 __b+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":225 81 {*movdi_internal}
     (nil))
(jump_insn 29 14 30 3 (set (pc)
        (label_ref 20)) "/usr/include/c++/7/bits/stl_algobase.h":225 649 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

(barrier 30 29 17)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(code_label 17 30 18 4 424 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [98 __a+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":226 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 0 [ax] 90
(code_label 20 19 21 5 425 (nil) [1 uses])
(note 21 20 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 21 27 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/bits/stl_algobase.h":227 81 {*movdi_internal}
     (nil))
(insn 27 26 31 5 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":227 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 27 0 NOTE_INSN_DELETED)

;; Function static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char] (_ZNSt16allocator_traitsISaIcEE8allocateERS0_m, funcdef_no=3453, decl_uid=17769, cgraph_uid=1327, symbol_order=1349)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = -2
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 2
   Insn 8: point = 6, n_alt = 3
   Insn 7: point = 7, n_alt = 3
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [5..7]
 r90: [4..6]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 11
deleting insn with uid = 13.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 116{96d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":435 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":435 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 2 cx [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [86 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(call_insn 12 11 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv") [flags 0x3]  <function_decl 0x7f441b917f00 allocate>) [0 allocate S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/alloc_traits.h":436 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 20 12 21 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/alloc_traits.h":436 81 {*movdi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/alloc_traits.h":436 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function _ReturnType std::__make_move_if_noexcept_iterator(_Tp*) [with _Tp = char; _ReturnType = std::move_iterator<char*>] (_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_, funcdef_no=3454, decl_uid=68020, cgraph_uid=1328, symbol_order=1350)

      Creating newreg=92
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=93
Removing SCRATCH in insn #20 (nop 3)
rescanning insn with uid = 20.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r92
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r93
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 22: point = 0, n_alt = 0
  BB 4
   Insn 25: point = 0, n_alt = -1
  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 1, n_alt = -2
   Insn 15: point = 2, n_alt = -2
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 0
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = -2
   Insn 8: point = 7, n_alt = 3
   Insn 7: point = 8, n_alt = 3
   Insn 4: point = 9, n_alt = 0
   Insn 2: point = 11, n_alt = 5
 r87: [3..4]
 r88: [1..2]
 r89: [6..8]
 r90: [5..7]
 r92: [9..10]
 r93: [0..0]
Compressing live ranges: from 11 to 9 - 81%
Ranges after the compression:
 r87: [3..4]
 r88: [1..2]
 r89: [5..6]
 r90: [5..6]
 r92: [7..8]
 r93: [0..0]

********** Assignment #1: **********

	 Assigning to 92 (cl=INDEX_REGS, orig=92, freq=1, tfirst=92, tfreq=1)...
	   Assign 0 to reload r92 (freq=1)
	 Assigning to 93 (cl=INDEX_REGS, orig=93, freq=1, tfirst=93, tfreq=1)...
	   Assign 2 to reload r93 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
changing reg in insn 4
changing reg in insn 20
deleting insn with uid = 15.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 22.


_ReturnType std::__make_move_if_noexcept_iterator(_Tp*) [with _Tp = char; _ReturnType = std::move_iterator<char*>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={4d,1u} r2={4d} r4={4d,1u} r5={4d,2u} r6={1d,10u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 197{172d,25u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __i+0 S8 A64])
        (reg:DI 5 di [ __i ])) "/usr/include/c++/7/bits/stl_iterator.h":1221 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [9 D.70509+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_iterator.h":1221 1002 {stack_tls_protect_set_di}
     (nil))
(insn 7 4 8 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __i+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1222 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 0 ax [90])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_iterator.h":1222 218 {*adddi_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "/usr/include/c++/7/bits/stl_iterator.h":1222 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_iterator.h":1222 81 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt13move_iteratorIPcEC1ES0_") [flags 0x3]  <function_decl 0x7f4418f38b00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_iterator.h":1222 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 12 11 20 2 (set (reg:DI 0 ax [orig:87 D.69478 ] [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [99 D.68539+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1222 81 {*movdi_internal}
     (nil))
(insn 20 12 21 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [9 D.70509+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [93]))
        ]) "/usr/include/c++/7/bits/stl_iterator.h":1222 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 21 20 27 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "/usr/include/c++/7/bits/stl_iterator.h":1222 617 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 27 21 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 22 27 23 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_iterator.h":1222 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 23 22 24)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 24 23 28 4 430 (nil) [1 uses])
(note 28 24 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 28 29 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_iterator.h":1222 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 29 25 0 NOTE_INSN_DELETED)

;; Function _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*; _Tp = char] (_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E, funcdef_no=3455, decl_uid=68138, cgraph_uid=1329, symbol_order=1351)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -2
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = -2
   Insn 11: point = 7, n_alt = 3
   Insn 10: point = 8, n_alt = 3
   Insn 9: point = 9, n_alt = 3
   Insn 5: point = 10, n_alt = 5
   Insn 4: point = 10, n_alt = 5
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [6..9]
 r90: [5..8]
 r91: [4..7]
Compressing live ranges: from 10 to 6 - 60%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 14
deleting insn with uid = 12.
deleting insn with uid = 16.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns


_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*; _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,9u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 121{96d,25u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [99 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":287 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [99 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_uninitialized.h":287 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_uninitialized.h":287 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [86 D.68142+0 S8 A64])
        (reg:DI 2 cx [ D.68142 ])) "/usr/include/c++/7/bits/stl_uninitialized.h":287 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 2 cx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [99 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [99 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(call_insn 15 14 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_") [flags 0x3]  <function_decl 0x7f4418fc3000 uninitialized_copy>) [0 uninitialized_copy S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":289 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 23 15 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_uninitialized.h":289 81 {*movdi_internal}
     (nil))
(insn 24 23 26 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":289 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function void* rapidxml::memory_pool<Ch>::allocate_aligned(std::size_t) [with Ch = char] (_ZN8rapidxml11memory_poolIcE16allocate_alignedEm, funcdef_no=3456, decl_uid=60363, cgraph_uid=1330, symbol_order=1352)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 53:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 77:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 93: point = 0, n_alt = -1
   Insn 92: point = 0, n_alt = -2
   Insn 88: point = 1, n_alt = -2
   Insn 85: point = 3, n_alt = 3
   Insn 84: point = 4, n_alt = 5
   Insn 83: point = 5, n_alt = 3
   Insn 82: point = 6, n_alt = 0
   Insn 81: point = 8, n_alt = 3
   Insn 80: point = 9, n_alt = 3
  BB 5
   Insn 77: point = 10, n_alt = 5
   Insn 76: point = 11, n_alt = -2
   Insn 75: point = 12, n_alt = 0
   Insn 74: point = 12, n_alt = -2
   Insn 73: point = 13, n_alt = -2
   Insn 72: point = 14, n_alt = 3
   Insn 71: point = 15, n_alt = 3
   Insn 70: point = 17, n_alt = 3
   Insn 69: point = 18, n_alt = 5
   Insn 68: point = 19, n_alt = 3
   Insn 67: point = 20, n_alt = 0
   Insn 66: point = 22, n_alt = 3
   Insn 65: point = 23, n_alt = 3
   Insn 64: point = 24, n_alt = 5
   Insn 63: point = 25, n_alt = 3
   Insn 62: point = 26, n_alt = 3
   Insn 61: point = 28, n_alt = 3
   Insn 60: point = 29, n_alt = 5
   Insn 59: point = 30, n_alt = 3
   Insn 58: point = 31, n_alt = 3
   Insn 57: point = 32, n_alt = 5
   Insn 56: point = 33, n_alt = 3
   Insn 55: point = 34, n_alt = 3
   Insn 54: point = 36, n_alt = 3
   Insn 53: point = 37, n_alt = 5
   Insn 52: point = 38, n_alt = 3
   Insn 51: point = 39, n_alt = 5
   Insn 50: point = 40, n_alt = -2
   Insn 49: point = 41, n_alt = 0
   Insn 48: point = 41, n_alt = -2
   Insn 47: point = 42, n_alt = -2
   Insn 46: point = 43, n_alt = 3
   Insn 45: point = 44, n_alt = 3
   Insn 44: point = 45, n_alt = 5
   Insn 43: point = 46, n_alt = -2
   Insn 42: point = 47, n_alt = 0
   Insn 41: point = 47, n_alt = -2
   Insn 40: point = 48, n_alt = -2
   Insn 39: point = 49, n_alt = 3
   Insn 38: point = 50, n_alt = 3
   Insn 37: point = 51, n_alt = 5
   Insn 36: point = 52, n_alt = 0
   Insn 35: point = 54, n_alt = 3
  BB 4
   Insn 29: point = 55, n_alt = 5
   Insn 28: point = 56, n_alt = 3
  BB 3
   Insn 26: point = 57, n_alt = -1
   Insn 25: point = 57, n_alt = 1
   Insn 24: point = 58, n_alt = 3
   Insn 23: point = 59, n_alt = 5
  BB 2
   Insn 21: point = 59, n_alt = -1
   Insn 20: point = 59, n_alt = 0
   Insn 19: point = 60, n_alt = 3
   Insn 18: point = 62, n_alt = 3
   Insn 17: point = 63, n_alt = 0
   Insn 16: point = 65, n_alt = 3
   Insn 15: point = 66, n_alt = 3
   Insn 14: point = 67, n_alt = 5
   Insn 13: point = 68, n_alt = -2
   Insn 12: point = 69, n_alt = 0
   Insn 11: point = 69, n_alt = -2
   Insn 10: point = 70, n_alt = -2
   Insn 9: point = 71, n_alt = 3
   Insn 8: point = 72, n_alt = 3
   Insn 7: point = 74, n_alt = 3
   Insn 3: point = 75, n_alt = 5
   Insn 2: point = 75, n_alt = 5
 r87: [70..72]
 r88: [59..63]
 r89: [59..60]
 r90: [32..34]
 r91: [24..26]
 r92: [18..20]
 r93: [13..15]
 r94: [4..6]
 r95: [45..46]
 r96: [2..3]
 r97: [0..1]
 r98: [73..74]
 r99: [69..71]
 r100: [67..68]
 r101: [64..66]
 r102: [64..65]
 r103: [61..62]
 r104: [57..58]
 r105: [55..56]
 r108: [51..52]
 r109: [53..54]
 r110: [48..50]
 r111: [47..49]
 r112: [42..44]
 r113: [41..43]
 r114: [39..40]
 r115: [37..38]
 r116: [35..36]
 r117: [32..33]
 r118: [29..31]
 r119: [29..30]
 r120: [27..28]
 r121: [24..25]
 r122: [21..23]
 r123: [21..22]
 r124: [18..19]
 r125: [16..17]
 r126: [12..14]
 r127: [10..11]
 r128: [7..9]
 r129: [7..8]
 r130: [4..5]
Compressing live ranges: from 75 to 58 - 77%
Ranges after the compression:
 r87: [54..55]
 r88: [46..49]
 r89: [46..47]
 r90: [24..25]
 r91: [18..19]
 r92: [14..15]
 r93: [10..11]
 r94: [4..5]
 r95: [34..35]
 r96: [2..3]
 r97: [0..1]
 r98: [56..57]
 r99: [54..55]
 r100: [52..53]
 r101: [50..51]
 r102: [50..51]
 r103: [48..49]
 r104: [44..45]
 r105: [42..43]
 r108: [38..39]
 r109: [40..41]
 r110: [36..37]
 r111: [36..37]
 r112: [32..33]
 r113: [32..33]
 r114: [30..31]
 r115: [28..29]
 r116: [26..27]
 r117: [24..25]
 r118: [22..23]
 r119: [22..23]
 r120: [20..21]
 r121: [18..19]
 r122: [16..17]
 r123: [16..17]
 r124: [14..15]
 r125: [12..13]
 r126: [10..11]
 r127: [8..9]
 r128: [6..7]
 r129: [6..7]
 r130: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 17
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 55
changing reg in insn 57
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 69
changing reg in insn 71
changing reg in insn 73
changing reg in insn 82
changing reg in insn 84
changing reg in insn 43
changing reg in insn 44
changing reg in insn 85
changing reg in insn 88
changing reg in insn 88
changing reg in insn 92
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
deleting insn with uid = 13.
deleting insn with uid = 43.
deleting insn with uid = 50.
deleting insn with uid = 76.
deleting insn with uid = 88.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 75.


void* rapidxml::memory_pool<Ch>::allocate_aligned(std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={30d,30u} r1={18d,13u} r2={5d} r4={9d,5u} r5={9d,5u} r6={1d,45u} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,2u} r18={4d} r19={4d} r20={1d,1u,8e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 478{359d,111u,8e} in 70{66 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 98 99 100 101 102 103
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":599 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64])
        (reg:DI 4 si [ size ])) "libs/src/../include/rapidxml/rapidxml.hpp":599 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 8 [0x8])) [0 this_13(D)->m_ptr+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5alignEPc") [flags 0x3]  <function_decl 0x7f441985fe00 align>) [0 align S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":602 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 12 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])
        (reg:DI 0 ax [100])) "libs/src/../include/rapidxml/rapidxml.hpp":602 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":605 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [102])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":605 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
                (plus:DI (reg/f:DI 1 dx [101])
                    (reg:DI 0 ax [102])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":605 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64]))
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":605 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 16 [0x10])) [0 this_13(D)->m_end+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":605 81 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 1 dx [orig:88 _2 ] [88])
            (reg/f:DI 0 ax [orig:89 _3 ] [89]))) "libs/src/../include/rapidxml/rapidxml.hpp":605 8 {*cmpdi_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":605 617 {*jcc_1}
     (nil)
 -> 78)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 pool_size+0 S8 A64])
        (const_int 65536 [0x10000])) "libs/src/../include/rapidxml/rapidxml.hpp":608 81 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 0 ax [104])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 pool_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":609 81 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [104])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64]))) "libs/src/../include/rapidxml/rapidxml.hpp":609 8 {*cmpdi_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":609 617 {*jcc_1}
     (nil)
 -> 30)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 105
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:DI 0 ax [105])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":610 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 pool_size+0 S8 A64])
        (reg:DI 0 ax [105])) "libs/src/../include/rapidxml/rapidxml.hpp":610 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 95 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
(code_label 30 29 31 5 435 (nil) [1 uses])
(note 31 30 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 31 36 5 (set (reg:DI 0 ax [109])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 pool_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":613 81 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg:DI 0 ax [108])
                (plus:DI (reg:DI 0 ax [109])
                    (const_int 22 [0x16])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":613 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [8 pool_size+0 S8 A64])
            (const_int 22 [0x16]))
        (nil)))
(insn 37 36 38 5 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 alloc_size+0 S8 A64])
        (reg:DI 0 ax [108])) "libs/src/../include/rapidxml/rapidxml.hpp":613 81 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 1 dx [110])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 alloc_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":614 81 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":614 81 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 4 si)
        (reg:DI 1 dx [110])) "libs/src/../include/rapidxml/rapidxml.hpp":614 81 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "libs/src/../include/rapidxml/rapidxml.hpp":614 81 {*movdi_internal}
     (nil))
(call_insn 42 41 44 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE12allocate_rawEm") [flags 0x3]  <function_decl 0x7f441985ff00 allocate_raw>) [0 allocate_raw S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":614 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 42 45 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 raw_memory+0 S8 A64])
        (reg/f:DI 0 ax [orig:95 _21 ] [95])) "libs/src/../include/rapidxml/rapidxml.hpp":614 81 {*movdi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 1 dx [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 raw_memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":617 81 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":617 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 4 si)
        (reg:DI 1 dx [112])) "libs/src/../include/rapidxml/rapidxml.hpp":617 81 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "libs/src/../include/rapidxml/rapidxml.hpp":617 81 {*movdi_internal}
     (nil))
(call_insn 49 48 51 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5alignEPc") [flags 0x3]  <function_decl 0x7f441985fe00 align>) [0 align S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":617 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 51 49 52 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 pool+0 S8 A64])
        (reg:DI 0 ax [114])) "libs/src/../include/rapidxml/rapidxml.hpp":617 81 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 pool+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":618 81 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [100 new_header+0 S8 A64])
        (reg/f:DI 0 ax [115])) "libs/src/../include/rapidxml/rapidxml.hpp":618 81 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":619 81 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg/f:DI 1 dx [orig:90 _4 ] [90])
        (mem/f/j:DI (reg/f:DI 0 ax [116]) [0 this_13(D)->m_begin+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":619 81 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [100 new_header+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":619 81 {*movdi_internal}
     (nil))
(insn 57 56 58 5 (set (mem/f:DI (reg/f:DI 0 ax [117]) [3 new_header_25->previous_begin+0 S8 A64])
        (reg/f:DI 1 dx [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":619 81 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":620 81 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg/f:DI 1 dx [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 raw_memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":620 81 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (mem/f/j:DI (reg/f:DI 0 ax [118]) [0 this_13(D)->m_begin+0 S8 A64])
        (reg/f:DI 1 dx [119])) "libs/src/../include/rapidxml/rapidxml.hpp":620 81 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 pool+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":621 81 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (parallel [
            (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [120])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":621 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [3 pool+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 63 62 64 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":621 81 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 8 [0x8])) [0 this_13(D)->m_ptr+0 S8 A64])
        (reg/f:DI 1 dx [orig:91 _5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":621 81 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (set (reg/f:DI 1 dx [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 raw_memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":622 81 {*movdi_internal}
     (nil))
(insn 66 65 67 5 (set (reg:DI 0 ax [123])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 alloc_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":622 81 {*movdi_internal}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg/f:DI 1 dx [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 1 dx [122])
                    (reg:DI 0 ax [123])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":622 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 raw_memory+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [8 alloc_size+0 S8 A64]))
        (nil)))
(insn 68 67 69 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":622 81 {*movdi_internal}
     (nil))
(insn 69 68 70 5 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 16 [0x10])) [0 this_13(D)->m_end+0 S8 A64])
        (reg/f:DI 1 dx [orig:92 _6 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":622 81 {*movdi_internal}
     (nil))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
(insn 71 70 72 5 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [125])
                (const_int 8 [0x8])) [0 this_13(D)->m_ptr+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:93 _7 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [126])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
(call_insn 75 74 77 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE5alignEPc") [flags 0x3]  <function_decl 0x7f441985fe00 align>) [0 align S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":625 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 77 75 78 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])
        (reg:DI 0 ax [127])) "libs/src/../include/rapidxml/rapidxml.hpp":625 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 94 96 97 128 129 130
(code_label 78 77 79 6 434 (nil) [1 uses])
(note 79 78 80 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 6 (set (reg/f:DI 1 dx [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":629 81 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:DI 0 ax [129])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":629 81 {*movdi_internal}
     (nil))
(insn 82 81 83 6 (parallel [
            (set (reg/f:DI 1 dx [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 1 dx [128])
                    (reg:DI 0 ax [129])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [8 size+0 S8 A64]))
        (nil)))
(insn 83 82 84 6 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":629 81 {*movdi_internal}
     (nil))
(insn 84 83 85 6 (set (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 8 [0x8])) [0 this_13(D)->m_ptr+0 S8 A64])
        (reg/f:DI 1 dx [orig:94 _8 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":629 81 {*movdi_internal}
     (nil))
(insn 85 84 92 6 (set (reg/f:DI 0 ax [orig:96 _33 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 result+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":630 81 {*movdi_internal}
     (nil))
(insn 92 85 93 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:97 <retval> ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":631 81 {*movdi_internal}
     (nil))
(insn 93 92 95 6 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":631 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 95 93 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_base<Ch>::name(const Ch*) [with Ch = char] (_ZN8rapidxml8xml_baseIcE4nameEPKc, funcdef_no=3457, decl_uid=60172, cgraph_uid=1331, symbol_order=1353)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = -2
   Insn 13: point = 2, n_alt = -2
   Insn 12: point = 3, n_alt = 3
   Insn 11: point = 4, n_alt = 3
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 0
   Insn 8: point = 6, n_alt = -2
   Insn 7: point = 7, n_alt = 3
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [2..5]
 r88: [6..7]
 r89: [1..4]
 r90: [0..3]
Compressing live ranges: from 8 to 4 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [2..3]
 r89: [0..1]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.


void rapidxml::xml_base<Ch>::name(const Ch*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={4d,1u} r4={4d,2u} r5={5d,3u} r6={1d,7u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 191{169d,22u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":730 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":730 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7measureIcEEmPKT_") [flags 0x3]  <function_decl 0x7f4419333f00 measure>) [0 measure S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":732 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(insn 12 11 14 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(insn 14 12 15 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "libs/src/../include/rapidxml/rapidxml.hpp":732 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKcm") [flags 0x3]  <function_decl 0x7f441984ae00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":732 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 19 16 20 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":733 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_base<Ch>::value(const Ch*) [with Ch = char] (_ZN8rapidxml8xml_baseIcE5valueEPKc, funcdef_no=3458, decl_uid=60179, cgraph_uid=1332, symbol_order=1354)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = -2
   Insn 13: point = 2, n_alt = -2
   Insn 12: point = 3, n_alt = 3
   Insn 11: point = 4, n_alt = 3
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 6, n_alt = 0
   Insn 8: point = 6, n_alt = -2
   Insn 7: point = 7, n_alt = 3
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r87: [2..5]
 r88: [6..7]
 r89: [1..4]
 r90: [0..3]
Compressing live ranges: from 8 to 4 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [2..3]
 r89: [0..1]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.


void rapidxml::xml_base<Ch>::value(const Ch*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={4d,1u} r4={4d,2u} r5={5d,3u} r6={1d,7u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 191{169d,22u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":760 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 value+0 S8 A64])
        (reg:DI 4 si [ value ])) "libs/src/../include/rapidxml/rapidxml.hpp":760 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8internal7measureIcEEmPKT_") [flags 0x3]  <function_decl 0x7f4419333f00 measure>) [0 measure S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":762 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg:DI 1 dx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(insn 12 11 14 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [70 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(insn 14 12 15 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "libs/src/../include/rapidxml/rapidxml.hpp":762 81 {*movdi_internal}
     (nil))
(call_insn 16 15 19 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":762 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 19 16 20 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":763 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 20 19 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::node_name_pred::test(Ch) [with Ch = char] (_ZN8rapidxml12xml_documentIcE14node_name_pred4testEc, funcdef_no=3459, decl_uid=68205, cgraph_uid=1333, symbol_order=1355)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::node_name_pred::test(Ch) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1439 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1439 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1439 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.46_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1441 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.46_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1441 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1441 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE16lookup_node_nameE") [flags 0x2]  <var_decl 0x7f441a7e5360 lookup_node_name>)) "libs/src/../include/rapidxml/rapidxml.hpp":1441 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_node_name S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1441 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1442 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1442 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::attribute_name_pred::test(Ch) [with Ch = char] (_ZN8rapidxml12xml_documentIcE19attribute_name_pred4testEc, funcdef_no=3460, decl_uid=68213, cgraph_uid=1334, symbol_order=1356)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::attribute_name_pred::test(Ch) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1448 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1448 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1448 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.51_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1450 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.51_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1450 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1450 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE21lookup_attribute_nameE") [flags 0x2]  <var_decl 0x7f441a7e5630 lookup_attribute_name>)) "libs/src/../include/rapidxml/rapidxml.hpp":1450 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_attribute_name S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1450 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1451 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1451 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_name_pred; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_19attribute_name_predELi0EEEvRPc, funcdef_no=3461, decl_uid=68217, cgraph_uid=1335, symbol_order=1357)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_name_pred; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 445 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE19attribute_name_pred4testEc") [flags 0x3]  <function_decl 0x7f4418f47e00 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.52_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.52_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 444 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_attribute<Ch>* rapidxml::memory_pool<Ch>::allocate_attribute(const Ch*, const Ch*, std::size_t, std::size_t) [with Ch = char] (_ZN8rapidxml11memory_poolIcE18allocate_attributeEPKcS3_mm, funcdef_no=3462, decl_uid=60334, cgraph_uid=1336, symbol_order=1358)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 95: point = 0, n_alt = -1
   Insn 94: point = 0, n_alt = -2
   Insn 90: point = 1, n_alt = -2
   Insn 87: point = 3, n_alt = 3
  BB 11
   Insn 101: point = 4, n_alt = -1
   Insn 73: point = 4, n_alt = 0
   Insn 72: point = 4, n_alt = -2
   Insn 71: point = 5, n_alt = -2
   Insn 70: point = 6, n_alt = -2
   Insn 69: point = 7, n_alt = 3
   Insn 68: point = 8, n_alt = 3
   Insn 67: point = 9, n_alt = 3
  BB 12
   Insn 82: point = 10, n_alt = 0
   Insn 81: point = 10, n_alt = -2
   Insn 80: point = 11, n_alt = -2
   Insn 79: point = 12, n_alt = 3
   Insn 78: point = 13, n_alt = 3
  BB 10
   Insn 65: point = 14, n_alt = -1
   Insn 64: point = 14, n_alt = 1
  BB 9
   Insn 62: point = 14, n_alt = -1
   Insn 61: point = 14, n_alt = 1
  BB 7
   Insn 99: point = 14, n_alt = -1
   Insn 47: point = 14, n_alt = 0
   Insn 46: point = 14, n_alt = -2
   Insn 45: point = 15, n_alt = -2
   Insn 44: point = 16, n_alt = -2
   Insn 43: point = 17, n_alt = 3
   Insn 42: point = 18, n_alt = 3
   Insn 41: point = 19, n_alt = 3
  BB 8
   Insn 56: point = 20, n_alt = 0
   Insn 55: point = 20, n_alt = -2
   Insn 54: point = 21, n_alt = -2
   Insn 53: point = 22, n_alt = 3
   Insn 52: point = 23, n_alt = 3
  BB 6
   Insn 39: point = 24, n_alt = -1
   Insn 38: point = 24, n_alt = 1
  BB 5
   Insn 36: point = 24, n_alt = -1
   Insn 35: point = 24, n_alt = 1
   Insn 34: point = 24, n_alt = 5
  BB 3
   Insn 97: point = 26, n_alt = -1
   Insn 26: point = 26, n_alt = -2
   Insn 25: point = 28, n_alt = 0
   Insn 24: point = 28, n_alt = -2
  BB 4
   Insn 31: point = 29, n_alt = -2
  BB 2
   Insn 22: point = 32, n_alt = -1
   Insn 21: point = 32, n_alt = 0
   Insn 20: point = 32, n_alt = -2
   Insn 19: point = 33, n_alt = 0
   Insn 18: point = 33, n_alt = 2
   Insn 17: point = 33, n_alt = -2
   Insn 16: point = 34, n_alt = 3
   Insn 15: point = 35, n_alt = 5
   Insn 14: point = 36, n_alt = -2
   Insn 13: point = 37, n_alt = 0
   Insn 12: point = 37, n_alt = -2
   Insn 11: point = 38, n_alt = 2
   Insn 10: point = 38, n_alt = 3
   Insn 6: point = 39, n_alt = 5
   Insn 5: point = 39, n_alt = 5
   Insn 4: point = 39, n_alt = 5
   Insn 3: point = 39, n_alt = 5
   Insn 2: point = 39, n_alt = 5
 r87: [14..19]
 r88: [20..23]
 r89: [4..9]
 r90: [10..13]
 r91: [29..29] [24..26]
 r92: [35..36]
 r93: [33..34]
 r94: [30..32] [27..28]
 r95: [2..3]
 r96: [0..1]
 r97: [37..38]
 r98: [16..18]
 r99: [15..17]
 r100: [21..22]
 r101: [6..8]
 r102: [5..7]
 r103: [11..12]
Compressing live ranges: from 39 to 25 - 64%
Ranges after the compression:
 r87: [8..9]
 r88: [10..11]
 r89: [4..5]
 r90: [6..7]
 r91: [16..16] [12..13]
 r92: [21..22]
 r93: [19..20]
 r94: [17..18] [14..15]
 r95: [2..3]
 r96: [0..1]
 r97: [23..24]
 r98: [8..9]
 r99: [8..9]
 r100: [10..11]
 r101: [4..5]
 r102: [4..5]
 r103: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 41
changing reg in insn 46
changing reg in insn 52
changing reg in insn 55
changing reg in insn 67
changing reg in insn 72
changing reg in insn 78
changing reg in insn 81
changing reg in insn 31
changing reg in insn 26
changing reg in insn 34
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 31
changing reg in insn 26
changing reg in insn 24
changing reg in insn 21
changing reg in insn 87
changing reg in insn 90
changing reg in insn 90
changing reg in insn 94
changing reg in insn 10
changing reg in insn 12
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 68
changing reg in insn 70
changing reg in insn 69
changing reg in insn 71
changing reg in insn 79
changing reg in insn 80
deleting insn with uid = 14.
deleting insn with uid = 44.
deleting insn with uid = 70.
deleting insn with uid = 90.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 82.


rapidxml::xml_attribute<Ch>* rapidxml::memory_pool<Ch>::allocate_attribute(const Ch*, const Ch*, std::size_t, std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8]
;;  ref usage 	r0={18d,12u} r1={12d,5u} r2={10d,3u} r3={1d,4u} r4={14d,7u} r5={15d,8u} r6={1d,37u} r7={1d,20u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={12d,5u} r18={7d} r19={7d} r20={1d,1u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={8d,1u} r38={8d} r39={7d} r40={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} 
;;    total ref usage 660{557d,103u,0e} in 58{51 regular + 7 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 97
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":447 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "libs/src/../include/rapidxml/rapidxml.hpp":447 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 value+0 S8 A64])
        (reg:DI 1 dx [ value ])) "libs/src/../include/rapidxml/rapidxml.hpp":447 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 name_size+0 S8 A64])
        (reg:DI 2 cx [ name_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":447 81 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [8 value_size+0 S8 A64])
        (reg:DI 37 r8 [ value_size ])) "libs/src/../include/rapidxml/rapidxml.hpp":447 81 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":450 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (const_int 56 [0x38])) "libs/src/../include/rapidxml/rapidxml.hpp":450 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "libs/src/../include/rapidxml/rapidxml.hpp":450 81 {*movdi_internal}
     (nil))
(call_insn 13 12 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE16allocate_alignedEm") [flags 0x3]  <function_decl 0x7f441986d000 allocate_aligned>) [0 allocate_aligned S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":450 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 13 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [9 memory+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 _14 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":450 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:93 _16 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [9 memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:93 _16 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (const_int 56 [0x38])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(call_insn 19 18 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZnwmPv") [flags 0x3]  <function_decl 0x7f441b8f5000 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":451 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 3 bx [orig:94 _18 ] [94])
        (reg:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 3 bx [orig:94 _18 ] [94])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":451 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":451 617 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(call_insn 25 24 26 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml13xml_attributeIcEC1Ev") [flags 0x3]  <function_decl 0x7f44194e8d00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":451 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 25 97 3 (set (reg/f:DI 0 ax [orig:91 iftmp.53_5 ] [91])
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(jump_insn 97 26 98 3 (set (pc)
        (label_ref 32)) 649 {jump}
     (nil)
 -> 32)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

(barrier 98 97 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 91
(code_label 29 98 30 4 447 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 0 ax [orig:91 iftmp.53_5 ] [91])
        (reg/f:DI 3 bx [orig:94 _18 ] [94])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 17 [flags]
(code_label 32 31 33 5 448 (nil) [1 uses])
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 iftmp.53_5 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":451 81 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":452 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":452 617 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [8 name_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":454 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 39 38 40 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":454 617 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 98 99
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":455 81 {*movdi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:DI 1 dx [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [8 name_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":455 81 {*movdi_internal}
     (nil))
(insn 43 42 45 7 (set (reg:DI 2 cx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":455 81 {*movdi_internal}
     (nil))
(insn 45 43 46 7 (set (reg:DI 4 si)
        (reg:DI 2 cx [99])) "libs/src/../include/rapidxml/rapidxml.hpp":455 81 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":455 81 {*movdi_internal}
     (nil))
(call_insn 47 46 99 7 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKcm") [flags 0x3]  <function_decl 0x7f441984ae00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":455 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 99 47 100 7 (set (pc)
        (label_ref 59)) 649 {jump}
     (nil)
 -> 59)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 100 99 50)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 100
(code_label 50 100 51 8 450 (nil) [1 uses])
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":457 81 {*movdi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:DI 1 dx [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 name+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":457 81 {*movdi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [100])) "libs/src/../include/rapidxml/rapidxml.hpp":457 81 {*movdi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":457 81 {*movdi_internal}
     (nil))
(call_insn 56 55 59 8 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE4nameEPKc") [flags 0x3]  <function_decl 0x7f441984af00 name>) [0 name S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":457 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;;              8 (FALLTHRU)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 59 56 60 9 449 (nil) [2 uses])
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [3 value+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":459 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":459 617 {*jcc_1}
     (nil)
 -> 85)
;;  succ:       10 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [8 value_size+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":461 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 65 64 66 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":461 617 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 101 102
(note 66 65 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 11 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":462 81 {*movdi_internal}
     (nil))
(insn 68 67 69 11 (set (reg:DI 1 dx [101])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [8 value_size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":462 81 {*movdi_internal}
     (nil))
(insn 69 68 71 11 (set (reg:DI 2 cx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":462 81 {*movdi_internal}
     (nil))
(insn 71 69 72 11 (set (reg:DI 4 si)
        (reg:DI 2 cx [102])) "libs/src/../include/rapidxml/rapidxml.hpp":462 81 {*movdi_internal}
     (nil))
(insn 72 71 73 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":462 81 {*movdi_internal}
     (nil))
(call_insn 73 72 101 11 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 101 73 102 11 (set (pc)
        (label_ref 85)) 649 {jump}
     (nil)
 -> 85)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 76)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 103
(code_label 76 102 77 12 453 (nil) [1 uses])
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 12 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":464 81 {*movdi_internal}
     (nil))
(insn 79 78 80 12 (set (reg:DI 1 dx [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":464 81 {*movdi_internal}
     (nil))
(insn 80 79 81 12 (set (reg:DI 4 si)
        (reg:DI 1 dx [103])) "libs/src/../include/rapidxml/rapidxml.hpp":464 81 {*movdi_internal}
     (nil))
(insn 81 80 82 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":464 81 {*movdi_internal}
     (nil))
(call_insn 82 81 85 12 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKc") [flags 0x3]  <function_decl 0x7f441984a700 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":464 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9
;;              12 (FALLTHRU)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 95 96
(code_label 85 82 86 13 452 (nil) [2 uses])
(note 86 85 87 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 94 13 (set (reg/f:DI 0 ax [orig:95 _31 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":466 81 {*movdi_internal}
     (nil))
(insn 94 87 95 13 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:96 <retval> ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":467 81 {*movdi_internal}
     (nil))
(insn 95 94 103 13 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":467 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 103 95 0 NOTE_INSN_DELETED)

;; Function void rapidxml::xml_node<Ch>::append_attribute(rapidxml::xml_attribute<Ch>*) [with Ch = char] (_ZN8rapidxml8xml_nodeIcE16append_attributeEPNS_13xml_attributeIcEE, funcdef_no=3463, decl_uid=60263, cgraph_uid=1337, symbol_order=1359)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 62:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 65:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 4
   Insn 25: point = 0, n_alt = 0
   Insn 24: point = 0, n_alt = 4
   Insn 23: point = 0, n_alt = 4
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = 4
  BB 8
   Insn 70: point = 0, n_alt = -1
   Insn 67: point = 0, n_alt = 5
   Insn 66: point = 1, n_alt = 3
   Insn 65: point = 2, n_alt = 5
   Insn 64: point = 3, n_alt = 3
   Insn 63: point = 4, n_alt = 3
   Insn 62: point = 5, n_alt = 5
   Insn 61: point = 6, n_alt = 3
   Insn 60: point = 7, n_alt = 3
  BB 6
   Insn 72: point = 8, n_alt = -1
   Insn 48: point = 8, n_alt = 5
   Insn 47: point = 9, n_alt = 3
   Insn 46: point = 10, n_alt = 3
   Insn 45: point = 12, n_alt = 3
   Insn 44: point = 13, n_alt = 5
   Insn 43: point = 14, n_alt = 3
   Insn 42: point = 15, n_alt = 3
   Insn 41: point = 17, n_alt = 3
  BB 7
   Insn 57: point = 18, n_alt = 5
   Insn 56: point = 19, n_alt = 3
   Insn 55: point = 20, n_alt = 3
   Insn 54: point = 21, n_alt = 5
   Insn 53: point = 22, n_alt = 3
  BB 5
   Insn 39: point = 23, n_alt = -1
   Insn 38: point = 23, n_alt = 0
   Insn 37: point = 24, n_alt = 0
   Insn 36: point = 25, n_alt = 0
   Insn 35: point = 26, n_alt = -2
   Insn 34: point = 27, n_alt = 0
   Insn 33: point = 27, n_alt = -2
   Insn 32: point = 28, n_alt = 2
   Insn 31: point = 28, n_alt = 2
   Insn 30: point = 28, n_alt = 0
   Insn 29: point = 28, n_alt = 3
  BB 3
   Insn 15: point = 29, n_alt = -1
   Insn 14: point = 29, n_alt = 0
   Insn 13: point = 30, n_alt = -2
   Insn 12: point = 31, n_alt = 0
   Insn 11: point = 31, n_alt = -2
   Insn 10: point = 32, n_alt = 3
  BB 2
   Insn 8: point = 33, n_alt = -1
   Insn 7: point = 33, n_alt = 1
   Insn 3: point = 33, n_alt = 5
   Insn 2: point = 33, n_alt = 5
 r87: [31..32]
 r88: [29..30]
 r89: [25..26]
 r90: [13..15]
 r91: [8..10]
 r92: [23..24]
 r93: [27..28]
 r94: [16..17]
 r95: [13..14]
 r96: [11..12]
 r97: [8..9]
 r98: [21..22]
 r99: [18..20]
 r100: [18..19]
 r101: [5..7]
 r102: [5..6]
 r103: [2..4]
 r104: [2..3]
 r105: [0..1]
Compressing live ranges: from 33 to 28 - 84%
Ranges after the compression:
 r87: [26..27]
 r88: [24..25]
 r89: [20..21]
 r90: [10..11]
 r91: [6..7]
 r92: [18..19]
 r93: [22..23]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [6..7]
 r98: [16..17]
 r99: [14..15]
 r100: [14..15]
 r101: [4..5]
 r102: [4..5]
 r103: [2..3]
 r104: [2..3]
 r105: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 44
changing reg in insn 46
changing reg in insn 48
changing reg in insn 37
changing reg in insn 38
changing reg in insn 29
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
deleting insn with uid = 13.
deleting insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns


void rapidxml::xml_node<Ch>::append_attribute(rapidxml::xml_attribute<Ch>*) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={16d,14u} r1={11d,7u} r2={6d,2u} r4={6d,3u} r5={7d,4u} r6={1d,25u} r7={1d,11u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 335{264d,71u,0e} in 47{44 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1217 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])
        (reg:DI 4 si [ attribute ])) "libs/src/../include/rapidxml/rapidxml.hpp":1217 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1219 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1219 617 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1219 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1219 81 {*movdi_internal}
     (nil))
(call_insn 12 11 14 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE6parentEv") [flags 0x3]  <function_decl 0x7f4419852000 parent>) [0 parent S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1219 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 12 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 _2 ] [88])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1219 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 71)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1219 617 {*jcc_1}
     (nil)
 -> 71)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 19 15 20 4 457 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZN8rapidxml8xml_nodeIcE16append_attributeEPNS_13xml_attributeIcEEE19__PRETTY_FUNCTION__") [flags 0x2]  <var_decl 0x7f4418fc7990 __PRETTY_FUNCTION__>)) "libs/src/../include/rapidxml/rapidxml.hpp":1219 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 1 dx)
        (const_int 1219 [0x4c3])) "libs/src/../include/rapidxml/rapidxml.hpp":1219 82 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44188d42d0 *.LC10>)) "libs/src/../include/rapidxml/rapidxml.hpp":1219 81 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f44186d2870 *.LC22>)) "libs/src/../include/rapidxml/rapidxml.hpp":1219 81 {*movdi_internal}
     (nil))
(call_insn 25 24 26 4 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f441a7d0b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1219 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 71)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 92 93
(code_label 71 26 28 5 461 (nil) [1 uses])
(note 28 71 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1220 81 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "libs/src/../include/rapidxml/rapidxml.hpp":1220 82 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1220 81 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:DI 4 si)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1220 81 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "libs/src/../include/rapidxml/rapidxml.hpp":1220 81 {*movdi_internal}
     (nil))
(call_insn 34 33 36 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_nodeIcE15first_attributeEPKcmb") [flags 0x3]  <function_decl 0x7f4419852b00 first_attribute>) [0 first_attribute S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1220 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 36 34 37 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1220 4 {*cmpdi_ccno_1}
     (nil))
(insn 37 36 38 5 (set (reg:QI 0 ax [orig:92 retval.54_14 ] [92])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1220 613 {*setcc_qi}
     (nil))
(insn 38 37 39 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 retval.54_14 ] [92])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1220 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 39 38 40 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1220 617 {*jcc_1}
     (nil)
 -> 51)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90 91 94 95 96 97
(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 6 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1222 81 {*movdi_internal}
     (nil))
(insn 42 41 43 6 (set (reg/f:DI 1 dx [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 72 [0x48])) [53 this_11(D)->m_last_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1222 81 {*movdi_internal}
     (nil))
(insn 43 42 44 6 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1222 81 {*movdi_internal}
     (nil))
(insn 44 43 45 6 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [95])
                (const_int 40 [0x28])) [53 attribute_8(D)->m_prev_attribute+0 S8 A64])
        (reg/f:DI 1 dx [orig:90 _4 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1222 81 {*movdi_internal}
     (nil))
(insn 45 44 46 6 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1223 81 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 72 [0x48])) [53 this_11(D)->m_last_attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1223 81 {*movdi_internal}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 1 dx [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1223 81 {*movdi_internal}
     (nil))
(insn 48 47 72 6 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 48 [0x30])) [53 _5->m_next_attribute+0 S8 A64])
        (reg/f:DI 1 dx [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1223 81 {*movdi_internal}
     (nil))
(jump_insn 72 48 73 6 (set (pc)
        (label_ref 58)) 649 {jump}
     (nil)
 -> 58)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 73 72 51)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 98 99 100
(code_label 51 73 52 7 459 (nil) [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1227 81 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 40 [0x28])) [53 attribute_8(D)->m_prev_attribute+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1227 81 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1228 81 {*movdi_internal}
     (nil))
(insn 56 55 57 7 (set (reg/f:DI 1 dx [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1228 81 {*movdi_internal}
     (nil))
(insn 57 56 58 7 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 64 [0x40])) [53 this_11(D)->m_first_attribute+0 S8 A64])
        (reg/f:DI 1 dx [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1228 81 {*movdi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 101 102 103 104 105
(code_label 58 57 59 8 460 (nil) [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1230 81 {*movdi_internal}
     (nil))
(insn 61 60 62 8 (set (reg/f:DI 1 dx [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1230 81 {*movdi_internal}
     (nil))
(insn 62 61 63 8 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 72 [0x48])) [53 this_11(D)->m_last_attribute+0 S8 A64])
        (reg/f:DI 1 dx [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1230 81 {*movdi_internal}
     (nil))
(insn 63 62 64 8 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1231 81 {*movdi_internal}
     (nil))
(insn 64 63 65 8 (set (reg/f:DI 1 dx [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1231 81 {*movdi_internal}
     (nil))
(insn 65 64 66 8 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 32 [0x20])) [51 attribute_8(D)->D.61439.m_parent+0 S8 A64])
        (reg/f:DI 1 dx [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1231 81 {*movdi_internal}
     (nil))
(insn 66 65 67 8 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [53 attribute+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1232 81 {*movdi_internal}
     (nil))
(insn 67 66 70 8 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 48 [0x30])) [53 attribute_8(D)->m_next_attribute+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1232 81 {*movdi_internal}
     (nil))
(insn 70 67 74 8 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1233 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 74 70 0 NOTE_INSN_DELETED)

;; Function static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pred<'\''>; StopPredPure = rapidxml::xml_document<>::attribute_value_pure_pred<'\''>; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_20attribute_value_predILc39EEENS1_25attribute_value_pure_predILc39EEELi0EEEPcRS7_, funcdef_no=3464, decl_uid=68232, cgraph_uid=1338, symbol_order=1360)

      Creating newreg=208
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=209
Removing SCRATCH in insn #358 (nop 3)
rescanning insn with uid = 358.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r208
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 64:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 79:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 109:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 147:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 150:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 173:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 176:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 177:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 188:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 199:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 202:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 214:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 228:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=210 from oldreg=187, assigning class GENERAL_REGS to r210
  237: {r210:DI=r210:DI<<0x4;clobber flags:CC;}
      REG_DEAD r187:DI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x18]<<0x4
    Inserting insn reload before:
  426: r210:DI=r187:DI
    Inserting insn reload after:
  427: r144:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 239
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 240:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 256:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 257:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 264:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 265:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 266:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 283:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 284:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 298:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 307:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 316:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 317:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 334:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 335:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 336:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 337:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 338:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 339:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 349:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r209
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 54
EBB 37
EBB 38
EBB 39
EBB 40
EBB 55
EBB 41
EBB 42
EBB 43
EBB 44
EBB 50
EBB 51
EBB 52
EBB 53
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49

********** Pseudo live ranges #1: **********

  BB 44
   Insn 319: point = 0, n_alt = 0
   Insn 318: point = 0, n_alt = -2
   Insn 317: point = 1, n_alt = 4
   Insn 316: point = 1, n_alt = 4
   Insn 315: point = 1, n_alt = 0
   Insn 314: point = 1, n_alt = -2
   Insn 313: point = 1, n_alt = 4
   Insn 312: point = 1, n_alt = -2
   Insn 311: point = 2, n_alt = 3
   Insn 310: point = 3, n_alt = -2
   Insn 309: point = 5, n_alt = -2
   Insn 308: point = 6, n_alt = 0
   Insn 307: point = 6, n_alt = 2
  BB 48
   Insn 360: point = 6, n_alt = 0
  BB 49
   Insn 363: point = 6, n_alt = -1
  BB 47
   Insn 359: point = 6, n_alt = -1
   Insn 358: point = 6, n_alt = 0
   Insn 357: point = 7, n_alt = -2
   Insn 353: point = 8, n_alt = -2
   Insn 350: point = 10, n_alt = 3
   Insn 349: point = 11, n_alt = 5
   Insn 348: point = 12, n_alt = 3
   Insn 347: point = 13, n_alt = 3
  BB 3
   Insn 26: point = 14, n_alt = -1
   Insn 25: point = 14, n_alt = 0
   Insn 24: point = 15, n_alt = 0
   Insn 23: point = 16, n_alt = 0
   Insn 22: point = 17, n_alt = -2
   Insn 21: point = 18, n_alt = 0
   Insn 20: point = 18, n_alt = -2
   Insn 19: point = 19, n_alt = 0
   Insn 18: point = 21, n_alt = 2
   Insn 17: point = 23, n_alt = 3
  BB 46
   Insn 399: point = 24, n_alt = -1
  BB 43
   Insn 397: point = 24, n_alt = -1
   Insn 302: point = 24, n_alt = 1
  BB 42
   Insn 300: point = 24, n_alt = -1
   Insn 299: point = 24, n_alt = 0
   Insn 298: point = 25, n_alt = 2
   Insn 297: point = 27, n_alt = 3
  BB 37
   Insn 392: point = 28, n_alt = -1
   Insn 251: point = 28, n_alt = 0
   Insn 250: point = 28, n_alt = -2
   Insn 249: point = 29, n_alt = -2
   Insn 248: point = 30, n_alt = 3
   Insn 247: point = 31, n_alt = 3
  BB 54
   Insn 421: point = 32, n_alt = -1
  BB 35
   Insn 230: point = 32, n_alt = -1
   Insn 229: point = 32, n_alt = 0
   Insn 228: point = 32, n_alt = 6
   Insn 227: point = 33, n_alt = 2
   Insn 226: point = 35, n_alt = 4
   Insn 225: point = 36, n_alt = 1
   Insn 224: point = 38, n_alt = 0
   Insn 223: point = 40, n_alt = -2
   Insn 222: point = 42, n_alt = 2
   Insn 221: point = 44, n_alt = 3
  BB 36
   Insn 390: point = 45, n_alt = -1
   Insn 241: point = 45, n_alt = 1
   Insn 240: point = 45, n_alt = 5
   Insn 239: point = 46, n_alt = 0
   Insn 238: point = 48, n_alt = 0
   Insn 427: point = 49, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
   Insn 237: point = 51, n_alt = 0
   Insn 426: point = 51, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
	Hard reg 0 is preferable by r210 with profit 1
   Insn 236: point = 53, n_alt = 3
  BB 34
   Insn 219: point = 54, n_alt = 1
   Insn 218: point = 54, n_alt = 5
  BB 41
   Insn 294: point = 54, n_alt = 0
   Insn 293: point = 54, n_alt = -2
   Insn 292: point = 55, n_alt = -2
   Insn 291: point = 56, n_alt = 3
   Insn 290: point = 57, n_alt = 3
  BB 55
   Insn 424: point = 58, n_alt = -1
  BB 39
   Insn 268: point = 58, n_alt = -1
   Insn 267: point = 58, n_alt = 0
   Insn 266: point = 58, n_alt = 6
   Insn 265: point = 59, n_alt = 2
   Insn 264: point = 61, n_alt = 4
   Insn 263: point = 62, n_alt = 1
   Insn 262: point = 64, n_alt = 0
   Insn 261: point = 66, n_alt = -2
   Insn 260: point = 68, n_alt = 2
   Insn 259: point = 70, n_alt = 3
  BB 40
   Insn 395: point = 71, n_alt = -1
   Insn 284: point = 71, n_alt = 1
   Insn 283: point = 71, n_alt = 5
   Insn 282: point = 72, n_alt = 0
   Insn 281: point = 74, n_alt = 0
   Insn 280: point = 75, n_alt = -2
   Insn 279: point = 77, n_alt = -2
   Insn 278: point = 79, n_alt = 0
   Insn 277: point = 81, n_alt = 0
   Insn 276: point = 82, n_alt = 0
   Insn 275: point = 82, n_alt = -2
   Insn 274: point = 83, n_alt = 3
  BB 38
   Insn 257: point = 84, n_alt = 1
   Insn 256: point = 84, n_alt = 5
  BB 33
   Insn 216: point = 84, n_alt = -1
   Insn 215: point = 84, n_alt = 0
   Insn 214: point = 85, n_alt = 2
   Insn 213: point = 87, n_alt = 0
   Insn 212: point = 89, n_alt = 3
  BB 32
   Insn 387: point = 90, n_alt = -1
   Insn 203: point = 90, n_alt = 1
   Insn 202: point = 90, n_alt = 5
   Insn 201: point = 91, n_alt = 0
   Insn 200: point = 93, n_alt = 3
   Insn 199: point = 94, n_alt = 6
   Insn 198: point = 95, n_alt = 3
  BB 29
   Insn 385: point = 96, n_alt = -1
   Insn 177: point = 96, n_alt = 1
   Insn 176: point = 96, n_alt = 5
   Insn 175: point = 97, n_alt = 0
   Insn 174: point = 99, n_alt = 3
   Insn 173: point = 100, n_alt = 6
   Insn 172: point = 101, n_alt = 3
  BB 26
   Insn 383: point = 102, n_alt = -1
   Insn 151: point = 102, n_alt = 1
   Insn 150: point = 102, n_alt = 5
   Insn 149: point = 103, n_alt = 0
   Insn 148: point = 105, n_alt = 3
   Insn 147: point = 106, n_alt = 6
   Insn 146: point = 107, n_alt = 3
  BB 21
   Insn 381: point = 108, n_alt = -1
   Insn 113: point = 108, n_alt = 1
   Insn 112: point = 108, n_alt = 5
   Insn 111: point = 109, n_alt = 0
   Insn 110: point = 111, n_alt = 3
   Insn 109: point = 112, n_alt = 6
   Insn 108: point = 113, n_alt = 3
  BB 16
   Insn 379: point = 114, n_alt = -1
   Insn 79: point = 114, n_alt = 1
   Insn 78: point = 114, n_alt = 5
   Insn 77: point = 115, n_alt = 0
   Insn 76: point = 117, n_alt = 3
   Insn 75: point = 118, n_alt = 6
   Insn 74: point = 119, n_alt = 3
  BB 45
   Insn 339: point = 120, n_alt = 6
   Insn 338: point = 121, n_alt = 2
   Insn 337: point = 123, n_alt = 5
   Insn 336: point = 124, n_alt = 3
   Insn 335: point = 125, n_alt = 3
   Insn 334: point = 126, n_alt = 5
   Insn 333: point = 127, n_alt = 3
   Insn 332: point = 128, n_alt = 3
  BB 51
   Insn 409: point = 129, n_alt = -1
   Insn 408: point = 129, n_alt = -1
  BB 25
   Insn 144: point = 129, n_alt = -1
   Insn 143: point = 129, n_alt = 0
   Insn 142: point = 130, n_alt = 2
   Insn 141: point = 132, n_alt = 0
   Insn 140: point = 134, n_alt = 3
  BB 24
   Insn 138: point = 135, n_alt = -1
   Insn 137: point = 135, n_alt = 0
   Insn 136: point = 136, n_alt = 2
   Insn 135: point = 138, n_alt = 0
   Insn 134: point = 140, n_alt = 3
  BB 23
   Insn 132: point = 141, n_alt = -1
   Insn 131: point = 141, n_alt = 0
   Insn 130: point = 142, n_alt = 2
   Insn 129: point = 144, n_alt = 0
   Insn 128: point = 146, n_alt = 3
  BB 22
   Insn 126: point = 147, n_alt = -1
   Insn 125: point = 147, n_alt = 0
   Insn 124: point = 148, n_alt = 2
   Insn 123: point = 150, n_alt = 0
   Insn 122: point = 152, n_alt = 3
  BB 12
   Insn 377: point = 153, n_alt = -1
  BB 11
   Insn 51: point = 153, n_alt = -1
   Insn 50: point = 153, n_alt = 0
  BB 50
   Insn 404: point = 155, n_alt = -1
   Insn 403: point = 155, n_alt = -1
  BB 20
   Insn 106: point = 155, n_alt = -1
   Insn 105: point = 155, n_alt = 0
   Insn 104: point = 156, n_alt = 2
   Insn 103: point = 158, n_alt = 0
   Insn 102: point = 160, n_alt = 3
  BB 19
   Insn 100: point = 161, n_alt = -1
   Insn 99: point = 161, n_alt = 0
   Insn 98: point = 162, n_alt = 2
   Insn 97: point = 164, n_alt = 0
   Insn 96: point = 166, n_alt = 3
  BB 18
   Insn 94: point = 167, n_alt = -1
   Insn 93: point = 167, n_alt = 0
   Insn 92: point = 168, n_alt = 2
   Insn 91: point = 170, n_alt = 0
   Insn 90: point = 172, n_alt = 3
  BB 17
   Insn 88: point = 173, n_alt = -1
   Insn 87: point = 173, n_alt = 0
   Insn 86: point = 174, n_alt = 2
   Insn 85: point = 176, n_alt = 0
   Insn 84: point = 178, n_alt = 3
  BB 15
   Insn 72: point = 179, n_alt = -1
   Insn 71: point = 179, n_alt = 0
   Insn 70: point = 180, n_alt = 2
   Insn 69: point = 182, n_alt = 0
   Insn 68: point = 184, n_alt = 3
  BB 14
   Insn 66: point = 185, n_alt = -1
   Insn 65: point = 185, n_alt = 0
   Insn 64: point = 186, n_alt = 2
   Insn 63: point = 188, n_alt = 0
   Insn 62: point = 190, n_alt = 3
  BB 13
   Insn 60: point = 191, n_alt = -1
   Insn 59: point = 191, n_alt = 0
   Insn 58: point = 192, n_alt = 2
   Insn 57: point = 194, n_alt = 0
   Insn 56: point = 196, n_alt = 3
  BB 9
   Insn 375: point = 197, n_alt = -1
  BB 8
   Insn 44: point = 197, n_alt = -1
   Insn 43: point = 197, n_alt = 0
  BB 7
   Insn 42: point = 199, n_alt = -1
   Insn 41: point = 199, n_alt = 0
  BB 53
   Insn 418: point = 200, n_alt = -1
  BB 31
   Insn 196: point = 200, n_alt = -1
   Insn 195: point = 200, n_alt = 0
   Insn 194: point = 201, n_alt = 2
   Insn 193: point = 203, n_alt = 0
   Insn 192: point = 205, n_alt = 3
  BB 30
   Insn 190: point = 206, n_alt = -1
   Insn 189: point = 206, n_alt = 0
   Insn 188: point = 207, n_alt = 2
   Insn 187: point = 209, n_alt = 0
   Insn 186: point = 211, n_alt = 3
  BB 10
   Insn 49: point = 212, n_alt = -1
   Insn 48: point = 212, n_alt = 0
  BB 6
   Insn 40: point = 213, n_alt = -1
   Insn 39: point = 213, n_alt = 0
  BB 52
   Insn 414: point = 214, n_alt = -1
   Insn 413: point = 214, n_alt = -1
  BB 28
   Insn 170: point = 214, n_alt = -1
   Insn 169: point = 214, n_alt = 0
   Insn 168: point = 215, n_alt = 2
   Insn 167: point = 217, n_alt = 0
   Insn 166: point = 219, n_alt = 3
  BB 27
   Insn 164: point = 220, n_alt = -1
   Insn 163: point = 220, n_alt = 0
   Insn 162: point = 221, n_alt = 2
   Insn 161: point = 223, n_alt = 0
   Insn 160: point = 225, n_alt = 3
  BB 5
   Insn 38: point = 226, n_alt = -1
   Insn 37: point = 226, n_alt = 0
   Insn 36: point = 226, n_alt = 0
   Insn 35: point = 228, n_alt = 2
   Insn 34: point = 230, n_alt = 0
   Insn 33: point = 232, n_alt = 3
  BB 4
   Insn 31: point = 233, n_alt = -1
   Insn 30: point = 233, n_alt = 0
   Insn 29: point = 234, n_alt = 2
   Insn 28: point = 236, n_alt = 3
  BB 2
   Insn 15: point = 237, n_alt = 5
   Insn 14: point = 238, n_alt = 3
   Insn 13: point = 239, n_alt = 5
   Insn 12: point = 240, n_alt = 3
   Insn 11: point = 242, n_alt = 3
   Insn 10: point = 243, n_alt = 0
   Insn 9: point = 243, n_alt = -2
   Insn 8: point = 244, n_alt = 3
   Insn 4: point = 245, n_alt = 0
   Insn 2: point = 247, n_alt = 5
 r87: [20..21]
 r88: [18..19]
 r89: [16..17]
 r90: [233..234]
 r91: [229..230]
 r92: [227..228]
 r93: [226..226] [212..213] [197..199] [153..154]
 r94: [193..194]
 r95: [191..192]
 r96: [187..188]
 r97: [185..186]
 r98: [181..182]
 r99: [179..180]
 r100: [118..119]
 r101: [116..117]
 r102: [114..115]
 r103: [175..176]
 r104: [173..174]
 r105: [169..170]
 r106: [167..168]
 r107: [163..164]
 r108: [161..162]
 r109: [157..158]
 r110: [155..156]
 r111: [112..113]
 r112: [110..111]
 r113: [108..109]
 r114: [149..150]
 r115: [147..148]
 r116: [143..144]
 r117: [141..142]
 r118: [137..138]
 r119: [135..136]
 r120: [131..132]
 r121: [129..130]
 r122: [106..107]
 r123: [104..105]
 r124: [102..103]
 r125: [222..223]
 r126: [220..221]
 r127: [216..217]
 r128: [214..215]
 r129: [100..101]
 r130: [98..99]
 r131: [96..97]
 r132: [208..209]
 r133: [206..207]
 r134: [202..203]
 r135: [200..201]
 r136: [94..95]
 r137: [92..93]
 r138: [90..91]
 r139: [86..87]
 r140: [84..85]
 r141: [41..42]
 r142: [39..40]
 r143: [37..38]
 r144: [47..49]
 r145: [47..48]
 r146: [67..68]
 r147: [65..66]
 r148: [63..64]
 r149: [73..75]
 r150: [73..74]
 r151: [24..25]
 r152: [122..128]
 r153: [120..125]
 r154: [123..124]
 r155: [120..121]
 r156: [14..15]
 r157: [9..10]
 r158: [0..3]
 r159: [7..8]
 r160: [243..244]
 r161: [241..242]
 r162: [239..240]
 r163: [237..238]
 r164: [22..23]
 r165: [235..236]
 r166: [231..232]
 r167: [195..196]
 r168: [189..190]
 r169: [183..184]
 r170: [177..178]
 r171: [171..172]
 r172: [165..166]
 r173: [159..160]
 r174: [151..152]
 r175: [145..146]
 r176: [139..140]
 r177: [133..134]
 r178: [224..225]
 r179: [218..219]
 r180: [210..211]
 r181: [204..205]
 r182: [88..89]
 r183: [43..44]
 r184: [34..36]
 r185: [34..35]
 r186: [32..33]
 r187: [52..53]
 r188: [45..46]
 r189: [29..31]
 r190: [28..30]
 r191: [69..70]
 r192: [60..62]
 r193: [60..61]
 r194: [58..59]
 r195: [81..83]
 r196: [80..82] [76..77]
 r197: [78..79]
 r198: [71..72]
 r199: [55..57]
 r200: [54..56]
 r201: [26..27]
 r202: [4..5]
 r203: [1..2]
 r204: [126..127]
 r205: [11..13]
 r206: [11..12]
 r208: [245..246]
 r209: [6..6]
 r210: [50..51]
Compressing live ranges: from 247 to 230 - 93%
Ranges after the compression:
 r87: [17..18]
 r88: [15..16]
 r89: [13..14]
 r90: [216..217]
 r91: [212..213]
 r92: [210..211]
 r93: [209..209] [195..196] [181..182] [137..138]
 r94: [177..178]
 r95: [175..176]
 r96: [171..172]
 r97: [169..170]
 r98: [165..166]
 r99: [163..164]
 r100: [105..106]
 r101: [103..104]
 r102: [101..102]
 r103: [159..160]
 r104: [157..158]
 r105: [153..154]
 r106: [151..152]
 r107: [147..148]
 r108: [145..146]
 r109: [141..142]
 r110: [139..140]
 r111: [99..100]
 r112: [97..98]
 r113: [95..96]
 r114: [133..134]
 r115: [131..132]
 r116: [127..128]
 r117: [125..126]
 r118: [121..122]
 r119: [119..120]
 r120: [115..116]
 r121: [113..114]
 r122: [93..94]
 r123: [91..92]
 r124: [89..90]
 r125: [205..206]
 r126: [203..204]
 r127: [199..200]
 r128: [197..198]
 r129: [87..88]
 r130: [85..86]
 r131: [83..84]
 r132: [191..192]
 r133: [189..190]
 r134: [185..186]
 r135: [183..184]
 r136: [81..82]
 r137: [79..80]
 r138: [77..78]
 r139: [73..74]
 r140: [71..72]
 r141: [35..36]
 r142: [33..34]
 r143: [31..32]
 r144: [41..42]
 r145: [41..42]
 r146: [57..58]
 r147: [55..56]
 r148: [53..54]
 r149: [63..64]
 r150: [63..64]
 r151: [21..22]
 r152: [109..112]
 r153: [107..110]
 r154: [109..110]
 r155: [107..108]
 r156: [11..12]
 r157: [7..8]
 r158: [0..1]
 r159: [5..6]
 r160: [226..227]
 r161: [224..225]
 r162: [222..223]
 r163: [220..221]
 r164: [19..20]
 r165: [218..219]
 r166: [214..215]
 r167: [179..180]
 r168: [173..174]
 r169: [167..168]
 r170: [161..162]
 r171: [155..156]
 r172: [149..150]
 r173: [143..144]
 r174: [135..136]
 r175: [129..130]
 r176: [123..124]
 r177: [117..118]
 r178: [207..208]
 r179: [201..202]
 r180: [193..194]
 r181: [187..188]
 r182: [75..76]
 r183: [37..38]
 r184: [29..30]
 r185: [29..30]
 r186: [27..28]
 r187: [45..46]
 r188: [39..40]
 r189: [25..26]
 r190: [25..26]
 r191: [59..60]
 r192: [51..52]
 r193: [51..52]
 r194: [49..50]
 r195: [69..70]
 r196: [69..70] [65..66]
 r197: [67..68]
 r198: [61..62]
 r199: [47..48]
 r200: [47..48]
 r201: [23..24]
 r202: [2..3]
 r203: [0..1]
 r204: [111..112]
 r205: [9..10]
 r206: [9..10]
 r208: [228..229]
 r209: [4..4]
 r210: [43..44]

********** Assignment #1: **********

	 Assigning to 210 (cl=GENERAL_REGS, orig=187, freq=3, tfirst=210, tfreq=3)...
	   Assign 0 to reload r210 (freq=3)
	 Assigning to 208 (cl=INDEX_REGS, orig=208, freq=1, tfirst=208, tfreq=1)...
	   Assign 0 to reload r208 (freq=1)
	 Assigning to 209 (cl=INDEX_REGS, orig=209, freq=1, tfirst=209, tfreq=1)...
	   Assign 2 to reload r209 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 50
changing reg in insn 48
changing reg in insn 43
changing reg in insn 41
changing reg in insn 39
changing reg in insn 37
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 238
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 280
changing reg in insn 281
changing reg in insn 298
changing reg in insn 299
changing reg in insn 332
changing reg in insn 338
changing reg in insn 333
changing reg in insn 335
changing reg in insn 339
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 24
changing reg in insn 25
changing reg in insn 350
changing reg in insn 353
changing reg in insn 310
changing reg in insn 318
changing reg in insn 314
changing reg in insn 353
changing reg in insn 357
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 102
changing reg in insn 103
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 160
changing reg in insn 161
changing reg in insn 166
changing reg in insn 167
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 212
changing reg in insn 213
changing reg in insn 221
changing reg in insn 222
changing reg in insn 225
changing reg in insn 227
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 249
changing reg in insn 248
changing reg in insn 250
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 274
changing reg in insn 277
changing reg in insn 275
changing reg in insn 277
changing reg in insn 279
changing reg in insn 277
changing reg in insn 276
changing reg in insn 275
changing reg in insn 280
changing reg in insn 278
changing reg in insn 277
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 282
changing reg in insn 283
changing reg in insn 290
changing reg in insn 292
changing reg in insn 291
changing reg in insn 293
changing reg in insn 297
changing reg in insn 298
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 333
changing reg in insn 334
changing reg in insn 347
changing reg in insn 349
changing reg in insn 348
changing reg in insn 349
changing reg in insn 4
changing reg in insn 358
deleting insn with uid = 22.
deleting insn with uid = 223.
deleting insn with uid = 426.
deleting insn with uid = 261.
deleting insn with uid = 279.
deleting insn with uid = 309.
deleting insn with uid = 353.
deleting insn with uid = 357.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 315.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 360.


static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pred<'\''>; StopPredPure = rapidxml::xml_document<>::attribute_value_pure_pred<'\''>; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={116d,115u} r1={21d,14u,1e} r2={11d,1u} r3={1d,2u} r4={13d,4u} r5={16d,8u} r6={1d,144u} r7={1d,63u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={80d,29u} r18={8d} r19={8d} r20={1d,1u,18e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1199{799d,381u,19e} in 252{244 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 161 162 163
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1570 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70511+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [208])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1570 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 4 9 2 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_25attribute_value_pure_predILc39EEELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4418fce300 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [162])
        (mem/f:DI (reg/f:DI 0 ax [161]) [3 *text_83(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg/f:DI 0 ax [162])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
(insn 15 14 342 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [163])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              46 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 156 164
(code_label 342 15 16 3 489 (nil) [1 uses])
(note 16 342 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [164]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 84 {*movqi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 151 {extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 82 {*movsi_internal}
     (nil))
(call_insn 21 20 23 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE20attribute_value_predILc39EE4testEc") [flags 0x3]  <function_decl 0x7f4418fce400 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 23 21 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax [orig:156 retval.55_88 ] [156])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 613 {*setcc_qi}
     (nil))
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:156 retval.55_88 ] [156])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 345)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 617 {*jcc_1}
     (nil)
 -> 345)
;;  succ:       4 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 165
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:QI 0 ax [orig:90 _4 ] [90])
        (mem:QI (reg/f:DI 0 ax [165]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 84 {*movqi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 _4 ] [90])
            (const_int 38 [0x26]))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 5 {*cmpqi_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 374)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 617 {*jcc_1}
     (nil)
 -> 374)
;;  succ:       5 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 166
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 81 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [166])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1595 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 35 34 36 5 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 _5 ] [91]) [0 *_5+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 84 {*movqi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 0 ax [orig:93 _7 ] [93])
        (sign_extend:SI (reg:QI 0 ax [orig:92 _6 ] [92]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 151 {extendqisi2}
     (nil))
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 365 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       27
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 365 38 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 365 40 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 366 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 366 40 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 366 42 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 35 [0x23]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 367 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 210)
;;  succ:       33
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 367 42 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 367 44 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 97 [0x61]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 44 43 368 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       13
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 368 44 375 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 375 368 376 9 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 376 375 47)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(code_label 47 376 369 10 467 (nil) [1 uses])
(note 369 47 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 369 49 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 108 [0x6c]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 370 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       30
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 370 49 50 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 50 370 51 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 113 [0x71]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 371 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 120)
;;  succ:       22
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 371 51 377 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 377 371 378 12 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 378 377 54)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 167
(code_label 54 378 55 13 469 (nil) [1 uses])
(note 55 54 56 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 13 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 57 56 58 13 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 0 ax [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 58 57 59 13 (set (reg:QI 0 ax [orig:95 _9 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [0 *_8+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 59 58 60 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _9 ] [95])
            (const_int 109 [0x6d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 60 59 61 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 168
(note 61 60 62 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 14 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 63 62 64 14 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg/f:DI 0 ax [168])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 64 63 65 14 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [0 *_10+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 65 64 66 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 66 65 67 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 169
(note 67 66 68 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 15 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 69 68 70 15 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (plus:DI (reg/f:DI 0 ax [169])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 70 69 71 15 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem:QI (reg/f:DI 0 ax [orig:98 _12 ] [98]) [0 *_12+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 71 70 72 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _13 ] [99])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 72 71 73 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102
(note 73 72 74 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 16 (set (reg/f:DI 0 ax [orig:100 dest.56_14 ] [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 81 {*movdi_internal}
     (nil))
(insn 75 74 76 16 (set (mem:QI (reg/f:DI 0 ax [orig:100 dest.56_14 ] [100]) [0 *dest.56_14+0 S1 A8])
        (const_int 38 [0x26])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 84 {*movqi_internal}
     (nil))
(insn 76 75 77 16 (set (reg/f:DI 0 ax [orig:101 dest.57_15 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 77 76 78 16 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 dest.57_15 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1603 218 {*adddi_1}
     (nil))
(insn 78 77 79 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 _16 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 79 78 379 16 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1604 218 {*adddi_1}
     (nil))
(jump_insn 379 79 380 16 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1605 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 380 379 82)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 170
(code_label 82 380 83 17 472 (nil) [3 uses])
(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 17 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 85 84 86 17 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 86 85 87 17 (set (reg:QI 0 ax [orig:104 _18 ] [104])
        (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 87 86 88 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 _18 ] [104])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       18 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 171
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 18 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 91 90 92 18 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 92 91 93 18 (set (reg:QI 0 ax [orig:106 _20 ] [106])
        (mem:QI (reg/f:DI 0 ax [orig:105 _19 ] [105]) [0 *_19+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 93 92 94 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:106 _20 ] [106])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 94 93 95 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       19 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 172
(note 95 94 96 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 19 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 97 96 98 19 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 98 97 99 19 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem:QI (reg/f:DI 0 ax [orig:107 _21 ] [107]) [0 *_21+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 99 98 100 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 115 [0x73]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 100 99 101 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       20 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 173
(note 101 100 102 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 20 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 103 102 104 20 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg/f:DI 0 ax [173])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 104 103 105 20 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _23 ] [109]) [0 *_23+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 105 104 106 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:110 _24 ] [110])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 106 105 107 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       21 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113
(note 107 106 108 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 21 (set (reg/f:DI 0 ax [orig:111 dest.58_25 ] [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 81 {*movdi_internal}
     (nil))
(insn 109 108 110 21 (set (mem:QI (reg/f:DI 0 ax [orig:111 dest.58_25 ] [111]) [0 *dest.58_25+0 S1 A8])
        (const_int 39 [0x27])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 84 {*movqi_internal}
     (nil))
(insn 110 109 111 21 (set (reg/f:DI 0 ax [orig:112 dest.59_26 ] [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 111 110 112 21 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:112 dest.59_26 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1610 218 {*adddi_1}
     (nil))
(insn 112 111 113 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:113 _27 ] [113])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 113 112 381 21 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1611 218 {*adddi_1}
     (nil))
(jump_insn 381 113 382 21 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1612 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 382 381 120)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 174
(code_label 120 382 121 22 471 (nil) [1 uses])
(note 121 120 122 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 22 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 123 122 124 22 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (plus:DI (reg/f:DI 0 ax [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 124 123 125 22 (set (reg:QI 0 ax [orig:115 _29 ] [115])
        (mem:QI (reg/f:DI 0 ax [orig:114 _28 ] [114]) [0 *_28+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 125 124 126 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:115 _29 ] [115])
            (const_int 117 [0x75]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 126 125 127 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       23 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 175
(note 127 126 128 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 23 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 129 128 130 23 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 130 129 131 23 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 131 130 132 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 132 131 133 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       24 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 176
(note 133 132 134 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 24 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 135 134 136 24 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg/f:DI 0 ax [176])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 136 135 137 24 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem:QI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [0 *_32+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 137 136 138 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 _33 ] [119])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 138 137 139 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       25 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 177
(note 139 138 140 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 25 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 141 140 142 25 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [177])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 142 141 143 25 (set (reg:QI 0 ax [orig:121 _35 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [0 *_34+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 143 142 144 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 _35 ] [121])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 144 143 145 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       26 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124
(note 145 144 146 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 26 (set (reg/f:DI 0 ax [orig:122 dest.60_36 ] [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 81 {*movdi_internal}
     (nil))
(insn 147 146 148 26 (set (mem:QI (reg/f:DI 0 ax [orig:122 dest.60_36 ] [122]) [0 *dest.60_36+0 S1 A8])
        (const_int 34 [0x22])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 84 {*movqi_internal}
     (nil))
(insn 148 147 149 26 (set (reg/f:DI 0 ax [orig:123 dest.61_37 ] [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 149 148 150 26 (parallel [
            (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:123 dest.61_37 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1621 218 {*adddi_1}
     (nil))
(insn 150 149 151 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 _38 ] [124])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 151 150 383 26 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1622 218 {*adddi_1}
     (nil))
(jump_insn 383 151 384 26 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1623 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 384 383 158)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 178
(code_label 158 384 159 27 466 (nil) [1 uses])
(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 27 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 161 160 162 27 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (plus:DI (reg/f:DI 0 ax [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 162 161 163 27 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [orig:125 _39 ] [125]) [0 *_39+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 163 162 164 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 164 163 165 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       28 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 179
(note 165 164 166 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 28 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 167 166 168 28 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 168 167 169 28 (set (reg:QI 0 ax [orig:128 _42 ] [128])
        (mem:QI (reg/f:DI 0 ax [orig:127 _41 ] [127]) [0 *_41+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 169 168 170 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:128 _42 ] [128])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 170 169 171 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       29 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131
(note 171 170 172 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 29 (set (reg/f:DI 0 ax [orig:129 dest.62_43 ] [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 81 {*movdi_internal}
     (nil))
(insn 173 172 174 29 (set (mem:QI (reg/f:DI 0 ax [orig:129 dest.62_43 ] [129]) [0 *dest.62_43+0 S1 A8])
        (const_int 62 [0x3e])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 84 {*movqi_internal}
     (nil))
(insn 174 173 175 29 (set (reg/f:DI 0 ax [orig:130 dest.63_44 ] [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 175 174 176 29 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 dest.63_44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1632 218 {*adddi_1}
     (nil))
(insn 176 175 177 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:131 _45 ] [131])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 177 176 385 29 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1633 218 {*adddi_1}
     (nil))
(jump_insn 385 177 386 29 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1634 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 386 385 184)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 180
(code_label 184 386 185 30 470 (nil) [1 uses])
(note 185 184 186 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 30 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 187 186 188 30 (parallel [
            (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
                (plus:DI (reg/f:DI 0 ax [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 188 187 189 30 (set (reg:QI 0 ax [orig:133 _47 ] [133])
        (mem:QI (reg/f:DI 0 ax [orig:132 _46 ] [132]) [0 *_46+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 189 188 190 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:133 _47 ] [133])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 190 189 191 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       31 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 135 181
(note 191 190 192 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 31 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 193 192 194 31 (parallel [
            (set (reg/f:DI 0 ax [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 0 ax [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 194 193 195 31 (set (reg:QI 0 ax [orig:135 _49 ] [135])
        (mem:QI (reg/f:DI 0 ax [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 195 194 196 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 _49 ] [135])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 196 195 197 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       32 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138
(note 197 196 198 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 32 (set (reg/f:DI 0 ax [orig:136 dest.64_50 ] [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 81 {*movdi_internal}
     (nil))
(insn 199 198 200 32 (set (mem:QI (reg/f:DI 0 ax [orig:136 dest.64_50 ] [136]) [0 *dest.64_50+0 S1 A8])
        (const_int 60 [0x3c])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 84 {*movqi_internal}
     (nil))
(insn 200 199 201 32 (set (reg/f:DI 0 ax [orig:137 dest.65_51 ] [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 201 200 202 32 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:137 dest.65_51 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1643 218 {*adddi_1}
     (nil))
(insn 202 201 203 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:138 _52 ] [138])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 203 202 387 32 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1644 218 {*adddi_1}
     (nil))
(jump_insn 387 203 388 32 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1645 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 388 387 210)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 182
(code_label 210 388 211 33 468 (nil) [1 uses])
(note 211 210 212 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 33 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 81 {*movdi_internal}
     (nil))
(insn 213 212 214 33 (parallel [
            (set (reg/f:DI 0 ax [orig:139 _53 ] [139])
                (plus:DI (reg/f:DI 0 ax [182])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1651 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 214 213 215 33 (set (reg:QI 0 ax [orig:140 _54 ] [140])
        (mem:QI (reg/f:DI 0 ax [orig:139 _53 ] [139]) [0 *_53+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 84 {*movqi_internal}
     (nil))
(insn 215 214 216 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:140 _54 ] [140])
            (const_int 120 [0x78]))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 5 {*cmpqi_1}
     (nil))
(jump_insn 216 215 217 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 617 {*jcc_1}
     (nil)
 -> 254)
;;  succ:       34 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 217 216 218 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 34 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1653 81 {*movdi_internal}
     (nil))
(insn 219 218 242 34 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1654 218 {*adddi_1}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              36 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 183 184 185 186
(code_label 242 219 220 35 482 (nil) [1 uses])
(note 220 242 221 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 35 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 222 221 224 35 (set (reg:QI 0 ax [orig:141 _55 ] [141])
        (mem:QI (reg/f:DI 0 ax [183]) [0 *src_67+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 224 222 225 35 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (zero_extend:SI (reg:QI 0 ax [orig:142 _56 ] [142]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 136 {*zero_extendqisi2}
     (nil))
(insn 225 224 226 35 (set (reg:DI 1 dx [184])
        (sign_extend:DI (reg:SI 0 ax [orig:143 _57 ] [143]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 145 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 35 (set (reg:DI 0 ax [185])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 227 226 228 35 (set (reg:QI 0 ax [186])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [184])
                (reg:DI 0 ax [185])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 228 227 229 35 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [186])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 229 228 230 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 5 {*cmpqi_1}
     (nil))
(jump_insn 230 229 235 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 420)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 617 {*jcc_1}
     (nil)
 -> 420)
;;  succ:       54
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 54, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 187 188
(note 235 230 236 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 36 (set (reg:DI 0 ax [187])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 237 236 427 36 (parallel [
            (set (reg:DI 0 ax [187])
                (ashift:DI (reg:DI 0 ax [187])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [8 code+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 427 237 238 36 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (reg:DI 0 ax [187])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 238 427 239 36 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1660 132 {zero_extendqidi2}
     (nil))
(insn 239 238 240 36 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg:DI 1 dx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 218 {*adddi_1}
     (nil))
(insn 240 239 241 36 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (reg:DI 0 ax [188])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 241 240 390 36 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1661 218 {*adddi_1}
     (nil))
(jump_insn 390 241 391 36 (set (pc)
        (label_ref 242)) "libs/src/../include/rapidxml/rapidxml.hpp":1655 649 {jump}
     (nil)
 -> 242)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 391 390 420)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 420 391 419 54 499 (nil) [1 uses])
(note 419 420 421 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 421 419 389 54 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1659 684 {nop}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 38, flags: (RTL, MODIFIED)
;;  pred:       54 [100.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190
(code_label 389 421 246 37 493 (nil) [0 uses])
(note 246 389 247 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 37 (set (reg:DI 1 dx [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 248 247 249 37 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1663 218 {*adddi_1}
     (nil))
(insn 249 248 250 37 (set (reg:DI 4 si)
        (reg:DI 1 dx [189])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 250 249 251 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(call_insn 251 250 392 37 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 392 251 393 37 (set (pc)
        (label_ref 295)) 649 {jump}
     (nil)
 -> 295)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 393 392 254)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 254 393 255 38 479 (nil) [1 uses])
(note 255 254 256 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 38 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1667 81 {*movdi_internal}
     (nil))
(insn 257 256 285 38 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1668 218 {*adddi_1}
     (nil))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;;              40 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 191 192 193 194
(code_label 285 257 258 39 486 (nil) [1 uses])
(note 258 285 259 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 39 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 260 259 262 39 (set (reg:QI 0 ax [orig:146 _60 ] [146])
        (mem:QI (reg/f:DI 0 ax [191]) [0 *src_68+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 262 260 263 39 (set (reg:SI 0 ax [orig:148 _62 ] [148])
        (zero_extend:SI (reg:QI 0 ax [orig:147 _61 ] [147]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 136 {*zero_extendqisi2}
     (nil))
(insn 263 262 264 39 (set (reg:DI 1 dx [192])
        (sign_extend:DI (reg:SI 0 ax [orig:148 _62 ] [148]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 145 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 39 (set (reg:DI 0 ax [193])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 265 264 266 39 (set (reg:QI 0 ax [194])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [192])
                (reg:DI 0 ax [193])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 266 265 267 39 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [194])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 267 266 268 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 5 {*cmpqi_1}
     (nil))
(jump_insn 268 267 273 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 423)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 617 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       55
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 55, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 195 196 197 198
(note 273 268 274 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 40 (set (reg:DI 1 dx [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 275 274 276 40 (set (reg:DI 0 ax [196])
        (reg:DI 1 dx [195])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 276 275 277 40 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 277 276 278 40 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [195])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [195])
            (const_int 5 [0x5]))
        (nil)))
(insn 278 277 280 40 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 280 278 281 40 (set (reg:DI 1 dx [orig:149 _63 ] [149])
        (reg:DI 0 ax [196])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 281 280 282 40 (set (reg:DI 0 ax [orig:150 _64 ] [150])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1674 132 {zero_extendqidi2}
     (nil))
(insn 282 281 283 40 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (reg:DI 1 dx [orig:149 _63 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (nil))
(insn 283 282 284 40 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (reg:DI 0 ax [198])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 284 283 395 40 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1675 218 {*adddi_1}
     (nil))
(jump_insn 395 284 396 40 (set (pc)
        (label_ref 285)) "libs/src/../include/rapidxml/rapidxml.hpp":1669 649 {jump}
     (nil)
 -> 285)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 396 395 423)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 396 422 55 500 (nil) [1 uses])
(note 422 423 424 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 424 422 394 55 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1673 684 {nop}
     (nil))
;;  succ:       41 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 42, flags: (RTL, MODIFIED)
;;  pred:       55 [100.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200
(code_label 394 424 289 41 494 (nil) [0 uses])
(note 289 394 290 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 41 (set (reg:DI 1 dx [199])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 291 290 292 41 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1677 218 {*adddi_1}
     (nil))
(insn 292 291 293 41 (set (reg:DI 4 si)
        (reg:DI 1 dx [199])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 293 292 294 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(call_insn 294 293 295 41 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              37 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 201
(code_label 295 294 296 42 483 (nil) [1 uses])
(note 296 295 297 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 42 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 81 {*movdi_internal}
     (nil))
(insn 298 297 299 42 (set (reg:QI 0 ax [orig:151 _65 ] [151])
        (mem:QI (reg/f:DI 0 ax [201]) [0 *src_69+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 84 {*movqi_internal}
     (nil))
(insn 299 298 300 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:151 _65 ] [151])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 5 {*cmpqi_1}
     (nil))
(jump_insn 300 299 301 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 617 {*jcc_1}
     (nil)
 -> 305)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 301 300 302 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 397 43 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1680 218 {*adddi_1}
     (nil))
(jump_insn 397 302 398 43 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1683 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 398 397 305)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 50, flags: (RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 202 203
(code_label 305 398 306 44 487 (nil) [1 uses])
(note 306 305 307 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 44 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 308 307 310 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1682 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 310 308 311 44 (set (reg/f:DI 3 bx [orig:158 _120 ] [158])
        (reg/f:DI 0 ax [202])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 311 310 312 44 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 312 311 313 44 (set (reg:DI 1 dx)
        (reg:DI 0 ax [203])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 313 312 314 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f44186d81b0 *.LC23>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 314 313 315 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 315 314 316 44 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 316 315 317 44 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 317 316 318 44 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 318 317 319 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 319 318 320 44 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 402)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 51, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18
;;              19
;;              20
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 402 320 401 50 495 (nil) [4 uses])
(note 401 402 403 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 403 401 404 50 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1614 684 {nop}
     (nil))
(jump_insn 404 403 405 50 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 407)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       22
;;              25
;;              23
;;              24
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 407 405 406 51 496 (nil) [4 uses])
(note 406 407 408 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 408 406 409 51 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1625 684 {nop}
     (nil))
(jump_insn 409 408 410 51 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 410 409 412)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 412 410 411 52 497 (nil) [2 uses])
(note 411 412 413 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 413 411 414 52 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1636 684 {nop}
     (nil))
(jump_insn 414 413 415 52 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 415 414 417)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 45, flags: (RTL, MODIFIED)
;;  pred:       30
;;              31
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 417 415 416 53 498 (nil) [2 uses])
(note 416 417 418 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 418 416 374 53 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1647 684 {nop}
     (nil))
;;  succ:       45 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 46, flags: (RTL, MODIFIED)
;;  pred:       52 [100.0%] 
;;              4
;;              53 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;;              50 [100.0%] 
;;              12 [100.0%] 
;;              51 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 204
(code_label 374 418 331 45 492 (nil) [6 uses])
(note 331 374 332 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 333 45 (set (reg/f:DI 1 dx [orig:152 src.70_75 ] [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 333 332 334 45 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 1 dx [orig:152 src.70_75 ] [152])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 334 333 335 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg:DI 0 ax [204])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 335 334 336 45 (set (reg/f:DI 0 ax [orig:153 dest.71_76 ] [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 336 335 337 45 (parallel [
            (set (reg/f:DI 2 cx [orig:154 _78 ] [154])
                (plus:DI (reg/f:DI 0 ax [orig:153 dest.71_76 ] [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 337 336 338 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 2 cx [orig:154 _78 ] [154])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 338 337 339 45 (set (reg:QI 1 dx [orig:155 _79 ] [155])
        (mem:QI (reg/f:DI 1 dx [orig:152 src.70_75 ] [152]) [0 *src.70_75+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
(insn 339 338 340 45 (set (mem:QI (reg/f:DI 0 ax [orig:153 dest.71_76 ] [153]) [0 *dest.72_77+0 S1 A8])
        (reg:QI 1 dx [orig:155 _79 ] [155])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              16 [100.0%] 
;;              21 [100.0%] 
;;              26 [100.0%] 
;;              29 [100.0%] 
;;              32 [100.0%] 
;;              43 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 340 339 341 46 473 (nil) [6 uses])
(note 341 340 399 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(jump_insn 399 341 400 46 (set (pc)
        (label_ref 342)) "libs/src/../include/rapidxml/rapidxml.hpp":1587 649 {jump}
     (nil)
 -> 342)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 400 399 345)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 157 159 205 206
(code_label 345 400 346 47 463 (nil) [1 uses])
(note 346 345 347 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 47 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 348 347 349 47 (set (reg/f:DI 1 dx [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 349 348 350 47 (set (mem/f:DI (reg/f:DI 0 ax [205]) [3 *text_83(D)+0 S8 A64])
        (reg/f:DI 1 dx [206])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 350 349 358 47 (set (reg/f:DI 0 ax [orig:157 _90 ] [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1716 81 {*movdi_internal}
     (nil))
(insn 358 350 359 47 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70511+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [209]))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1718 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 359 358 372 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1718 617 {*jcc_1}
     (nil)
 -> 362)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 372 359 360 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(call_insn 360 372 361 48 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1718 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 361 360 362)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 362 361 373 49 491 (nil) [1 uses])
(note 373 362 363 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 363 373 425 49 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1718 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 425 363 0 NOTE_INSN_DELETED)

;; Function static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pred<'\"'>; StopPredPure = rapidxml::xml_document<>::attribute_value_pure_pred<'\"'>; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_20attribute_value_predILc34EEENS1_25attribute_value_pure_predILc34EEELi0EEEPcRS7_, funcdef_no=3465, decl_uid=68236, cgraph_uid=1339, symbol_order=1361)

      Creating newreg=208
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=209
Removing SCRATCH in insn #358 (nop 3)
rescanning insn with uid = 358.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r208
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 64:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 79:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 109:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 147:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 150:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 173:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 176:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 177:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 188:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 199:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 202:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 214:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 228:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=210 from oldreg=187, assigning class GENERAL_REGS to r210
  237: {r210:DI=r210:DI<<0x4;clobber flags:CC;}
      REG_DEAD r187:DI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x18]<<0x4
    Inserting insn reload before:
  426: r210:DI=r187:DI
    Inserting insn reload after:
  427: r144:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 239
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 240:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 256:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 257:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 264:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 265:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 266:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 283:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 284:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 298:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 307:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 316:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 317:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 334:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 335:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 336:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 337:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 338:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 339:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 349:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r209
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 54
EBB 37
EBB 38
EBB 39
EBB 40
EBB 55
EBB 41
EBB 42
EBB 43
EBB 44
EBB 50
EBB 51
EBB 52
EBB 53
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49

********** Pseudo live ranges #1: **********

  BB 44
   Insn 319: point = 0, n_alt = 0
   Insn 318: point = 0, n_alt = -2
   Insn 317: point = 1, n_alt = 4
   Insn 316: point = 1, n_alt = 4
   Insn 315: point = 1, n_alt = 0
   Insn 314: point = 1, n_alt = -2
   Insn 313: point = 1, n_alt = 4
   Insn 312: point = 1, n_alt = -2
   Insn 311: point = 2, n_alt = 3
   Insn 310: point = 3, n_alt = -2
   Insn 309: point = 5, n_alt = -2
   Insn 308: point = 6, n_alt = 0
   Insn 307: point = 6, n_alt = 2
  BB 48
   Insn 360: point = 6, n_alt = 0
  BB 49
   Insn 363: point = 6, n_alt = -1
  BB 47
   Insn 359: point = 6, n_alt = -1
   Insn 358: point = 6, n_alt = 0
   Insn 357: point = 7, n_alt = -2
   Insn 353: point = 8, n_alt = -2
   Insn 350: point = 10, n_alt = 3
   Insn 349: point = 11, n_alt = 5
   Insn 348: point = 12, n_alt = 3
   Insn 347: point = 13, n_alt = 3
  BB 3
   Insn 26: point = 14, n_alt = -1
   Insn 25: point = 14, n_alt = 0
   Insn 24: point = 15, n_alt = 0
   Insn 23: point = 16, n_alt = 0
   Insn 22: point = 17, n_alt = -2
   Insn 21: point = 18, n_alt = 0
   Insn 20: point = 18, n_alt = -2
   Insn 19: point = 19, n_alt = 0
   Insn 18: point = 21, n_alt = 2
   Insn 17: point = 23, n_alt = 3
  BB 46
   Insn 399: point = 24, n_alt = -1
  BB 43
   Insn 397: point = 24, n_alt = -1
   Insn 302: point = 24, n_alt = 1
  BB 42
   Insn 300: point = 24, n_alt = -1
   Insn 299: point = 24, n_alt = 0
   Insn 298: point = 25, n_alt = 2
   Insn 297: point = 27, n_alt = 3
  BB 37
   Insn 392: point = 28, n_alt = -1
   Insn 251: point = 28, n_alt = 0
   Insn 250: point = 28, n_alt = -2
   Insn 249: point = 29, n_alt = -2
   Insn 248: point = 30, n_alt = 3
   Insn 247: point = 31, n_alt = 3
  BB 54
   Insn 421: point = 32, n_alt = -1
  BB 35
   Insn 230: point = 32, n_alt = -1
   Insn 229: point = 32, n_alt = 0
   Insn 228: point = 32, n_alt = 6
   Insn 227: point = 33, n_alt = 2
   Insn 226: point = 35, n_alt = 4
   Insn 225: point = 36, n_alt = 1
   Insn 224: point = 38, n_alt = 0
   Insn 223: point = 40, n_alt = -2
   Insn 222: point = 42, n_alt = 2
   Insn 221: point = 44, n_alt = 3
  BB 36
   Insn 390: point = 45, n_alt = -1
   Insn 241: point = 45, n_alt = 1
   Insn 240: point = 45, n_alt = 5
   Insn 239: point = 46, n_alt = 0
   Insn 238: point = 48, n_alt = 0
   Insn 427: point = 49, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
   Insn 237: point = 51, n_alt = 0
   Insn 426: point = 51, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
	Hard reg 0 is preferable by r210 with profit 1
   Insn 236: point = 53, n_alt = 3
  BB 34
   Insn 219: point = 54, n_alt = 1
   Insn 218: point = 54, n_alt = 5
  BB 41
   Insn 294: point = 54, n_alt = 0
   Insn 293: point = 54, n_alt = -2
   Insn 292: point = 55, n_alt = -2
   Insn 291: point = 56, n_alt = 3
   Insn 290: point = 57, n_alt = 3
  BB 55
   Insn 424: point = 58, n_alt = -1
  BB 39
   Insn 268: point = 58, n_alt = -1
   Insn 267: point = 58, n_alt = 0
   Insn 266: point = 58, n_alt = 6
   Insn 265: point = 59, n_alt = 2
   Insn 264: point = 61, n_alt = 4
   Insn 263: point = 62, n_alt = 1
   Insn 262: point = 64, n_alt = 0
   Insn 261: point = 66, n_alt = -2
   Insn 260: point = 68, n_alt = 2
   Insn 259: point = 70, n_alt = 3
  BB 40
   Insn 395: point = 71, n_alt = -1
   Insn 284: point = 71, n_alt = 1
   Insn 283: point = 71, n_alt = 5
   Insn 282: point = 72, n_alt = 0
   Insn 281: point = 74, n_alt = 0
   Insn 280: point = 75, n_alt = -2
   Insn 279: point = 77, n_alt = -2
   Insn 278: point = 79, n_alt = 0
   Insn 277: point = 81, n_alt = 0
   Insn 276: point = 82, n_alt = 0
   Insn 275: point = 82, n_alt = -2
   Insn 274: point = 83, n_alt = 3
  BB 38
   Insn 257: point = 84, n_alt = 1
   Insn 256: point = 84, n_alt = 5
  BB 33
   Insn 216: point = 84, n_alt = -1
   Insn 215: point = 84, n_alt = 0
   Insn 214: point = 85, n_alt = 2
   Insn 213: point = 87, n_alt = 0
   Insn 212: point = 89, n_alt = 3
  BB 32
   Insn 387: point = 90, n_alt = -1
   Insn 203: point = 90, n_alt = 1
   Insn 202: point = 90, n_alt = 5
   Insn 201: point = 91, n_alt = 0
   Insn 200: point = 93, n_alt = 3
   Insn 199: point = 94, n_alt = 6
   Insn 198: point = 95, n_alt = 3
  BB 29
   Insn 385: point = 96, n_alt = -1
   Insn 177: point = 96, n_alt = 1
   Insn 176: point = 96, n_alt = 5
   Insn 175: point = 97, n_alt = 0
   Insn 174: point = 99, n_alt = 3
   Insn 173: point = 100, n_alt = 6
   Insn 172: point = 101, n_alt = 3
  BB 26
   Insn 383: point = 102, n_alt = -1
   Insn 151: point = 102, n_alt = 1
   Insn 150: point = 102, n_alt = 5
   Insn 149: point = 103, n_alt = 0
   Insn 148: point = 105, n_alt = 3
   Insn 147: point = 106, n_alt = 6
   Insn 146: point = 107, n_alt = 3
  BB 21
   Insn 381: point = 108, n_alt = -1
   Insn 113: point = 108, n_alt = 1
   Insn 112: point = 108, n_alt = 5
   Insn 111: point = 109, n_alt = 0
   Insn 110: point = 111, n_alt = 3
   Insn 109: point = 112, n_alt = 6
   Insn 108: point = 113, n_alt = 3
  BB 16
   Insn 379: point = 114, n_alt = -1
   Insn 79: point = 114, n_alt = 1
   Insn 78: point = 114, n_alt = 5
   Insn 77: point = 115, n_alt = 0
   Insn 76: point = 117, n_alt = 3
   Insn 75: point = 118, n_alt = 6
   Insn 74: point = 119, n_alt = 3
  BB 45
   Insn 339: point = 120, n_alt = 6
   Insn 338: point = 121, n_alt = 2
   Insn 337: point = 123, n_alt = 5
   Insn 336: point = 124, n_alt = 3
   Insn 335: point = 125, n_alt = 3
   Insn 334: point = 126, n_alt = 5
   Insn 333: point = 127, n_alt = 3
   Insn 332: point = 128, n_alt = 3
  BB 51
   Insn 409: point = 129, n_alt = -1
   Insn 408: point = 129, n_alt = -1
  BB 25
   Insn 144: point = 129, n_alt = -1
   Insn 143: point = 129, n_alt = 0
   Insn 142: point = 130, n_alt = 2
   Insn 141: point = 132, n_alt = 0
   Insn 140: point = 134, n_alt = 3
  BB 24
   Insn 138: point = 135, n_alt = -1
   Insn 137: point = 135, n_alt = 0
   Insn 136: point = 136, n_alt = 2
   Insn 135: point = 138, n_alt = 0
   Insn 134: point = 140, n_alt = 3
  BB 23
   Insn 132: point = 141, n_alt = -1
   Insn 131: point = 141, n_alt = 0
   Insn 130: point = 142, n_alt = 2
   Insn 129: point = 144, n_alt = 0
   Insn 128: point = 146, n_alt = 3
  BB 22
   Insn 126: point = 147, n_alt = -1
   Insn 125: point = 147, n_alt = 0
   Insn 124: point = 148, n_alt = 2
   Insn 123: point = 150, n_alt = 0
   Insn 122: point = 152, n_alt = 3
  BB 12
   Insn 377: point = 153, n_alt = -1
  BB 11
   Insn 51: point = 153, n_alt = -1
   Insn 50: point = 153, n_alt = 0
  BB 50
   Insn 404: point = 155, n_alt = -1
   Insn 403: point = 155, n_alt = -1
  BB 20
   Insn 106: point = 155, n_alt = -1
   Insn 105: point = 155, n_alt = 0
   Insn 104: point = 156, n_alt = 2
   Insn 103: point = 158, n_alt = 0
   Insn 102: point = 160, n_alt = 3
  BB 19
   Insn 100: point = 161, n_alt = -1
   Insn 99: point = 161, n_alt = 0
   Insn 98: point = 162, n_alt = 2
   Insn 97: point = 164, n_alt = 0
   Insn 96: point = 166, n_alt = 3
  BB 18
   Insn 94: point = 167, n_alt = -1
   Insn 93: point = 167, n_alt = 0
   Insn 92: point = 168, n_alt = 2
   Insn 91: point = 170, n_alt = 0
   Insn 90: point = 172, n_alt = 3
  BB 17
   Insn 88: point = 173, n_alt = -1
   Insn 87: point = 173, n_alt = 0
   Insn 86: point = 174, n_alt = 2
   Insn 85: point = 176, n_alt = 0
   Insn 84: point = 178, n_alt = 3
  BB 15
   Insn 72: point = 179, n_alt = -1
   Insn 71: point = 179, n_alt = 0
   Insn 70: point = 180, n_alt = 2
   Insn 69: point = 182, n_alt = 0
   Insn 68: point = 184, n_alt = 3
  BB 14
   Insn 66: point = 185, n_alt = -1
   Insn 65: point = 185, n_alt = 0
   Insn 64: point = 186, n_alt = 2
   Insn 63: point = 188, n_alt = 0
   Insn 62: point = 190, n_alt = 3
  BB 13
   Insn 60: point = 191, n_alt = -1
   Insn 59: point = 191, n_alt = 0
   Insn 58: point = 192, n_alt = 2
   Insn 57: point = 194, n_alt = 0
   Insn 56: point = 196, n_alt = 3
  BB 9
   Insn 375: point = 197, n_alt = -1
  BB 8
   Insn 44: point = 197, n_alt = -1
   Insn 43: point = 197, n_alt = 0
  BB 7
   Insn 42: point = 199, n_alt = -1
   Insn 41: point = 199, n_alt = 0
  BB 53
   Insn 418: point = 200, n_alt = -1
  BB 31
   Insn 196: point = 200, n_alt = -1
   Insn 195: point = 200, n_alt = 0
   Insn 194: point = 201, n_alt = 2
   Insn 193: point = 203, n_alt = 0
   Insn 192: point = 205, n_alt = 3
  BB 30
   Insn 190: point = 206, n_alt = -1
   Insn 189: point = 206, n_alt = 0
   Insn 188: point = 207, n_alt = 2
   Insn 187: point = 209, n_alt = 0
   Insn 186: point = 211, n_alt = 3
  BB 10
   Insn 49: point = 212, n_alt = -1
   Insn 48: point = 212, n_alt = 0
  BB 6
   Insn 40: point = 213, n_alt = -1
   Insn 39: point = 213, n_alt = 0
  BB 52
   Insn 414: point = 214, n_alt = -1
   Insn 413: point = 214, n_alt = -1
  BB 28
   Insn 170: point = 214, n_alt = -1
   Insn 169: point = 214, n_alt = 0
   Insn 168: point = 215, n_alt = 2
   Insn 167: point = 217, n_alt = 0
   Insn 166: point = 219, n_alt = 3
  BB 27
   Insn 164: point = 220, n_alt = -1
   Insn 163: point = 220, n_alt = 0
   Insn 162: point = 221, n_alt = 2
   Insn 161: point = 223, n_alt = 0
   Insn 160: point = 225, n_alt = 3
  BB 5
   Insn 38: point = 226, n_alt = -1
   Insn 37: point = 226, n_alt = 0
   Insn 36: point = 226, n_alt = 0
   Insn 35: point = 228, n_alt = 2
   Insn 34: point = 230, n_alt = 0
   Insn 33: point = 232, n_alt = 3
  BB 4
   Insn 31: point = 233, n_alt = -1
   Insn 30: point = 233, n_alt = 0
   Insn 29: point = 234, n_alt = 2
   Insn 28: point = 236, n_alt = 3
  BB 2
   Insn 15: point = 237, n_alt = 5
   Insn 14: point = 238, n_alt = 3
   Insn 13: point = 239, n_alt = 5
   Insn 12: point = 240, n_alt = 3
   Insn 11: point = 242, n_alt = 3
   Insn 10: point = 243, n_alt = 0
   Insn 9: point = 243, n_alt = -2
   Insn 8: point = 244, n_alt = 3
   Insn 4: point = 245, n_alt = 0
   Insn 2: point = 247, n_alt = 5
 r87: [20..21]
 r88: [18..19]
 r89: [16..17]
 r90: [233..234]
 r91: [229..230]
 r92: [227..228]
 r93: [226..226] [212..213] [197..199] [153..154]
 r94: [193..194]
 r95: [191..192]
 r96: [187..188]
 r97: [185..186]
 r98: [181..182]
 r99: [179..180]
 r100: [118..119]
 r101: [116..117]
 r102: [114..115]
 r103: [175..176]
 r104: [173..174]
 r105: [169..170]
 r106: [167..168]
 r107: [163..164]
 r108: [161..162]
 r109: [157..158]
 r110: [155..156]
 r111: [112..113]
 r112: [110..111]
 r113: [108..109]
 r114: [149..150]
 r115: [147..148]
 r116: [143..144]
 r117: [141..142]
 r118: [137..138]
 r119: [135..136]
 r120: [131..132]
 r121: [129..130]
 r122: [106..107]
 r123: [104..105]
 r124: [102..103]
 r125: [222..223]
 r126: [220..221]
 r127: [216..217]
 r128: [214..215]
 r129: [100..101]
 r130: [98..99]
 r131: [96..97]
 r132: [208..209]
 r133: [206..207]
 r134: [202..203]
 r135: [200..201]
 r136: [94..95]
 r137: [92..93]
 r138: [90..91]
 r139: [86..87]
 r140: [84..85]
 r141: [41..42]
 r142: [39..40]
 r143: [37..38]
 r144: [47..49]
 r145: [47..48]
 r146: [67..68]
 r147: [65..66]
 r148: [63..64]
 r149: [73..75]
 r150: [73..74]
 r151: [24..25]
 r152: [122..128]
 r153: [120..125]
 r154: [123..124]
 r155: [120..121]
 r156: [14..15]
 r157: [9..10]
 r158: [0..3]
 r159: [7..8]
 r160: [243..244]
 r161: [241..242]
 r162: [239..240]
 r163: [237..238]
 r164: [22..23]
 r165: [235..236]
 r166: [231..232]
 r167: [195..196]
 r168: [189..190]
 r169: [183..184]
 r170: [177..178]
 r171: [171..172]
 r172: [165..166]
 r173: [159..160]
 r174: [151..152]
 r175: [145..146]
 r176: [139..140]
 r177: [133..134]
 r178: [224..225]
 r179: [218..219]
 r180: [210..211]
 r181: [204..205]
 r182: [88..89]
 r183: [43..44]
 r184: [34..36]
 r185: [34..35]
 r186: [32..33]
 r187: [52..53]
 r188: [45..46]
 r189: [29..31]
 r190: [28..30]
 r191: [69..70]
 r192: [60..62]
 r193: [60..61]
 r194: [58..59]
 r195: [81..83]
 r196: [80..82] [76..77]
 r197: [78..79]
 r198: [71..72]
 r199: [55..57]
 r200: [54..56]
 r201: [26..27]
 r202: [4..5]
 r203: [1..2]
 r204: [126..127]
 r205: [11..13]
 r206: [11..12]
 r208: [245..246]
 r209: [6..6]
 r210: [50..51]
Compressing live ranges: from 247 to 230 - 93%
Ranges after the compression:
 r87: [17..18]
 r88: [15..16]
 r89: [13..14]
 r90: [216..217]
 r91: [212..213]
 r92: [210..211]
 r93: [209..209] [195..196] [181..182] [137..138]
 r94: [177..178]
 r95: [175..176]
 r96: [171..172]
 r97: [169..170]
 r98: [165..166]
 r99: [163..164]
 r100: [105..106]
 r101: [103..104]
 r102: [101..102]
 r103: [159..160]
 r104: [157..158]
 r105: [153..154]
 r106: [151..152]
 r107: [147..148]
 r108: [145..146]
 r109: [141..142]
 r110: [139..140]
 r111: [99..100]
 r112: [97..98]
 r113: [95..96]
 r114: [133..134]
 r115: [131..132]
 r116: [127..128]
 r117: [125..126]
 r118: [121..122]
 r119: [119..120]
 r120: [115..116]
 r121: [113..114]
 r122: [93..94]
 r123: [91..92]
 r124: [89..90]
 r125: [205..206]
 r126: [203..204]
 r127: [199..200]
 r128: [197..198]
 r129: [87..88]
 r130: [85..86]
 r131: [83..84]
 r132: [191..192]
 r133: [189..190]
 r134: [185..186]
 r135: [183..184]
 r136: [81..82]
 r137: [79..80]
 r138: [77..78]
 r139: [73..74]
 r140: [71..72]
 r141: [35..36]
 r142: [33..34]
 r143: [31..32]
 r144: [41..42]
 r145: [41..42]
 r146: [57..58]
 r147: [55..56]
 r148: [53..54]
 r149: [63..64]
 r150: [63..64]
 r151: [21..22]
 r152: [109..112]
 r153: [107..110]
 r154: [109..110]
 r155: [107..108]
 r156: [11..12]
 r157: [7..8]
 r158: [0..1]
 r159: [5..6]
 r160: [226..227]
 r161: [224..225]
 r162: [222..223]
 r163: [220..221]
 r164: [19..20]
 r165: [218..219]
 r166: [214..215]
 r167: [179..180]
 r168: [173..174]
 r169: [167..168]
 r170: [161..162]
 r171: [155..156]
 r172: [149..150]
 r173: [143..144]
 r174: [135..136]
 r175: [129..130]
 r176: [123..124]
 r177: [117..118]
 r178: [207..208]
 r179: [201..202]
 r180: [193..194]
 r181: [187..188]
 r182: [75..76]
 r183: [37..38]
 r184: [29..30]
 r185: [29..30]
 r186: [27..28]
 r187: [45..46]
 r188: [39..40]
 r189: [25..26]
 r190: [25..26]
 r191: [59..60]
 r192: [51..52]
 r193: [51..52]
 r194: [49..50]
 r195: [69..70]
 r196: [69..70] [65..66]
 r197: [67..68]
 r198: [61..62]
 r199: [47..48]
 r200: [47..48]
 r201: [23..24]
 r202: [2..3]
 r203: [0..1]
 r204: [111..112]
 r205: [9..10]
 r206: [9..10]
 r208: [228..229]
 r209: [4..4]
 r210: [43..44]

********** Assignment #1: **********

	 Assigning to 210 (cl=GENERAL_REGS, orig=187, freq=3, tfirst=210, tfreq=3)...
	   Assign 0 to reload r210 (freq=3)
	 Assigning to 208 (cl=INDEX_REGS, orig=208, freq=1, tfirst=208, tfreq=1)...
	   Assign 0 to reload r208 (freq=1)
	 Assigning to 209 (cl=INDEX_REGS, orig=209, freq=1, tfirst=209, tfreq=1)...
	   Assign 2 to reload r209 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 50
changing reg in insn 48
changing reg in insn 43
changing reg in insn 41
changing reg in insn 39
changing reg in insn 37
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 238
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 280
changing reg in insn 281
changing reg in insn 298
changing reg in insn 299
changing reg in insn 332
changing reg in insn 338
changing reg in insn 333
changing reg in insn 335
changing reg in insn 339
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 24
changing reg in insn 25
changing reg in insn 350
changing reg in insn 353
changing reg in insn 310
changing reg in insn 318
changing reg in insn 314
changing reg in insn 353
changing reg in insn 357
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 102
changing reg in insn 103
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 160
changing reg in insn 161
changing reg in insn 166
changing reg in insn 167
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 212
changing reg in insn 213
changing reg in insn 221
changing reg in insn 222
changing reg in insn 225
changing reg in insn 227
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 249
changing reg in insn 248
changing reg in insn 250
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 274
changing reg in insn 277
changing reg in insn 275
changing reg in insn 277
changing reg in insn 279
changing reg in insn 277
changing reg in insn 276
changing reg in insn 275
changing reg in insn 280
changing reg in insn 278
changing reg in insn 277
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 282
changing reg in insn 283
changing reg in insn 290
changing reg in insn 292
changing reg in insn 291
changing reg in insn 293
changing reg in insn 297
changing reg in insn 298
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 333
changing reg in insn 334
changing reg in insn 347
changing reg in insn 349
changing reg in insn 348
changing reg in insn 349
changing reg in insn 4
changing reg in insn 358
deleting insn with uid = 22.
deleting insn with uid = 223.
deleting insn with uid = 426.
deleting insn with uid = 261.
deleting insn with uid = 279.
deleting insn with uid = 309.
deleting insn with uid = 353.
deleting insn with uid = 357.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 315.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 360.


static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pred<'\"'>; StopPredPure = rapidxml::xml_document<>::attribute_value_pure_pred<'\"'>; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={116d,115u} r1={21d,14u,1e} r2={11d,1u} r3={1d,2u} r4={13d,4u} r5={16d,8u} r6={1d,144u} r7={1d,63u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={80d,29u} r18={8d} r19={8d} r20={1d,1u,18e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1199{799d,381u,19e} in 252{244 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 161 162 163
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1570 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70514+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [208])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1570 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 4 9 2 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_25attribute_value_pure_predILc34EEELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f4418fceb00 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [162])
        (mem/f:DI (reg/f:DI 0 ax [161]) [3 *text_83(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg/f:DI 0 ax [162])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
(insn 15 14 342 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [163])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              46 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 156 164
(code_label 342 15 16 3 528 (nil) [1 uses])
(note 16 342 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [164]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 84 {*movqi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 151 {extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 82 {*movsi_internal}
     (nil))
(call_insn 21 20 23 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE20attribute_value_predILc34EE4testEc") [flags 0x3]  <function_decl 0x7f4418fcec00 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 23 21 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax [orig:156 retval.78_88 ] [156])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 613 {*setcc_qi}
     (nil))
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:156 retval.78_88 ] [156])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 345)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 617 {*jcc_1}
     (nil)
 -> 345)
;;  succ:       4 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 165
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:QI 0 ax [orig:90 _4 ] [90])
        (mem:QI (reg/f:DI 0 ax [165]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 84 {*movqi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 _4 ] [90])
            (const_int 38 [0x26]))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 5 {*cmpqi_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 374)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 617 {*jcc_1}
     (nil)
 -> 374)
;;  succ:       5 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 166
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 81 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [166])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1595 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 35 34 36 5 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 _5 ] [91]) [0 *_5+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 84 {*movqi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 0 ax [orig:93 _7 ] [93])
        (sign_extend:SI (reg:QI 0 ax [orig:92 _6 ] [92]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 151 {extendqisi2}
     (nil))
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 365 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       27
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 365 38 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 365 40 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 366 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 366 40 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 366 42 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 35 [0x23]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 367 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 210)
;;  succ:       33
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 367 42 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 367 44 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 97 [0x61]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 44 43 368 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       13
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 368 44 375 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 375 368 376 9 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 376 375 47)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(code_label 47 376 369 10 506 (nil) [1 uses])
(note 369 47 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 369 49 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 108 [0x6c]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 370 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       30
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 370 49 50 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 50 370 51 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 113 [0x71]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 371 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 120)
;;  succ:       22
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 371 51 377 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 377 371 378 12 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 378 377 54)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 167
(code_label 54 378 55 13 508 (nil) [1 uses])
(note 55 54 56 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 13 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 57 56 58 13 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 0 ax [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 58 57 59 13 (set (reg:QI 0 ax [orig:95 _9 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [0 *_8+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 59 58 60 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _9 ] [95])
            (const_int 109 [0x6d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 60 59 61 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 168
(note 61 60 62 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 14 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 63 62 64 14 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg/f:DI 0 ax [168])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 64 63 65 14 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [0 *_10+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 65 64 66 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 66 65 67 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 169
(note 67 66 68 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 15 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 69 68 70 15 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (plus:DI (reg/f:DI 0 ax [169])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 70 69 71 15 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem:QI (reg/f:DI 0 ax [orig:98 _12 ] [98]) [0 *_12+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 71 70 72 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _13 ] [99])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 72 71 73 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102
(note 73 72 74 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 16 (set (reg/f:DI 0 ax [orig:100 dest.79_14 ] [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 81 {*movdi_internal}
     (nil))
(insn 75 74 76 16 (set (mem:QI (reg/f:DI 0 ax [orig:100 dest.79_14 ] [100]) [0 *dest.79_14+0 S1 A8])
        (const_int 38 [0x26])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 84 {*movqi_internal}
     (nil))
(insn 76 75 77 16 (set (reg/f:DI 0 ax [orig:101 dest.80_15 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 77 76 78 16 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 dest.80_15 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1603 218 {*adddi_1}
     (nil))
(insn 78 77 79 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 _16 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 79 78 379 16 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1604 218 {*adddi_1}
     (nil))
(jump_insn 379 79 380 16 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1605 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 380 379 82)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 170
(code_label 82 380 83 17 511 (nil) [3 uses])
(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 17 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 85 84 86 17 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 86 85 87 17 (set (reg:QI 0 ax [orig:104 _18 ] [104])
        (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 87 86 88 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 _18 ] [104])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       18 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 171
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 18 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 91 90 92 18 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 92 91 93 18 (set (reg:QI 0 ax [orig:106 _20 ] [106])
        (mem:QI (reg/f:DI 0 ax [orig:105 _19 ] [105]) [0 *_19+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 93 92 94 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:106 _20 ] [106])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 94 93 95 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       19 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 172
(note 95 94 96 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 19 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 97 96 98 19 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 98 97 99 19 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem:QI (reg/f:DI 0 ax [orig:107 _21 ] [107]) [0 *_21+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 99 98 100 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 115 [0x73]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 100 99 101 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       20 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 173
(note 101 100 102 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 20 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 103 102 104 20 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg/f:DI 0 ax [173])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 104 103 105 20 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _23 ] [109]) [0 *_23+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 105 104 106 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:110 _24 ] [110])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 106 105 107 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       21 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113
(note 107 106 108 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 21 (set (reg/f:DI 0 ax [orig:111 dest.81_25 ] [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 81 {*movdi_internal}
     (nil))
(insn 109 108 110 21 (set (mem:QI (reg/f:DI 0 ax [orig:111 dest.81_25 ] [111]) [0 *dest.81_25+0 S1 A8])
        (const_int 39 [0x27])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 84 {*movqi_internal}
     (nil))
(insn 110 109 111 21 (set (reg/f:DI 0 ax [orig:112 dest.82_26 ] [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 111 110 112 21 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:112 dest.82_26 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1610 218 {*adddi_1}
     (nil))
(insn 112 111 113 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:113 _27 ] [113])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 113 112 381 21 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1611 218 {*adddi_1}
     (nil))
(jump_insn 381 113 382 21 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1612 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 382 381 120)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 174
(code_label 120 382 121 22 510 (nil) [1 uses])
(note 121 120 122 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 22 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 123 122 124 22 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (plus:DI (reg/f:DI 0 ax [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 124 123 125 22 (set (reg:QI 0 ax [orig:115 _29 ] [115])
        (mem:QI (reg/f:DI 0 ax [orig:114 _28 ] [114]) [0 *_28+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 125 124 126 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:115 _29 ] [115])
            (const_int 117 [0x75]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 126 125 127 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       23 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 175
(note 127 126 128 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 23 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 129 128 130 23 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 130 129 131 23 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 131 130 132 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 132 131 133 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       24 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 176
(note 133 132 134 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 24 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 135 134 136 24 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg/f:DI 0 ax [176])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 136 135 137 24 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem:QI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [0 *_32+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 137 136 138 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 _33 ] [119])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 138 137 139 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       25 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 177
(note 139 138 140 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 25 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 141 140 142 25 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [177])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 142 141 143 25 (set (reg:QI 0 ax [orig:121 _35 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [0 *_34+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 143 142 144 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 _35 ] [121])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 144 143 145 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       26 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124
(note 145 144 146 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 26 (set (reg/f:DI 0 ax [orig:122 dest.83_36 ] [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 81 {*movdi_internal}
     (nil))
(insn 147 146 148 26 (set (mem:QI (reg/f:DI 0 ax [orig:122 dest.83_36 ] [122]) [0 *dest.83_36+0 S1 A8])
        (const_int 34 [0x22])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 84 {*movqi_internal}
     (nil))
(insn 148 147 149 26 (set (reg/f:DI 0 ax [orig:123 dest.84_37 ] [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 149 148 150 26 (parallel [
            (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:123 dest.84_37 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1621 218 {*adddi_1}
     (nil))
(insn 150 149 151 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 _38 ] [124])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 151 150 383 26 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1622 218 {*adddi_1}
     (nil))
(jump_insn 383 151 384 26 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1623 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 384 383 158)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 178
(code_label 158 384 159 27 505 (nil) [1 uses])
(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 27 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 161 160 162 27 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (plus:DI (reg/f:DI 0 ax [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 162 161 163 27 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [orig:125 _39 ] [125]) [0 *_39+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 163 162 164 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 164 163 165 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       28 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 179
(note 165 164 166 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 28 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 167 166 168 28 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 168 167 169 28 (set (reg:QI 0 ax [orig:128 _42 ] [128])
        (mem:QI (reg/f:DI 0 ax [orig:127 _41 ] [127]) [0 *_41+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 169 168 170 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:128 _42 ] [128])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 170 169 171 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       29 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131
(note 171 170 172 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 29 (set (reg/f:DI 0 ax [orig:129 dest.85_43 ] [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 81 {*movdi_internal}
     (nil))
(insn 173 172 174 29 (set (mem:QI (reg/f:DI 0 ax [orig:129 dest.85_43 ] [129]) [0 *dest.85_43+0 S1 A8])
        (const_int 62 [0x3e])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 84 {*movqi_internal}
     (nil))
(insn 174 173 175 29 (set (reg/f:DI 0 ax [orig:130 dest.86_44 ] [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 175 174 176 29 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 dest.86_44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1632 218 {*adddi_1}
     (nil))
(insn 176 175 177 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:131 _45 ] [131])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 177 176 385 29 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1633 218 {*adddi_1}
     (nil))
(jump_insn 385 177 386 29 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1634 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 386 385 184)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 180
(code_label 184 386 185 30 509 (nil) [1 uses])
(note 185 184 186 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 30 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 187 186 188 30 (parallel [
            (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
                (plus:DI (reg/f:DI 0 ax [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 188 187 189 30 (set (reg:QI 0 ax [orig:133 _47 ] [133])
        (mem:QI (reg/f:DI 0 ax [orig:132 _46 ] [132]) [0 *_46+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 189 188 190 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:133 _47 ] [133])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 190 189 191 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       31 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 135 181
(note 191 190 192 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 31 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 193 192 194 31 (parallel [
            (set (reg/f:DI 0 ax [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 0 ax [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 194 193 195 31 (set (reg:QI 0 ax [orig:135 _49 ] [135])
        (mem:QI (reg/f:DI 0 ax [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 195 194 196 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 _49 ] [135])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 196 195 197 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       32 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138
(note 197 196 198 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 32 (set (reg/f:DI 0 ax [orig:136 dest.87_50 ] [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 81 {*movdi_internal}
     (nil))
(insn 199 198 200 32 (set (mem:QI (reg/f:DI 0 ax [orig:136 dest.87_50 ] [136]) [0 *dest.87_50+0 S1 A8])
        (const_int 60 [0x3c])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 84 {*movqi_internal}
     (nil))
(insn 200 199 201 32 (set (reg/f:DI 0 ax [orig:137 dest.88_51 ] [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 201 200 202 32 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:137 dest.88_51 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1643 218 {*adddi_1}
     (nil))
(insn 202 201 203 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:138 _52 ] [138])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 203 202 387 32 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1644 218 {*adddi_1}
     (nil))
(jump_insn 387 203 388 32 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1645 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 388 387 210)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 182
(code_label 210 388 211 33 507 (nil) [1 uses])
(note 211 210 212 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 33 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 81 {*movdi_internal}
     (nil))
(insn 213 212 214 33 (parallel [
            (set (reg/f:DI 0 ax [orig:139 _53 ] [139])
                (plus:DI (reg/f:DI 0 ax [182])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1651 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 214 213 215 33 (set (reg:QI 0 ax [orig:140 _54 ] [140])
        (mem:QI (reg/f:DI 0 ax [orig:139 _53 ] [139]) [0 *_53+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 84 {*movqi_internal}
     (nil))
(insn 215 214 216 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:140 _54 ] [140])
            (const_int 120 [0x78]))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 5 {*cmpqi_1}
     (nil))
(jump_insn 216 215 217 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 617 {*jcc_1}
     (nil)
 -> 254)
;;  succ:       34 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 217 216 218 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 34 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1653 81 {*movdi_internal}
     (nil))
(insn 219 218 242 34 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1654 218 {*adddi_1}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              36 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 183 184 185 186
(code_label 242 219 220 35 521 (nil) [1 uses])
(note 220 242 221 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 35 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 222 221 224 35 (set (reg:QI 0 ax [orig:141 _55 ] [141])
        (mem:QI (reg/f:DI 0 ax [183]) [0 *src_67+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 224 222 225 35 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (zero_extend:SI (reg:QI 0 ax [orig:142 _56 ] [142]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 136 {*zero_extendqisi2}
     (nil))
(insn 225 224 226 35 (set (reg:DI 1 dx [184])
        (sign_extend:DI (reg:SI 0 ax [orig:143 _57 ] [143]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 145 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 35 (set (reg:DI 0 ax [185])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 227 226 228 35 (set (reg:QI 0 ax [186])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [184])
                (reg:DI 0 ax [185])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 228 227 229 35 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [186])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 229 228 230 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 5 {*cmpqi_1}
     (nil))
(jump_insn 230 229 235 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 420)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 617 {*jcc_1}
     (nil)
 -> 420)
;;  succ:       54
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 54, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 187 188
(note 235 230 236 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 36 (set (reg:DI 0 ax [187])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 237 236 427 36 (parallel [
            (set (reg:DI 0 ax [187])
                (ashift:DI (reg:DI 0 ax [187])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [8 code+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 427 237 238 36 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (reg:DI 0 ax [187])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 238 427 239 36 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1660 132 {zero_extendqidi2}
     (nil))
(insn 239 238 240 36 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg:DI 1 dx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 218 {*adddi_1}
     (nil))
(insn 240 239 241 36 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (reg:DI 0 ax [188])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 241 240 390 36 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1661 218 {*adddi_1}
     (nil))
(jump_insn 390 241 391 36 (set (pc)
        (label_ref 242)) "libs/src/../include/rapidxml/rapidxml.hpp":1655 649 {jump}
     (nil)
 -> 242)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 391 390 420)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 420 391 419 54 538 (nil) [1 uses])
(note 419 420 421 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 421 419 389 54 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1659 684 {nop}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 38, flags: (RTL, MODIFIED)
;;  pred:       54 [100.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190
(code_label 389 421 246 37 532 (nil) [0 uses])
(note 246 389 247 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 37 (set (reg:DI 1 dx [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 248 247 249 37 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1663 218 {*adddi_1}
     (nil))
(insn 249 248 250 37 (set (reg:DI 4 si)
        (reg:DI 1 dx [189])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 250 249 251 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(call_insn 251 250 392 37 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 392 251 393 37 (set (pc)
        (label_ref 295)) 649 {jump}
     (nil)
 -> 295)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 393 392 254)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 254 393 255 38 518 (nil) [1 uses])
(note 255 254 256 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 38 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1667 81 {*movdi_internal}
     (nil))
(insn 257 256 285 38 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1668 218 {*adddi_1}
     (nil))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;;              40 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 191 192 193 194
(code_label 285 257 258 39 525 (nil) [1 uses])
(note 258 285 259 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 39 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 260 259 262 39 (set (reg:QI 0 ax [orig:146 _60 ] [146])
        (mem:QI (reg/f:DI 0 ax [191]) [0 *src_68+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 262 260 263 39 (set (reg:SI 0 ax [orig:148 _62 ] [148])
        (zero_extend:SI (reg:QI 0 ax [orig:147 _61 ] [147]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 136 {*zero_extendqisi2}
     (nil))
(insn 263 262 264 39 (set (reg:DI 1 dx [192])
        (sign_extend:DI (reg:SI 0 ax [orig:148 _62 ] [148]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 145 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 39 (set (reg:DI 0 ax [193])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 265 264 266 39 (set (reg:QI 0 ax [194])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [192])
                (reg:DI 0 ax [193])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 266 265 267 39 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [194])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 267 266 268 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 5 {*cmpqi_1}
     (nil))
(jump_insn 268 267 273 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 423)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 617 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       55
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 55, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 195 196 197 198
(note 273 268 274 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 40 (set (reg:DI 1 dx [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 275 274 276 40 (set (reg:DI 0 ax [196])
        (reg:DI 1 dx [195])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 276 275 277 40 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 277 276 278 40 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [195])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [195])
            (const_int 5 [0x5]))
        (nil)))
(insn 278 277 280 40 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 280 278 281 40 (set (reg:DI 1 dx [orig:149 _63 ] [149])
        (reg:DI 0 ax [196])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 281 280 282 40 (set (reg:DI 0 ax [orig:150 _64 ] [150])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1674 132 {zero_extendqidi2}
     (nil))
(insn 282 281 283 40 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (reg:DI 1 dx [orig:149 _63 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (nil))
(insn 283 282 284 40 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (reg:DI 0 ax [198])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 284 283 395 40 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1675 218 {*adddi_1}
     (nil))
(jump_insn 395 284 396 40 (set (pc)
        (label_ref 285)) "libs/src/../include/rapidxml/rapidxml.hpp":1669 649 {jump}
     (nil)
 -> 285)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 396 395 423)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 396 422 55 539 (nil) [1 uses])
(note 422 423 424 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 424 422 394 55 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1673 684 {nop}
     (nil))
;;  succ:       41 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 42, flags: (RTL, MODIFIED)
;;  pred:       55 [100.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200
(code_label 394 424 289 41 533 (nil) [0 uses])
(note 289 394 290 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 41 (set (reg:DI 1 dx [199])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 291 290 292 41 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1677 218 {*adddi_1}
     (nil))
(insn 292 291 293 41 (set (reg:DI 4 si)
        (reg:DI 1 dx [199])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 293 292 294 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(call_insn 294 293 295 41 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              37 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 201
(code_label 295 294 296 42 522 (nil) [1 uses])
(note 296 295 297 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 42 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 81 {*movdi_internal}
     (nil))
(insn 298 297 299 42 (set (reg:QI 0 ax [orig:151 _65 ] [151])
        (mem:QI (reg/f:DI 0 ax [201]) [0 *src_69+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 84 {*movqi_internal}
     (nil))
(insn 299 298 300 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:151 _65 ] [151])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 5 {*cmpqi_1}
     (nil))
(jump_insn 300 299 301 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 617 {*jcc_1}
     (nil)
 -> 305)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 301 300 302 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 397 43 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1680 218 {*adddi_1}
     (nil))
(jump_insn 397 302 398 43 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1683 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 398 397 305)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 50, flags: (RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 202 203
(code_label 305 398 306 44 526 (nil) [1 uses])
(note 306 305 307 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 44 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 308 307 310 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1682 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 310 308 311 44 (set (reg/f:DI 3 bx [orig:158 _120 ] [158])
        (reg/f:DI 0 ax [202])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 311 310 312 44 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 312 311 313 44 (set (reg:DI 1 dx)
        (reg:DI 0 ax [203])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 313 312 314 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f44186d81b0 *.LC23>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 314 313 315 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 315 314 316 44 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 316 315 317 44 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 317 316 318 44 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 318 317 319 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 319 318 320 44 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 402)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 51, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18
;;              19
;;              20
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 402 320 401 50 534 (nil) [4 uses])
(note 401 402 403 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 403 401 404 50 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1614 684 {nop}
     (nil))
(jump_insn 404 403 405 50 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 407)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       22
;;              25
;;              23
;;              24
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 407 405 406 51 535 (nil) [4 uses])
(note 406 407 408 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 408 406 409 51 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1625 684 {nop}
     (nil))
(jump_insn 409 408 410 51 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 410 409 412)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 412 410 411 52 536 (nil) [2 uses])
(note 411 412 413 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 413 411 414 52 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1636 684 {nop}
     (nil))
(jump_insn 414 413 415 52 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 415 414 417)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 45, flags: (RTL, MODIFIED)
;;  pred:       30
;;              31
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 417 415 416 53 537 (nil) [2 uses])
(note 416 417 418 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 418 416 374 53 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1647 684 {nop}
     (nil))
;;  succ:       45 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 46, flags: (RTL, MODIFIED)
;;  pred:       52 [100.0%] 
;;              4
;;              53 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;;              50 [100.0%] 
;;              12 [100.0%] 
;;              51 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 204
(code_label 374 418 331 45 531 (nil) [6 uses])
(note 331 374 332 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 333 45 (set (reg/f:DI 1 dx [orig:152 src.93_75 ] [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 333 332 334 45 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 1 dx [orig:152 src.93_75 ] [152])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 334 333 335 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg:DI 0 ax [204])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 335 334 336 45 (set (reg/f:DI 0 ax [orig:153 dest.94_76 ] [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 336 335 337 45 (parallel [
            (set (reg/f:DI 2 cx [orig:154 _78 ] [154])
                (plus:DI (reg/f:DI 0 ax [orig:153 dest.94_76 ] [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 337 336 338 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 2 cx [orig:154 _78 ] [154])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 338 337 339 45 (set (reg:QI 1 dx [orig:155 _79 ] [155])
        (mem:QI (reg/f:DI 1 dx [orig:152 src.93_75 ] [152]) [0 *src.93_75+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
(insn 339 338 340 45 (set (mem:QI (reg/f:DI 0 ax [orig:153 dest.94_76 ] [153]) [0 *dest.95_77+0 S1 A8])
        (reg:QI 1 dx [orig:155 _79 ] [155])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              16 [100.0%] 
;;              21 [100.0%] 
;;              26 [100.0%] 
;;              29 [100.0%] 
;;              32 [100.0%] 
;;              43 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 340 339 341 46 512 (nil) [6 uses])
(note 341 340 399 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(jump_insn 399 341 400 46 (set (pc)
        (label_ref 342)) "libs/src/../include/rapidxml/rapidxml.hpp":1587 649 {jump}
     (nil)
 -> 342)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 400 399 345)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 157 159 205 206
(code_label 345 400 346 47 502 (nil) [1 uses])
(note 346 345 347 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 47 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 348 347 349 47 (set (reg/f:DI 1 dx [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 349 348 350 47 (set (mem/f:DI (reg/f:DI 0 ax [205]) [3 *text_83(D)+0 S8 A64])
        (reg/f:DI 1 dx [206])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 350 349 358 47 (set (reg/f:DI 0 ax [orig:157 _90 ] [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1716 81 {*movdi_internal}
     (nil))
(insn 358 350 359 47 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70514+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [209]))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1718 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 359 358 372 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1718 617 {*jcc_1}
     (nil)
 -> 362)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 372 359 360 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(call_insn 360 372 361 48 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1718 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 361 360 362)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 362 361 373 49 530 (nil) [1 uses])
(note 373 362 363 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 363 373 425 49 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1718 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 425 363 0 NOTE_INSN_DELETED)

;; Function Ch rapidxml::xml_document<Ch>::parse_and_append_data(rapidxml::xml_node<Ch>*, Ch*&, Ch*) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE21parse_and_append_dataILi0EEEcPNS_8xml_nodeIcEERPcS6_, funcdef_no=3466, decl_uid=68257, cgraph_uid=1340, symbol_order=1362)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 32:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=121 from oldreg=89, assigning class GENERAL_REGS to r121
   36: {r121:DI=r121:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r89:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   87: r121:DI=r89:DI
    Inserting insn reload after:
   88: r91:DI=r121:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=122 from oldreg=97, assigning class GENERAL_REGS to r122
   61: {r122:DI=r122:DI-r98:DI;clobber flags:CC;}
      REG_DEAD r98:DI
      REG_DEAD r97:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   89: r122:DI=r97:DI
    Inserting insn reload after:
   90: r99:DI=r122:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 73:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 84: point = 0, n_alt = -1
   Insn 83: point = 0, n_alt = -2
   Insn 79: point = 1, n_alt = -2
   Insn 76: point = 3, n_alt = 2
   Insn 75: point = 4, n_alt = 6
   Insn 74: point = 5, n_alt = 3
   Insn 73: point = 6, n_alt = 6
   Insn 72: point = 7, n_alt = 2
   Insn 71: point = 9, n_alt = 3
   Insn 70: point = 11, n_alt = 3
  BB 3
   Insn 67: point = 12, n_alt = 0
   Insn 66: point = 12, n_alt = -2
   Insn 65: point = 13, n_alt = -2
   Insn 64: point = 14, n_alt = -2
   Insn 63: point = 15, n_alt = 3
   Insn 62: point = 16, n_alt = -2
   Insn 90: point = 18, n_alt = -2
	Hard reg 1 is preferable by r122 with profit 1
   Insn 61: point = 20, n_alt = 0
   Insn 89: point = 21, n_alt = -2
	Hard reg 1 is preferable by r122 with profit 1
	Hard reg 2 is preferable by r122 with profit 1
   Insn 60: point = 23, n_alt = 3
   Insn 59: point = 24, n_alt = 3
   Insn 58: point = 25, n_alt = 3
  BB 2
   Insn 56: point = 26, n_alt = -1
   Insn 55: point = 26, n_alt = 0
   Insn 54: point = 27, n_alt = 0
   Insn 53: point = 28, n_alt = 0
   Insn 52: point = 29, n_alt = 2
   Insn 51: point = 31, n_alt = -2
   Insn 50: point = 32, n_alt = 0
   Insn 49: point = 32, n_alt = -2
   Insn 48: point = 33, n_alt = 3
   Insn 47: point = 34, n_alt = 0
   Insn 46: point = 34, n_alt = -2
   Insn 45: point = 35, n_alt = -2
   Insn 44: point = 36, n_alt = 3
   Insn 43: point = 37, n_alt = 3
   Insn 42: point = 38, n_alt = 0
   Insn 41: point = 38, n_alt = -2
   Insn 40: point = 39, n_alt = -2
   Insn 39: point = 40, n_alt = -2
   Insn 38: point = 41, n_alt = 3
   Insn 37: point = 42, n_alt = -2
   Insn 88: point = 44, n_alt = -2
	Hard reg 1 is preferable by r121 with profit 1
   Insn 36: point = 46, n_alt = 0
   Insn 87: point = 47, n_alt = -2
	Hard reg 1 is preferable by r121 with profit 1
	Hard reg 2 is preferable by r121 with profit 1
   Insn 35: point = 49, n_alt = 3
   Insn 34: point = 50, n_alt = 3
   Insn 33: point = 51, n_alt = 3
   Insn 32: point = 52, n_alt = 5
   Insn 31: point = 53, n_alt = -2
   Insn 30: point = 54, n_alt = 0
   Insn 29: point = 54, n_alt = -2
   Insn 28: point = 55, n_alt = 0
   Insn 27: point = 55, n_alt = 2
   Insn 26: point = 55, n_alt = 2
   Insn 25: point = 55, n_alt = 2
   Insn 24: point = 55, n_alt = 2
   Insn 23: point = 55, n_alt = 0
   Insn 22: point = 57, n_alt = 3
   Insn 20: point = 58, n_alt = 5
   Insn 19: point = 59, n_alt = -2
   Insn 18: point = 60, n_alt = 0
   Insn 17: point = 60, n_alt = -2
   Insn 16: point = 61, n_alt = 3
   Insn 14: point = 62, n_alt = 5
   Insn 13: point = 63, n_alt = 3
   Insn 12: point = 65, n_alt = 3
   Insn 11: point = 66, n_alt = 5
   Insn 10: point = 67, n_alt = 3
   Insn 9: point = 68, n_alt = 3
   Insn 5: point = 69, n_alt = 5
   Insn 4: point = 69, n_alt = 5
   Insn 3: point = 69, n_alt = 5
   Insn 2: point = 69, n_alt = 5
 r87: [54..55]
 r88: [38..51]
 r89: [48..50]
 r90: [46..49]
 r91: [43..44]
 r92: [40..42]
 r93: [32..33]
 r94: [30..31]
 r95: [28..29]
 r96: [12..25]
 r97: [22..24]
 r98: [20..23]
 r99: [17..18]
 r100: [14..16]
 r101: [8..9]
 r102: [58..59]
 r103: [52..53]
 r104: [26..27]
 r105: [2..3]
 r106: [0..1]
 r107: [66..68]
 r108: [66..67]
 r109: [64..65]
 r110: [62..63]
 r111: [60..61]
 r112: [56..57]
 r113: [39..41]
 r114: [35..37]
 r115: [34..36]
 r116: [13..15]
 r117: [10..11]
 r118: [6..7]
 r119: [4..5]
 r121: [45..47]
 r122: [19..21]
Compressing live ranges: from 69 to 54 - 78%
Ranges after the compression:
 r87: [40..41]
 r88: [30..37]
 r89: [36..37]
 r90: [34..37]
 r91: [32..33]
 r92: [30..31]
 r93: [26..27]
 r94: [24..25]
 r95: [22..23]
 r96: [12..19]
 r97: [18..19]
 r98: [16..19]
 r99: [14..15]
 r100: [12..13]
 r101: [8..9]
 r102: [44..45]
 r103: [38..39]
 r104: [20..21]
 r105: [2..3]
 r106: [0..1]
 r107: [52..53]
 r108: [52..53]
 r109: [50..51]
 r110: [48..49]
 r111: [46..47]
 r112: [42..43]
 r113: [30..31]
 r114: [28..29]
 r115: [28..29]
 r116: [12..13]
 r117: [10..11]
 r118: [6..7]
 r119: [4..5]
 r121: [34..35]
 r122: [16..17]

********** Assignment #1: **********

	 Assigning to 121 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=121, tfreq=3)...
	   Assign 2 to reload r121 (freq=3)
	 Assigning to 122 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=122, tfreq=3)...
	   Assign 2 to reload r122 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 29
changing reg in insn 33
changing reg in insn 41
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 66
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 71
changing reg in insn 72
changing reg in insn 19
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
changing reg in insn 54
changing reg in insn 55
changing reg in insn 76
changing reg in insn 79
changing reg in insn 79
changing reg in insn 83
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 46
changing reg in insn 63
changing reg in insn 65
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
deleting insn with uid = 19.
deleting insn with uid = 31.
deleting insn with uid = 87.
deleting insn with uid = 37.
deleting insn with uid = 39.
deleting insn with uid = 51.
deleting insn with uid = 89.
deleting insn with uid = 62.
deleting insn with uid = 64.
deleting insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns


Ch rapidxml::xml_document<Ch>::parse_and_append_data(rapidxml::xml_node<Ch>*, Ch*&, Ch*) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={25d,22u} r1={14d,8u} r2={14d,8u} r4={11d,5u} r5={13d,7u} r6={1d,31u} r7={1d,10u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={11d,2u} r18={6d} r19={6d} r20={1d,1u,1e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={8d,1u} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 596{499d,96u,1e} in 64{58 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 102 103 104 107 108 109 110 111 112 113 114 115
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":1940 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [51 node+0 S8 A64])
        (reg:DI 4 si [ node ])) "libs/src/../include/rapidxml/rapidxml.hpp":1940 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [87 text+0 S8 A64])
        (reg:DI 1 dx [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1940 81 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 contents_start+0 S8 A64])
        (reg:DI 2 cx [ contents_start ])) "libs/src/../include/rapidxml/rapidxml.hpp":1940 81 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1944 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 1 dx [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [3 contents_start+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1944 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f:DI (reg/f:DI 0 ax [107]) [3 *text_5(D)+0 S8 A64])
        (reg/f:DI 1 dx [108])) "libs/src/../include/rapidxml/rapidxml.hpp":1944 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1947 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [110])
        (mem/f:DI (reg/f:DI 0 ax [109]) [3 *text_5(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1947 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])
        (reg/f:DI 0 ax [110])) "libs/src/../include/rapidxml/rapidxml.hpp":1947 81 {*movdi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1951 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "libs/src/../include/rapidxml/rapidxml.hpp":1951 81 {*movdi_internal}
     (nil))
(call_insn 18 17 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_9text_predENS1_20text_pure_no_ws_predELi0EEEPcRS5_") [flags 0x3]  <function_decl 0x7f4418fced00 skip_and_expand_character_refs>) [0 skip_and_expand_character_refs S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1951 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 _23 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1951 81 {*movdi_internal}
     (nil))
(insn 22 20 23 2 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _7 ] [87])
                (plus:DI (reg/f:DI 0 ax [112])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1974 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [46 this+0 S8 A64])
            (const_int 96 [0x60]))
        (nil)))
(insn 24 23 25 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 37 r8)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 2 cx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 4 si)
        (const_int 2 [0x2])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 82 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _7 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(call_insn 30 29 32 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11memory_poolIcE13allocate_nodeENS_9node_typeEPKcS4_mm") [flags 0x3]  <function_decl 0x7f441985f700 allocate_node>) [0 allocate_node S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1974 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 32 30 33 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 data+0 S8 A64])
        (reg/f:DI 0 ax [orig:103 _27 ] [103])) "libs/src/../include/rapidxml/rapidxml.hpp":1974 81 {*movdi_internal}
     (nil))
(insn 33 32 34 2 (set (reg/f:DI 0 ax [orig:88 _8 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 data+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 2 cx [orig:89 end.105_9 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 1 dx [orig:90 value.106_10 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 36 35 88 2 (parallel [
            (set (reg:DI 2 cx [orig:89 end.105_9 ] [89])
                (minus:DI (reg:DI 2 cx [orig:89 end.105_9 ] [89])
                    (reg:DI 1 dx [orig:90 value.106_10 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1975 274 {*subdi_1}
     (nil))
(insn 88 36 38 2 (set (reg:DI 1 dx [orig:91 _11 ] [91])
        (reg:DI 2 cx [orig:89 end.105_9 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 38 88 40 2 (set (reg:DI 2 cx [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 40 38 41 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [113])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _8 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 81 {*movdi_internal}
     (nil))
(call_insn 42 41 43 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1975 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 43 42 44 2 (set (reg:DI 1 dx [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [51 data+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1976 81 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1976 81 {*movdi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [114])) "libs/src/../include/rapidxml/rapidxml.hpp":1976 81 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [115])) "libs/src/../include/rapidxml/rapidxml.hpp":1976 81 {*movdi_internal}
     (nil))
(call_insn 47 46 48 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_nodeIcE11append_nodeEPS1_") [flags 0x3]  <function_decl 0x7f4419852f00 append_node>) [0 append_node S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1976 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 48 47 49 2 (set (reg/f:DI 0 ax [orig:93 _13 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1981 81 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 _13 ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":1981 81 {*movdi_internal}
     (nil))
(call_insn 50 49 52 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK8rapidxml8xml_baseIcE5valueEv") [flags 0x3]  <function_decl 0x7f441984ac00 value>) [0 value S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1981 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 52 50 53 2 (set (reg:QI 0 ax [orig:95 _15 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _14 ] [94]) [0 *_14+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1981 84 {*movqi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _15 ] [95])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1981 1 {*cmpqi_ccno_1}
     (nil))
(insn 54 53 55 2 (set (reg:QI 0 ax [orig:104 retval.107_34 ] [104])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1981 613 {*setcc_qi}
     (nil))
(insn 55 54 56 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 retval.107_34 ] [104])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1981 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 56 55 57 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1981 617 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100 116
(note 57 56 58 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 3 (set (reg/f:DI 0 ax [orig:96 _16 ] [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [51 node+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:DI 2 cx [orig:97 end.108_17 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:DI 1 dx [orig:98 value.109_18 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 61 60 90 3 (parallel [
            (set (reg:DI 2 cx [orig:97 end.108_17 ] [97])
                (minus:DI (reg:DI 2 cx [orig:97 end.108_17 ] [97])
                    (reg:DI 1 dx [orig:98 value.109_18 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1982 274 {*subdi_1}
     (nil))
(insn 90 61 63 3 (set (reg:DI 1 dx [orig:99 _19 ] [99])
        (reg:DI 2 cx [orig:97 end.108_17 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 63 90 65 3 (set (reg:DI 2 cx [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 value+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 65 63 66 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [116])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 _16 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 81 {*movdi_internal}
     (nil))
(call_insn 67 66 68 3 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcE5valueEPKcm") [flags 0x3]  <function_decl 0x7f441984a200 value>) [0 value S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1982 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 101 105 106 117 118 119
(code_label 68 67 69 4 541 (nil) [1 uses])
(note 69 68 70 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 4 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1987 81 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [orig:101 _21 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [117]) [3 *text_5(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1987 81 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:QI 0 ax [118])
        (mem:QI (reg/f:DI 0 ax [orig:101 _21 ] [101]) [0 *_21+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1987 84 {*movqi_internal}
     (nil))
(insn 73 72 74 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -25 [0xffffffffffffffe7])) [0 ch+0 S1 A8])
        (reg:QI 0 ax [118])) "libs/src/../include/rapidxml/rapidxml.hpp":1987 84 {*movqi_internal}
     (nil))
(insn 74 73 75 4 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 end+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1988 81 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (mem:QI (reg/f:DI 0 ax [119]) [0 *end_24+0 S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1988 84 {*movqi_internal}
     (nil))
(insn 76 75 83 4 (set (reg:QI 0 ax [orig:105 _38 ] [105])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -25 [0xffffffffffffffe7])) [0 ch+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1989 84 {*movqi_internal}
     (nil))
(insn 83 76 84 4 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:106 <retval> ] [106])) "libs/src/../include/rapidxml/rapidxml.hpp":1994 84 {*movqi_internal}
     (nil))
(insn 84 83 86 4 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1994 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 86 84 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char] (_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv, funcdef_no=3491, decl_uid=11182, cgraph_uid=1365, symbol_order=1387)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 30{20d,10u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [95 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":129 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (const_int -1 [0xffffffffffffffff])) "/usr/include/c++/7/ext/new_allocator.h":130 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/ext/new_allocator.h":130 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/ext/new_allocator.h":130 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function _Tp* __gnu_cxx::__aligned_membuf<_Tp>::_M_ptr() [with _Tp = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >] (_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE6_M_ptrEv, funcdef_no=3492, decl_uid=65416, cgraph_uid=1366, symbol_order=1388)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = -2
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 9.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


_Tp* __gnu_cxx::__aligned_membuf<_Tp>::_M_ptr() [with _Tp = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{93d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [101 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/aligned_buffer.h":70 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [101 this+0 S8 A64])) "/usr/include/c++/7/ext/aligned_buffer.h":71 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/ext/aligned_buffer.h":71 81 {*movdi_internal}
     (nil))
(call_insn 8 7 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE7_M_addrEv") [flags 0x3]  <function_decl 0x7f4419073400 _M_addr>) [0 _M_addr S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/ext/aligned_buffer.h":71 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 8 17 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/ext/aligned_buffer.h":71 81 {*movdi_internal}
     (nil))
(insn 17 16 19 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/ext/aligned_buffer.h":71 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::~pair() (_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_ED2Ev, funcdef_no=3495, decl_uid=68724, cgraph_uid=1368, symbol_order=1390)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = 3
   Insn 9: point = 2, n_alt = 0
   Insn 8: point = 2, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 12.


std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::~pair()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,5u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 185{168d,16u,1e} in 9{7 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [97 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_pair.h":198 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [97 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_pair.h":198 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 0 ax [89])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_pair.h":198 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [97 this+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_pair.h":198 81 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_pair.h":198 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [97 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_pair.h":198 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_pair.h":198 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev") [flags 0x41]  <function_decl 0x7f441b161b00 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_pair.h":198 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_pair.h":198 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEE7destroyISA_EEvPT_, funcdef_no=3493, decl_uid=68387, cgraph_uid=1370, symbol_order=1392)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = -1
   Insn 9: point = 0, n_alt = 0
   Insn 8: point = 0, n_alt = -2
   Insn 7: point = 1, n_alt = 3
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,5u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 105{92d,13u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [72 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":140 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [97 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":140 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [97 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":140 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":140 81 {*movdi_internal}
     (nil))
(call_insn 9 8 12 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_ED1Ev") [flags 0x3]  <function_decl 0x7f4419002700 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":140 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 9 13 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":140 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 13 12 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >] (_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EEE10deallocateEPSB_m, funcdef_no=3497, decl_uid=53275, cgraph_uid=1371, symbol_order=1393)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{92d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [72 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 D.53278+0 S8 A64])
        (reg:DI 1 dx [ D.53278 ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [73 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f441c511f00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":125 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":126 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (_ZNSt6vectorIjSaIjEED2Ev, funcdef_no=3499, decl_uid=55943, cgraph_uid=1373, symbol_order=1395)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = 0
   Insn 19: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = 3
   Insn 17: point = 2, n_alt = 0
   Insn 16: point = 2, n_alt = -2
   Insn 15: point = 3, n_alt = -2
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = 3
   Insn 12: point = 7, n_alt = 3
   Insn 11: point = 8, n_alt = 3
   Insn 10: point = 10, n_alt = 3
   Insn 9: point = 11, n_alt = -2
   Insn 8: point = 12, n_alt = 0
   Insn 7: point = 12, n_alt = -2
   Insn 6: point = 13, n_alt = 3
   Insn 2: point = 14, n_alt = 5
 r87: [12..13]
 r88: [4..11]
 r89: [3..8]
 r90: [2..5]
 r91: [0..1]
 r92: [9..10]
 r93: [6..7]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [8..9]
 r88: [2..7]
 r89: [2..5]
 r90: [2..3]
 r91: [0..1]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 14
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.


std::vector<_Tp, _Alloc>::~vector() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={9d,6u} r1={5d,1u} r2={5d,1u} r4={5d,1u} r5={7d,4u} r6={1d,7u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 271{245d,26u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [102 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":433 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [102 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv") [flags 0x3]  <function_decl 0x7f441994a300 _M_get_Tp_allocator>) [0 _M_get_Tp_allocator S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":435 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 1 dx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [102 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 2 cx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [92])
                (const_int 8 [0x8])) [106 this_6(D)->D.55946._M_impl._M_finish+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [102 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [93]) [106 this_6(D)->D.55946._M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "/usr/include/c++/7/bits/stl_vector.h":434 81 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPjjEvT_S1_RSaIT0_E") [flags 0x3]  <function_decl 0x7f4419002e00 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":434 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [102 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_vector.h":435 81 {*movdi_internal}
     (nil))
(call_insn 20 19 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIjSaIjEED2Ev") [flags 0x3]  <function_decl 0x7f4419974d00 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":435 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 20 24 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":435 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 23 0 NOTE_INSN_DELETED)

;; Function static _ForwardIterator std::__uninitialized_default_n_1<true>::__uninit_default_n(_ForwardIterator, _Size) [with _ForwardIterator = char*; _Size = long unsigned int] (_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPcmEET_S3_T0_, funcdef_no=3501, decl_uid=68532, cgraph_uid=1375, symbol_order=1397)

      Creating newreg=93
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=94
Removing SCRATCH in insn #24 (nop 3)
rescanning insn with uid = 24.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r93
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r94
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 26: point = 0, n_alt = 0
  BB 4
   Insn 29: point = 0, n_alt = -1
  BB 2
   Insn 25: point = 0, n_alt = -1
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 1, n_alt = -2
   Insn 19: point = 2, n_alt = -2
   Insn 16: point = 4, n_alt = -2
   Insn 15: point = 5, n_alt = 0
   Insn 14: point = 5, n_alt = -2
   Insn 13: point = 6, n_alt = -2
   Insn 12: point = 7, n_alt = -2
   Insn 11: point = 8, n_alt = 3
   Insn 10: point = 9, n_alt = 3
   Insn 9: point = 10, n_alt = 3
   Insn 8: point = 11, n_alt = 6
   Insn 5: point = 11, n_alt = 0
   Insn 3: point = 13, n_alt = 5
   Insn 2: point = 13, n_alt = 5
 r87: [3..4]
 r88: [1..2]
 r89: [7..10]
 r90: [6..9]
 r91: [5..8]
 r93: [11..12]
 r94: [0..0]
Compressing live ranges: from 13 to 9 - 69%
Ranges after the compression:
 r87: [3..4]
 r88: [1..2]
 r89: [5..6]
 r90: [5..6]
 r91: [5..6]
 r93: [7..8]
 r94: [0..0]

********** Assignment #1: **********

	 Assigning to 93 (cl=INDEX_REGS, orig=93, freq=1, tfirst=93, tfreq=1)...
	   Assign 0 to reload r93 (freq=1)
	 Assigning to 94 (cl=INDEX_REGS, orig=94, freq=1, tfirst=94, tfreq=1)...
	   Assign 2 to reload r94 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 14
changing reg in insn 5
changing reg in insn 24
deleting insn with uid = 12.
deleting insn with uid = 16.
deleting insn with uid = 19.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 26.


static _ForwardIterator std::__uninitialized_default_n_1<true>::__uninit_default_n(_ForwardIterator, _Size) [with _ForwardIterator = char*; _Size = long unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={4d,1u} r2={5d,1u} r4={4d,2u} r5={4d,2u} r6={1d,12u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d,1u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 201{172d,29u,0e} in 14{12 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":543 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_uninitialized.h":543 81 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [9 D.70516+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [93])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_uninitialized.h":543 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -9 [0xfffffffffffffff7])) [0 D.68756+0 S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_uninitialized.h":548 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 1 dx [89])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -9 [0xfffffffffffffff7])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_uninitialized.h":548 218 {*adddi_1}
     (nil))
(insn 10 9 11 2 (set (reg:DI 2 cx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":548 81 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":548 81 {*movdi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":548 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_uninitialized.h":548 81 {*movdi_internal}
     (nil))
(call_insn 15 14 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt6fill_nIPcmcET_S1_T0_RKT1_") [flags 0x3]  <function_decl 0x7f441900c300 fill_n>) [0 fill_n S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":548 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 24 15 25 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [9 D.70516+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [94]))
        ]) "/usr/include/c++/7/bits/stl_uninitialized.h":549 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 25 24 31 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "/usr/include/c++/7/bits/stl_uninitialized.h":549 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 31 25 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 26 31 27 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_uninitialized.h":549 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 28 27 32 4 553 (nil) [1 uses])
(note 32 28 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 32 33 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":549 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 33 29 0 NOTE_INSN_DELETED)

;; Function const _Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() const [with _Tp = char; _Alloc = std::allocator<char>] (_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv, funcdef_no=3502, decl_uid=60602, cgraph_uid=1376, symbol_order=1398)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


const _Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() const [with _Tp = char; _Alloc = std::allocator<char>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":119 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [85 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":120 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_vector.h":120 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":120 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char] (_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv, funcdef_no=3503, decl_uid=11174, cgraph_uid=1377, symbol_order=1399)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 17: point = 0, n_alt = 0
  BB 4
   Insn 33: point = 0, n_alt = -1
   Insn 32: point = 0, n_alt = -2
   Insn 28: point = 1, n_alt = -2
   Insn 25: point = 3, n_alt = -2
   Insn 24: point = 5, n_alt = -2
   Insn 23: point = 6, n_alt = 0
   Insn 22: point = 6, n_alt = -2
   Insn 21: point = 7, n_alt = 3
  BB 2
   Insn 15: point = 8, n_alt = -1
   Insn 14: point = 8, n_alt = 0
   Insn 13: point = 9, n_alt = 0
   Insn 12: point = 10, n_alt = 0
   Insn 11: point = 11, n_alt = -2
   Insn 10: point = 12, n_alt = 0
   Insn 9: point = 12, n_alt = -2
   Insn 8: point = 13, n_alt = 3
   Insn 4: point = 14, n_alt = 5
   Insn 3: point = 14, n_alt = 5
   Insn 2: point = 14, n_alt = 5
 r87: [10..11]
 r88: [8..9]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [6..7]
 r93: [4..5]
Compressing live ranges: from 14 to 14 - 100%
Ranges after the compression:
 r87: [10..11]
 r88: [8..9]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 25
changing reg in insn 28
changing reg in insn 28
changing reg in insn 32
changing reg in insn 8
changing reg in insn 9
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 11.
deleting insn with uid = 24.
deleting insn with uid = 25.
deleting insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns


_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={4d,1u} r2={4d} r4={4d,1u} r5={6d,3u} r6={1d,10u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 274{242d,32u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [95 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":99 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/ext/new_allocator.h":99 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 D.11177+0 S8 A64])
        (reg:DI 1 dx [ D.11177 ])) "/usr/include/c++/7/ext/new_allocator.h":99 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [95 this+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":101 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/ext/new_allocator.h":101 81 {*movdi_internal}
     (nil))
(call_insn 10 9 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv") [flags 0x3]  <function_decl 0x7f441b91f100 max_size>) [0 max_size S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/ext/new_allocator.h":101 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 10 13 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
            (reg:DI 0 ax [orig:87 _1 ] [87]))) "/usr/include/c++/7/ext/new_allocator.h":101 8 {*cmpdi_1}
     (nil))
(insn 13 12 14 2 (set (reg:QI 0 ax [orig:88 retval.21_6 ] [88])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/usr/include/c++/7/ext/new_allocator.h":101 613 {*setcc_qi}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 retval.21_6 ] [88])
            (const_int 0 [0]))) "/usr/include/c++/7/ext/new_allocator.h":101 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "/usr/include/c++/7/ext/new_allocator.h":101 617 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 3 (call (mem:QI (symbol_ref:DI ("_ZSt17__throw_bad_allocv") [flags 0x41]  <function_decl 0x7f441c1d2b00 __throw_bad_alloc>) [0 __throw_bad_alloc S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":102 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 18 17 19)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 92 93
(code_label 19 18 20 4 557 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 0 ax [92])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":111 81 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/ext/new_allocator.h":111 81 {*movdi_internal}
     (nil))
(call_insn 23 22 32 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7f441c511d00 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/ext/new_allocator.h":111 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 32 23 33 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/ext/new_allocator.h":112 81 {*movdi_internal}
     (nil))
(insn 33 32 35 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/ext/new_allocator.h":112 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 33 0 NOTE_INSN_DELETED)

;; Function std::move_iterator<_Iterator>::move_iterator(std::move_iterator<_Iterator>::iterator_type) [with _Iterator = char*] (_ZNSt13move_iteratorIPcEC2ES0_, funcdef_no=3505, decl_uid=68119, cgraph_uid=1379, symbol_order=1401)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = -1
   Insn 9: point = 0, n_alt = 5
   Insn 8: point = 1, n_alt = 3
   Insn 7: point = 2, n_alt = 3
   Insn 3: point = 3, n_alt = 5
   Insn 2: point = 3, n_alt = 5
 r87: [0..2]
 r88: [0..1]
Compressing live ranges: from 3 to 2 - 66%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns


std::move_iterator<_Iterator>::move_iterator(std::move_iterator<_Iterator>::iterator_type) [with _Iterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={2d,1u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,6u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{20d,13u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [107 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_iterator.h":1036 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __i+0 S8 A64])
        (reg:DI 4 si [ __i ])) "/usr/include/c++/7/bits/stl_iterator.h":1036 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [107 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1037 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __i+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1037 81 {*movdi_internal}
     (nil))
(insn 9 8 12 2 (set (mem/f:DI (reg/f:DI 0 ax [87]) [3 this_2(D)->_M_current+0 S8 A64])
        (reg/f:DI 1 dx [88])) "/usr/include/c++/7/bits/stl_iterator.h":1037 81 {*movdi_internal}
     (nil))
(insn 12 9 13 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_iterator.h":1037 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 13 12 0 NOTE_INSN_DELETED)

;; Function _ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*] (_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_, funcdef_no=3507, decl_uid=68541, cgraph_uid=1381, symbol_order=1403)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -2
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = -2
   Insn 11: point = 7, n_alt = 3
   Insn 10: point = 8, n_alt = 3
   Insn 9: point = 9, n_alt = 3
   Insn 8: point = 10, n_alt = 6
   Insn 4: point = 10, n_alt = 5
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [6..9]
 r90: [5..8]
 r91: [4..7]
Compressing live ranges: from 10 to 6 - 60%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 14
deleting insn with uid = 12.
deleting insn with uid = 16.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.


_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,9u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 120{96d,24u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [99 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":115 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [99 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_uninitialized.h":115 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_uninitialized.h":115 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [68 __assignable+0 S1 A8])
        (const_int 1 [0x1])) "/usr/include/c++/7/bits/stl_uninitialized.h":128 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":134 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 2 cx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [99 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":134 81 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [99 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":134 81 {*movdi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":134 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_uninitialized.h":134 81 {*movdi_internal}
     (nil))
(call_insn 15 14 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_") [flags 0x3]  <function_decl 0x7f4419019100 __uninit_copy>) [0 __uninit_copy S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":134 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 23 15 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_uninitialized.h":135 81 {*movdi_internal}
     (nil))
(insn 24 23 26 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":135 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function char* rapidxml::memory_pool<Ch>::allocate_raw(std::size_t) [with Ch = char] (_ZN8rapidxml11memory_poolIcE12allocate_rawEm, funcdef_no=3508, decl_uid=60360, cgraph_uid=1382, symbol_order=1404)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 4
   Insn 26: point = 0, n_alt = 0
   Insn 25: point = 0, n_alt = 4
   Insn 24: point = 0, n_alt = 4
   Insn 23: point = 0, n_alt = 0
   Insn 22: point = 0, n_alt = 4
  BB 6
   Insn 46: point = 0, n_alt = -1
   Insn 45: point = 0, n_alt = -2
   Insn 41: point = 1, n_alt = -2
   Insn 38: point = 3, n_alt = 3
  BB 5
   Insn 35: point = 4, n_alt = 5
   Insn 34: point = 5, n_alt = -2
   Insn 33: point = 7, n_alt = -2
   Insn 32: point = 8, n_alt = 0
   Insn 31: point = 8, n_alt = -2
   Insn 30: point = 9, n_alt = 3
  BB 3
   Insn 20: point = 10, n_alt = -1
   Insn 19: point = 10, n_alt = 1
   Insn 18: point = 10, n_alt = 5
   Insn 17: point = 11, n_alt = -2
   Insn 16: point = 12, n_alt = 0
   Insn 15: point = 13, n_alt = -2
   Insn 14: point = 14, n_alt = 3
   Insn 13: point = 15, n_alt = 3
   Insn 12: point = 17, n_alt = 3
  BB 2
   Insn 10: point = 18, n_alt = -1
   Insn 9: point = 18, n_alt = 0
   Insn 8: point = 19, n_alt = 3
   Insn 7: point = 21, n_alt = 3
   Insn 3: point = 22, n_alt = 5
   Insn 2: point = 22, n_alt = 5
 r87: [18..19]
 r88: [12..15]
 r89: [8..9]
 r90: [4..5]
 r91: [10..11]
 r92: [2..3]
 r93: [0..1]
 r94: [20..21]
 r95: [16..17]
 r96: [13..14]
 r97: [6..7]
Compressing live ranges: from 22 to 20 - 90%
Ranges after the compression:
 r87: [16..17]
 r88: [12..13]
 r89: [8..9]
 r90: [4..5]
 r91: [10..11]
 r92: [2..3]
 r93: [0..1]
 r94: [18..19]
 r95: [14..15]
 r96: [12..13]
 r97: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 16
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 17
changing reg in insn 18
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 45
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 33
changing reg in insn 34
deleting insn with uid = 17.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns


char* rapidxml::memory_pool<Ch>::allocate_raw(std::size_t) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,10u} r1={6d,2u} r2={5d,1u} r4={5d,2u} r5={7d,4u} r6={1d,16u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 297{250d,47u,0e} in 26{23 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 94
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":579 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size+0 S8 A64])
        (reg:DI 4 si [ size ])) "libs/src/../include/rapidxml/rapidxml.hpp":579 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":583 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 65560 [0x10018])) [0 this_6(D)->m_alloc_func+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":583 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":583 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":583 617 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 91 95 96
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [62 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":585 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f/j:DI (plus:DI (reg/f:DI 0 ax [95])
                (const_int 65560 [0x10018])) [0 this_6(D)->m_alloc_func+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":585 81 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [96])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":585 81 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (reg:DI 1 dx [96])) "libs/src/../include/rapidxml/rapidxml.hpp":585 81 {*movdi_internal}
     (nil))
(call_insn 16 15 18 3 (set (reg:DI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:88 _2 ] [88]) [0 *_2 S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":585 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 16 19 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [9 memory+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 _13 ] [91])) "libs/src/../include/rapidxml/rapidxml.hpp":585 81 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [9 memory+0 S8 A64])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":586 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":586 617 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:DI 2 cx)
        (symbol_ref:DI ("_ZZN8rapidxml11memory_poolIcE12allocate_rawEmE19__PRETTY_FUNCTION__") [flags 0x2]  <var_decl 0x7f44190182d0 __PRETTY_FUNCTION__>)) "libs/src/../include/rapidxml/rapidxml.hpp":586 81 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 1 dx)
        (const_int 586 [0x24a])) "libs/src/../include/rapidxml/rapidxml.hpp":586 82 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f44188d42d0 *.LC10>)) "libs/src/../include/rapidxml/rapidxml.hpp":586 81 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f4418730870 *.LC24>)) "libs/src/../include/rapidxml/rapidxml.hpp":586 81 {*movdi_internal}
     (nil))
(call_insn 26 25 27 4 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f441a7d0b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":586 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 28)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 97
(code_label 28 27 29 5 563 (nil) [1 uses])
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:DI 0 ax [orig:89 size.42_8 ] [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 size+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":590 81 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:89 size.42_8 ] [89])) "libs/src/../include/rapidxml/rapidxml.hpp":590 81 {*movdi_internal}
     (nil))
(call_insn 32 31 35 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znam") [flags 0x41]  <function_decl 0x7f441c511e00 operator new []>) [0 operator new [] S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":590 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 32 36 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [9 memory+0 S8 A64])
        (reg/f:DI 0 ax [orig:90 _10 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":590 81 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 92 93
(code_label 36 35 37 6 564 (nil) [1 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 45 6 (set (reg/f:DI 0 ax [orig:92 _16 ] [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [9 memory+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":596 81 {*movdi_internal}
     (nil))
(insn 45 38 46 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:93 <retval> ] [93])) "libs/src/../include/rapidxml/rapidxml.hpp":597 81 {*movdi_internal}
     (nil))
(insn 46 45 48 6 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":597 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 48 46 0 NOTE_INSN_DELETED)

;; Function rapidxml::xml_attribute<Ch>::xml_attribute() [with Ch = char] (_ZN8rapidxml13xml_attributeIcEC2Ev, funcdef_no=3510, decl_uid=61437, cgraph_uid=1384, symbol_order=1406)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


rapidxml::xml_attribute<Ch>::xml_attribute() [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "libs/src/../include/rapidxml/rapidxml.hpp":810 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [53 this+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":811 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "libs/src/../include/rapidxml/rapidxml.hpp":811 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml8xml_baseIcEC2Ev") [flags 0x3]  <function_decl 0x7f4419852300 __base_ctor >) [0 __base_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":811 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":812 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pure_pred<'\''>; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_25attribute_value_pure_predILc39EEELi0EEEvRPc, funcdef_no=3513, decl_uid=68590, cgraph_uid=1387, symbol_order=1409)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pure_pred<'\''>; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 569 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE25attribute_value_pure_predILc39EE4testEc") [flags 0x3]  <function_decl 0x7f4419019800 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.73_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.73_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 568 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::attribute_value_pred<Quote>::test(Ch) [with Ch Quote = '\''; Ch = char] (_ZN8rapidxml12xml_documentIcE20attribute_value_predILc39EE4testEc, funcdef_no=3514, decl_uid=68595, cgraph_uid=1388, symbol_order=1410)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::attribute_value_pred<Quote>::test(Ch) [with Ch Quote = '\''; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.76_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1488 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.76_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1488 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1488 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE23lookup_attribute_data_1E") [flags 0x2]  <var_decl 0x7f441a7e56c0 lookup_attribute_data_1>)) "libs/src/../include/rapidxml/rapidxml.hpp":1488 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_attribute_data_1 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1488 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1492 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1492 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::insert_coded_character(Ch*&, long unsigned int) [with int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm, funcdef_no=3515, decl_uid=68605, cgraph_uid=1389, symbol_order=1411)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=177 from oldreg=92, assigning class GENERAL_REGS to r177
   31: {r177:QI=r177:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r92:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  170: r177:QI=r92:QI
    Inserting insn reload after:
  171: r93:QI=r177:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=178 from oldreg=97, assigning class GENERAL_REGS to r178
   40: {r178:QI=r178:QI|0xffffffffffffffc0;clobber flags:CC;}
      REG_DEAD r97:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  172: r178:QI=r97:QI
    Inserting insn reload after:
  173: r98:QI=r178:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 44:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=179 from oldreg=104, assigning class GENERAL_REGS to r179
   60: {r179:QI=r179:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r104:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  174: r179:QI=r104:QI
    Inserting insn reload after:
  175: r105:QI=r179:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 65:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=180 from oldreg=110, assigning class GENERAL_REGS to r180
   70: {r180:QI=r180:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r110:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  176: r180:QI=r110:QI
    Inserting insn reload after:
  177: r111:QI=r180:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=181 from oldreg=115, assigning class GENERAL_REGS to r181
   79: {r181:QI=r181:QI|0xffffffffffffffe0;clobber flags:CC;}
      REG_DEAD r115:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  178: r181:QI=r115:QI
    Inserting insn reload after:
  179: r116:QI=r181:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 83:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 88:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=182 from oldreg=122, assigning class GENERAL_REGS to r182
   99: {r182:QI=r182:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r122:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  180: r182:QI=r122:QI
    Inserting insn reload after:
  181: r123:QI=r182:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 104:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=183 from oldreg=128, assigning class GENERAL_REGS to r183
  109: {r183:QI=r183:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r128:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  182: r183:QI=r128:QI
    Inserting insn reload after:
  183: r129:QI=r183:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 114:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=184 from oldreg=134, assigning class GENERAL_REGS to r184
  119: {r184:QI=r184:QI|0xffffffffffffff80;clobber flags:CC;}
      REG_DEAD r134:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  184: r184:QI=r134:QI
    Inserting insn reload after:
  185: r135:QI=r184:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 124:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =q  (1) %0  (2) qmn {*iorqi_1}
      Creating newreg=185 from oldreg=139, assigning class GENERAL_REGS to r185
  128: {r185:QI=r185:QI|0xfffffffffffffff0;clobber flags:CC;}
      REG_DEAD r139:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  186: r185:QI=r139:QI
    Inserting insn reload after:
  187: r140:QI=r185:QI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 132:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 137:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 149:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 152:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 153:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 10
   Insn 155: point = 0, n_alt = 0
   Insn 154: point = 0, n_alt = -2
   Insn 153: point = 1, n_alt = 4
   Insn 152: point = 1, n_alt = 4
   Insn 151: point = 1, n_alt = 0
   Insn 150: point = 1, n_alt = -2
   Insn 149: point = 1, n_alt = 4
   Insn 148: point = 1, n_alt = -2
   Insn 147: point = 2, n_alt = 3
   Insn 146: point = 4, n_alt = 3
   Insn 145: point = 5, n_alt = -2
   Insn 144: point = 7, n_alt = -2
   Insn 143: point = 8, n_alt = 0
   Insn 142: point = 8, n_alt = 2
  BB 11
  BB 9
   Insn 167: point = 8, n_alt = -1
   Insn 137: point = 8, n_alt = 5
   Insn 136: point = 9, n_alt = 3
   Insn 135: point = 10, n_alt = 3
   Insn 134: point = 12, n_alt = 3
   Insn 133: point = 14, n_alt = 3
   Insn 132: point = 15, n_alt = 6
   Insn 131: point = 16, n_alt = -2
   Insn 130: point = 18, n_alt = 3
   Insn 129: point = 20, n_alt = 3
   Insn 187: point = 21, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1
   Insn 128: point = 23, n_alt = 0
   Insn 186: point = 23, n_alt = -2
	Hard reg 1 is preferable by r185 with profit 1
	Hard reg 0 is preferable by r185 with profit 1
   Insn 127: point = 25, n_alt = 0
   Insn 126: point = 27, n_alt = 3
   Insn 125: point = 28, n_alt = 0
   Insn 124: point = 28, n_alt = 6
   Insn 123: point = 29, n_alt = -2
   Insn 122: point = 31, n_alt = 0
   Insn 121: point = 33, n_alt = 3
   Insn 120: point = 35, n_alt = 3
   Insn 185: point = 36, n_alt = -2
	Hard reg 1 is preferable by r184 with profit 1
   Insn 119: point = 38, n_alt = 0
   Insn 184: point = 38, n_alt = -2
	Hard reg 1 is preferable by r184 with profit 1
	Hard reg 0 is preferable by r184 with profit 1
   Insn 118: point = 40, n_alt = 0
   Insn 117: point = 42, n_alt = 0
   Insn 116: point = 44, n_alt = 3
   Insn 115: point = 45, n_alt = 0
   Insn 114: point = 45, n_alt = 6
   Insn 113: point = 46, n_alt = -2
   Insn 112: point = 48, n_alt = 0
   Insn 111: point = 50, n_alt = 3
   Insn 110: point = 52, n_alt = 3
   Insn 183: point = 53, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1
   Insn 109: point = 55, n_alt = 0
   Insn 182: point = 55, n_alt = -2
	Hard reg 1 is preferable by r183 with profit 1
	Hard reg 0 is preferable by r183 with profit 1
   Insn 108: point = 57, n_alt = 0
   Insn 107: point = 59, n_alt = 0
   Insn 106: point = 61, n_alt = 3
   Insn 105: point = 62, n_alt = 0
   Insn 104: point = 62, n_alt = 6
   Insn 103: point = 63, n_alt = -2
   Insn 102: point = 65, n_alt = 0
   Insn 101: point = 67, n_alt = 3
   Insn 100: point = 69, n_alt = 3
   Insn 181: point = 70, n_alt = -2
	Hard reg 1 is preferable by r182 with profit 1
   Insn 99: point = 72, n_alt = 0
   Insn 180: point = 72, n_alt = -2
	Hard reg 1 is preferable by r182 with profit 1
	Hard reg 0 is preferable by r182 with profit 1
   Insn 98: point = 74, n_alt = 0
   Insn 97: point = 76, n_alt = 0
   Insn 96: point = 78, n_alt = 3
  BB 8
   Insn 94: point = 79, n_alt = -1
   Insn 93: point = 79, n_alt = 0
  BB 3
   Insn 161: point = 79, n_alt = -1
   Insn 20: point = 79, n_alt = 5
   Insn 19: point = 80, n_alt = 3
   Insn 18: point = 81, n_alt = 3
   Insn 17: point = 83, n_alt = 3
   Insn 16: point = 85, n_alt = 3
   Insn 15: point = 86, n_alt = 6
   Insn 14: point = 87, n_alt = 0
   Insn 13: point = 89, n_alt = 3
   Insn 12: point = 90, n_alt = 3
   Insn 11: point = 92, n_alt = 3
  BB 5
   Insn 163: point = 93, n_alt = -1
   Insn 49: point = 93, n_alt = 5
   Insn 48: point = 94, n_alt = 3
   Insn 47: point = 95, n_alt = 3
   Insn 46: point = 97, n_alt = 3
   Insn 45: point = 99, n_alt = 3
   Insn 44: point = 100, n_alt = 6
   Insn 43: point = 101, n_alt = -2
   Insn 42: point = 103, n_alt = 3
   Insn 41: point = 105, n_alt = 3
   Insn 173: point = 106, n_alt = -2
	Hard reg 1 is preferable by r178 with profit 1
   Insn 40: point = 108, n_alt = 0
   Insn 172: point = 108, n_alt = -2
	Hard reg 1 is preferable by r178 with profit 1
	Hard reg 0 is preferable by r178 with profit 1
   Insn 39: point = 110, n_alt = 0
   Insn 38: point = 112, n_alt = 3
   Insn 37: point = 113, n_alt = 0
   Insn 36: point = 113, n_alt = 6
   Insn 35: point = 114, n_alt = -2
   Insn 34: point = 116, n_alt = 0
   Insn 33: point = 118, n_alt = 3
   Insn 32: point = 120, n_alt = 3
   Insn 171: point = 121, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1
   Insn 31: point = 123, n_alt = 0
   Insn 170: point = 123, n_alt = -2
	Hard reg 1 is preferable by r177 with profit 1
	Hard reg 0 is preferable by r177 with profit 1
   Insn 30: point = 125, n_alt = 0
   Insn 29: point = 127, n_alt = 0
   Insn 28: point = 129, n_alt = 3
  BB 7
   Insn 165: point = 130, n_alt = -1
   Insn 88: point = 130, n_alt = 5
   Insn 87: point = 131, n_alt = 3
   Insn 86: point = 132, n_alt = 3
   Insn 85: point = 134, n_alt = 3
   Insn 84: point = 136, n_alt = 3
   Insn 83: point = 137, n_alt = 6
   Insn 82: point = 138, n_alt = -2
   Insn 81: point = 140, n_alt = 3
   Insn 80: point = 142, n_alt = 3
   Insn 179: point = 143, n_alt = -2
	Hard reg 1 is preferable by r181 with profit 1
   Insn 79: point = 145, n_alt = 0
   Insn 178: point = 145, n_alt = -2
	Hard reg 1 is preferable by r181 with profit 1
	Hard reg 0 is preferable by r181 with profit 1
   Insn 78: point = 147, n_alt = 0
   Insn 77: point = 149, n_alt = 3
   Insn 76: point = 150, n_alt = 0
   Insn 75: point = 150, n_alt = 6
   Insn 74: point = 151, n_alt = -2
   Insn 73: point = 153, n_alt = 0
   Insn 72: point = 155, n_alt = 3
   Insn 71: point = 157, n_alt = 3
   Insn 177: point = 158, n_alt = -2
	Hard reg 1 is preferable by r180 with profit 1
   Insn 70: point = 160, n_alt = 0
   Insn 176: point = 160, n_alt = -2
	Hard reg 1 is preferable by r180 with profit 1
	Hard reg 0 is preferable by r180 with profit 1
   Insn 69: point = 162, n_alt = 0
   Insn 68: point = 164, n_alt = 0
   Insn 67: point = 166, n_alt = 3
   Insn 66: point = 167, n_alt = 0
   Insn 65: point = 167, n_alt = 6
   Insn 64: point = 168, n_alt = -2
   Insn 63: point = 170, n_alt = 0
   Insn 62: point = 172, n_alt = 3
   Insn 61: point = 174, n_alt = 3
   Insn 175: point = 175, n_alt = -2
	Hard reg 1 is preferable by r179 with profit 1
   Insn 60: point = 177, n_alt = 0
   Insn 174: point = 177, n_alt = -2
	Hard reg 1 is preferable by r179 with profit 1
	Hard reg 0 is preferable by r179 with profit 1
   Insn 59: point = 179, n_alt = 0
   Insn 58: point = 181, n_alt = 0
   Insn 57: point = 183, n_alt = 3
  BB 6
   Insn 55: point = 184, n_alt = -1
   Insn 54: point = 184, n_alt = 0
  BB 4
   Insn 26: point = 184, n_alt = -1
   Insn 25: point = 184, n_alt = 0
  BB 2
   Insn 9: point = 184, n_alt = -1
   Insn 8: point = 184, n_alt = 0
   Insn 3: point = 184, n_alt = 5
   Insn 2: point = 184, n_alt = 5
 r87: [86..90]
 r88: [86..87]
 r89: [82..83]
 r90: [79..81]
 r91: [126..127]
 r92: [124..125]
 r93: [115..121]
 r94: [117..118]
 r95: [113..116]
 r96: [113..114]
 r97: [109..110]
 r98: [102..106]
 r99: [100..103]
 r100: [100..101]
 r101: [96..97]
 r102: [93..95]
 r103: [180..181]
 r104: [178..179]
 r105: [169..175]
 r106: [171..172]
 r107: [167..170]
 r108: [167..168]
 r109: [163..164]
 r110: [161..162]
 r111: [152..158]
 r112: [154..155]
 r113: [150..153]
 r114: [150..151]
 r115: [146..147]
 r116: [139..143]
 r117: [137..140]
 r118: [137..138]
 r119: [133..134]
 r120: [130..132]
 r121: [75..76]
 r122: [73..74]
 r123: [64..70]
 r124: [66..67]
 r125: [62..65]
 r126: [62..63]
 r127: [58..59]
 r128: [56..57]
 r129: [47..53]
 r130: [49..50]
 r131: [45..48]
 r132: [45..46]
 r133: [41..42]
 r134: [39..40]
 r135: [30..36]
 r136: [32..33]
 r137: [28..31]
 r138: [28..29]
 r139: [24..25]
 r140: [17..21]
 r141: [15..18]
 r142: [15..16]
 r143: [11..12]
 r144: [8..10]
 r145: [1..2]
 r146: [0..5]
 r147: [91..92]
 r148: [88..89]
 r149: [84..85]
 r150: [79..80]
 r151: [128..129]
 r152: [119..120]
 r153: [111..112]
 r154: [104..105]
 r155: [98..99]
 r156: [93..94]
 r157: [182..183]
 r158: [173..174]
 r159: [165..166]
 r160: [156..157]
 r161: [148..149]
 r162: [141..142]
 r163: [135..136]
 r164: [130..131]
 r165: [77..78]
 r166: [68..69]
 r167: [60..61]
 r168: [51..52]
 r169: [43..44]
 r170: [34..35]
 r171: [26..27]
 r172: [19..20]
 r173: [13..14]
 r174: [8..9]
 r175: [6..7]
 r176: [3..4]
 r177: [122..123]
 r178: [107..108]
 r179: [176..177]
 r180: [159..160]
 r181: [144..145]
 r182: [71..72]
 r183: [54..55]
 r184: [37..38]
 r185: [22..23]
Compressing live ranges: from 184 to 168 - 91%
Ranges after the compression:
 r87: [78..81]
 r88: [78..79]
 r89: [74..75]
 r90: [72..73]
 r91: [114..115]
 r92: [112..113]
 r93: [104..109]
 r94: [106..107]
 r95: [102..105]
 r96: [102..103]
 r97: [98..99]
 r98: [92..95]
 r99: [90..93]
 r100: [90..91]
 r101: [86..87]
 r102: [84..85]
 r103: [164..165]
 r104: [162..163]
 r105: [154..159]
 r106: [156..157]
 r107: [152..155]
 r108: [152..153]
 r109: [148..149]
 r110: [146..147]
 r111: [138..143]
 r112: [140..141]
 r113: [136..139]
 r114: [136..137]
 r115: [132..133]
 r116: [126..129]
 r117: [124..127]
 r118: [124..125]
 r119: [120..121]
 r120: [118..119]
 r121: [68..69]
 r122: [66..67]
 r123: [58..63]
 r124: [60..61]
 r125: [56..59]
 r126: [56..57]
 r127: [52..53]
 r128: [50..51]
 r129: [42..47]
 r130: [44..45]
 r131: [40..43]
 r132: [40..41]
 r133: [36..37]
 r134: [34..35]
 r135: [26..31]
 r136: [28..29]
 r137: [24..27]
 r138: [24..25]
 r139: [20..21]
 r140: [14..17]
 r141: [12..15]
 r142: [12..13]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [0..3]
 r147: [82..83]
 r148: [80..81]
 r149: [76..77]
 r150: [72..73]
 r151: [116..117]
 r152: [108..109]
 r153: [100..101]
 r154: [94..95]
 r155: [88..89]
 r156: [84..85]
 r157: [166..167]
 r158: [158..159]
 r159: [150..151]
 r160: [142..143]
 r161: [134..135]
 r162: [128..129]
 r163: [122..123]
 r164: [118..119]
 r165: [70..71]
 r166: [62..63]
 r167: [54..55]
 r168: [46..47]
 r169: [38..39]
 r170: [30..31]
 r171: [22..23]
 r172: [16..17]
 r173: [10..11]
 r174: [6..7]
 r175: [4..5]
 r176: [2..3]
 r177: [110..111]
 r178: [96..97]
 r179: [160..161]
 r180: [144..145]
 r181: [130..131]
 r182: [64..65]
 r183: [48..49]
 r184: [32..33]
 r185: [18..19]

********** Assignment #1: **********

	 Assigning to 177 (cl=GENERAL_REGS, orig=92, freq=3, tfirst=177, tfreq=3)...
	   Assign 0 to reload r177 (freq=3)
	 Assigning to 178 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=178, tfreq=3)...
	   Assign 0 to reload r178 (freq=3)
	 Assigning to 179 (cl=GENERAL_REGS, orig=104, freq=3, tfirst=179, tfreq=3)...
	   Assign 0 to reload r179 (freq=3)
	 Assigning to 180 (cl=GENERAL_REGS, orig=110, freq=3, tfirst=180, tfreq=3)...
	   Assign 0 to reload r180 (freq=3)
	 Assigning to 181 (cl=GENERAL_REGS, orig=115, freq=3, tfirst=181, tfreq=3)...
	   Assign 0 to reload r181 (freq=3)
	 Assigning to 182 (cl=GENERAL_REGS, orig=122, freq=3, tfirst=182, tfreq=3)...
	   Assign 0 to reload r182 (freq=3)
	 Assigning to 183 (cl=GENERAL_REGS, orig=128, freq=3, tfirst=183, tfreq=3)...
	   Assign 0 to reload r183 (freq=3)
	 Assigning to 184 (cl=GENERAL_REGS, orig=134, freq=3, tfirst=184, tfreq=3)...
	   Assign 0 to reload r184 (freq=3)
	 Assigning to 185 (cl=GENERAL_REGS, orig=139, freq=3, tfirst=185, tfreq=3)...
	   Assign 0 to reload r185 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 39
changing reg in insn 43
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 74
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 82
changing reg in insn 81
changing reg in insn 83
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 103
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 123
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 131
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 147
changing reg in insn 148
changing reg in insn 145
changing reg in insn 154
changing reg in insn 150
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
deleting insn with uid = 170.
deleting insn with uid = 35.
deleting insn with uid = 172.
deleting insn with uid = 43.
deleting insn with uid = 174.
deleting insn with uid = 64.
deleting insn with uid = 176.
deleting insn with uid = 74.
deleting insn with uid = 178.
deleting insn with uid = 82.
deleting insn with uid = 180.
deleting insn with uid = 103.
deleting insn with uid = 182.
deleting insn with uid = 113.
deleting insn with uid = 184.
deleting insn with uid = 123.
deleting insn with uid = 186.
deleting insn with uid = 131.
deleting insn with uid = 144.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 151.
verify found no changes in insn with uid = 155.


static void rapidxml::xml_document<Ch>::insert_coded_character(Ch*&, long unsigned int) [with int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={77d,74u} r1={21d,17u} r2={4d} r3={1d,2u} r4={6d,3u} r5={7d,4u} r6={1d,58u} r7={1d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={38d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 542{365d,177u,0e} in 133{130 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1511 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (reg:DI 4 si [ code ])) "libs/src/../include/rapidxml/rapidxml.hpp":1511 81 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
            (const_int 127 [0x7f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1523 8 {*cmpdi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1523 617 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 147 148 149 150
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1525 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:87 _5 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [147]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1525 81 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 1 dx [148])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1525 81 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:QI 1 dx [orig:88 _6 ] [88])
        (reg:QI 1 dx [148])) "libs/src/../include/rapidxml/rapidxml.hpp":1525 84 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (mem:QI (reg/f:DI 0 ax [orig:87 _5 ] [87]) [0 *_5+0 S1 A8])
        (reg:QI 1 dx [orig:88 _6 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1525 84 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1526 81 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [orig:89 _7 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [149]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1526 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 1 dx [orig:90 _8 ] [90])
                (plus:DI (reg/f:DI 0 ax [orig:89 _7 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1526 218 {*adddi_1}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1526 81 {*movdi_internal}
     (nil))
(insn 20 19 161 3 (set (mem/f:DI (reg/f:DI 0 ax [150]) [3 *text_65(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:90 _8 ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1526 81 {*movdi_internal}
     (nil))
(jump_insn 161 20 162 3 (set (pc)
        (label_ref 159)) "libs/src/../include/rapidxml/rapidxml.hpp":1554 649 {jump}
     (nil)
 -> 159)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 23)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 23 162 24 4 573 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
            (const_int 2047 [0x7ff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1528 8 {*cmpdi_1}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1528 617 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 98 99 100 101 102 151 152 153 154 155 156
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:DI 0 ax [151])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 81 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:QI 0 ax [orig:91 _9 ] [91])
        (reg:QI 0 ax [151])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 84 {*movqi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:QI 0 ax [orig:92 _10 ] [92])
                (and:QI (reg:QI 0 ax [orig:91 _9 ] [91])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1530 392 {*andqi_1}
     (nil))
(insn 31 30 171 5 (parallel [
            (set (reg:QI 0 ax [orig:92 _10 ] [92])
                (ior:QI (reg:QI 0 ax [orig:92 _10 ] [92])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1530 423 {*iorqi_1}
     (nil))
(insn 171 31 32 5 (set (reg:QI 1 dx [orig:93 _11 ] [93])
        (reg:QI 0 ax [orig:92 _10 ] [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 84 {*movqi_internal}
     (nil))
(insn 32 171 33 5 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 81 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg/f:DI 0 ax [orig:94 _12 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [152]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 81 {*movdi_internal}
     (nil))
(insn 34 33 36 5 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _13 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:94 _12 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1530 218 {*adddi_1}
     (nil))
(insn 36 34 37 5 (set (mem:QI (reg/f:DI 0 ax [orig:95 _13 ] [95]) [0 *_13+0 S1 A8])
        (reg:QI 1 dx [orig:96 _14 ] [96])) "libs/src/../include/rapidxml/rapidxml.hpp":1530 84 {*movqi_internal}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1530 546 {*lshrdi3_1}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [153])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 81 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:QI 0 ax [orig:97 _15 ] [97])
        (reg:QI 0 ax [153])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 84 {*movqi_internal}
     (nil))
(insn 40 39 173 5 (parallel [
            (set (reg:QI 0 ax [orig:97 _15 ] [97])
                (ior:QI (reg:QI 0 ax [orig:97 _15 ] [97])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1531 423 {*iorqi_1}
     (nil))
(insn 173 40 41 5 (set (reg:QI 1 dx [orig:98 _16 ] [98])
        (reg:QI 0 ax [orig:97 _15 ] [97])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 84 {*movqi_internal}
     (nil))
(insn 41 173 42 5 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 81 {*movdi_internal}
     (nil))
(insn 42 41 44 5 (set (reg/f:DI 0 ax [orig:99 _17 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [154]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 81 {*movdi_internal}
     (nil))
(insn 44 42 45 5 (set (mem:QI (reg/f:DI 0 ax [orig:99 _17 ] [99]) [0 *_17+0 S1 A8])
        (reg:QI 1 dx [orig:100 _18 ] [100])) "libs/src/../include/rapidxml/rapidxml.hpp":1531 84 {*movqi_internal}
     (nil))
(insn 45 44 46 5 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1532 81 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [orig:101 _19 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [155]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1532 81 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _20 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 _19 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1532 218 {*adddi_1}
     (nil))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1532 81 {*movdi_internal}
     (nil))
(insn 49 48 163 5 (set (mem/f:DI (reg/f:DI 0 ax [156]) [3 *text_65(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:102 _20 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1532 81 {*movdi_internal}
     (nil))
(jump_insn 163 49 164 5 (set (pc)
        (label_ref 159)) "libs/src/../include/rapidxml/rapidxml.hpp":1554 649 {jump}
     (nil)
 -> 159)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 52)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 52 164 53 6 575 (nil) [1 uses])
(note 53 52 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
            (const_int 65535 [0xffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1534 8 {*cmpdi_1}
     (nil))
(jump_insn 55 54 56 6 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1534 617 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 157 158 159 160 161 162 163 164
(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 7 (set (reg:DI 0 ax [157])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 81 {*movdi_internal}
     (nil))
(insn 58 57 59 7 (set (reg:QI 0 ax [orig:103 _21 ] [103])
        (reg:QI 0 ax [157])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 84 {*movqi_internal}
     (nil))
(insn 59 58 60 7 (parallel [
            (set (reg:QI 0 ax [orig:104 _22 ] [104])
                (and:QI (reg:QI 0 ax [orig:103 _21 ] [103])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1536 392 {*andqi_1}
     (nil))
(insn 60 59 175 7 (parallel [
            (set (reg:QI 0 ax [orig:104 _22 ] [104])
                (ior:QI (reg:QI 0 ax [orig:104 _22 ] [104])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1536 423 {*iorqi_1}
     (nil))
(insn 175 60 61 7 (set (reg:QI 1 dx [orig:105 _23 ] [105])
        (reg:QI 0 ax [orig:104 _22 ] [104])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 84 {*movqi_internal}
     (nil))
(insn 61 175 62 7 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 81 {*movdi_internal}
     (nil))
(insn 62 61 63 7 (set (reg/f:DI 0 ax [orig:106 _24 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [158]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 81 {*movdi_internal}
     (nil))
(insn 63 62 65 7 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _25 ] [107])
                (plus:DI (reg/f:DI 0 ax [orig:106 _24 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1536 218 {*adddi_1}
     (nil))
(insn 65 63 66 7 (set (mem:QI (reg/f:DI 0 ax [orig:107 _25 ] [107]) [0 *_25+0 S1 A8])
        (reg:QI 1 dx [orig:108 _26 ] [108])) "libs/src/../include/rapidxml/rapidxml.hpp":1536 84 {*movqi_internal}
     (nil))
(insn 66 65 67 7 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1536 546 {*lshrdi3_1}
     (nil))
(insn 67 66 68 7 (set (reg:DI 0 ax [159])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 81 {*movdi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:QI 0 ax [orig:109 _27 ] [109])
        (reg:QI 0 ax [159])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 84 {*movqi_internal}
     (nil))
(insn 69 68 70 7 (parallel [
            (set (reg:QI 0 ax [orig:110 _28 ] [110])
                (and:QI (reg:QI 0 ax [orig:109 _27 ] [109])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1537 392 {*andqi_1}
     (nil))
(insn 70 69 177 7 (parallel [
            (set (reg:QI 0 ax [orig:110 _28 ] [110])
                (ior:QI (reg:QI 0 ax [orig:110 _28 ] [110])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1537 423 {*iorqi_1}
     (nil))
(insn 177 70 71 7 (set (reg:QI 1 dx [orig:111 _29 ] [111])
        (reg:QI 0 ax [orig:110 _28 ] [110])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 84 {*movqi_internal}
     (nil))
(insn 71 177 72 7 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 81 {*movdi_internal}
     (nil))
(insn 72 71 73 7 (set (reg/f:DI 0 ax [orig:112 _30 ] [112])
        (mem/f:DI (reg/f:DI 0 ax [160]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 81 {*movdi_internal}
     (nil))
(insn 73 72 75 7 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _31 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:112 _30 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1537 218 {*adddi_1}
     (nil))
(insn 75 73 76 7 (set (mem:QI (reg/f:DI 0 ax [orig:113 _31 ] [113]) [0 *_31+0 S1 A8])
        (reg:QI 1 dx [orig:114 _32 ] [114])) "libs/src/../include/rapidxml/rapidxml.hpp":1537 84 {*movqi_internal}
     (nil))
(insn 76 75 77 7 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1537 546 {*lshrdi3_1}
     (nil))
(insn 77 76 78 7 (set (reg:DI 0 ax [161])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 81 {*movdi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:QI 0 ax [orig:115 _33 ] [115])
        (reg:QI 0 ax [161])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 84 {*movqi_internal}
     (nil))
(insn 79 78 179 7 (parallel [
            (set (reg:QI 0 ax [orig:115 _33 ] [115])
                (ior:QI (reg:QI 0 ax [orig:115 _33 ] [115])
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1538 423 {*iorqi_1}
     (nil))
(insn 179 79 80 7 (set (reg:QI 1 dx [orig:116 _34 ] [116])
        (reg:QI 0 ax [orig:115 _33 ] [115])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 84 {*movqi_internal}
     (nil))
(insn 80 179 81 7 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 81 {*movdi_internal}
     (nil))
(insn 81 80 83 7 (set (reg/f:DI 0 ax [orig:117 _35 ] [117])
        (mem/f:DI (reg/f:DI 0 ax [162]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 81 {*movdi_internal}
     (nil))
(insn 83 81 84 7 (set (mem:QI (reg/f:DI 0 ax [orig:117 _35 ] [117]) [0 *_35+0 S1 A8])
        (reg:QI 1 dx [orig:118 _36 ] [118])) "libs/src/../include/rapidxml/rapidxml.hpp":1538 84 {*movqi_internal}
     (nil))
(insn 84 83 85 7 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1539 81 {*movdi_internal}
     (nil))
(insn 85 84 86 7 (set (reg/f:DI 0 ax [orig:119 _37 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [163]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1539 81 {*movdi_internal}
     (nil))
(insn 86 85 87 7 (parallel [
            (set (reg/f:DI 1 dx [orig:120 _38 ] [120])
                (plus:DI (reg/f:DI 0 ax [orig:119 _37 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1539 218 {*adddi_1}
     (nil))
(insn 87 86 88 7 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1539 81 {*movdi_internal}
     (nil))
(insn 88 87 165 7 (set (mem/f:DI (reg/f:DI 0 ax [164]) [3 *text_65(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:120 _38 ] [120])) "libs/src/../include/rapidxml/rapidxml.hpp":1539 81 {*movdi_internal}
     (nil))
(jump_insn 165 88 166 7 (set (pc)
        (label_ref 159)) "libs/src/../include/rapidxml/rapidxml.hpp":1554 649 {jump}
     (nil)
 -> 159)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 166 165 91)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 91 166 92 8 576 (nil) [1 uses])
(note 92 91 93 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 8 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
            (const_int 1114111 [0x10ffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1541 8 {*cmpdi_1}
     (nil))
(jump_insn 94 93 95 8 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 140)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1541 617 {*jcc_1}
     (nil)
 -> 140)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 165 166 167 168 169 170 171 172 173 174
(note 95 94 96 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 9 (set (reg:DI 0 ax [165])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 81 {*movdi_internal}
     (nil))
(insn 97 96 98 9 (set (reg:QI 0 ax [orig:121 _39 ] [121])
        (reg:QI 0 ax [165])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 84 {*movqi_internal}
     (nil))
(insn 98 97 99 9 (parallel [
            (set (reg:QI 0 ax [orig:122 _40 ] [122])
                (and:QI (reg:QI 0 ax [orig:121 _39 ] [121])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1543 392 {*andqi_1}
     (nil))
(insn 99 98 181 9 (parallel [
            (set (reg:QI 0 ax [orig:122 _40 ] [122])
                (ior:QI (reg:QI 0 ax [orig:122 _40 ] [122])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1543 423 {*iorqi_1}
     (nil))
(insn 181 99 100 9 (set (reg:QI 1 dx [orig:123 _41 ] [123])
        (reg:QI 0 ax [orig:122 _40 ] [122])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 84 {*movqi_internal}
     (nil))
(insn 100 181 101 9 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 81 {*movdi_internal}
     (nil))
(insn 101 100 102 9 (set (reg/f:DI 0 ax [orig:124 _42 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [166]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 81 {*movdi_internal}
     (nil))
(insn 102 101 104 9 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _43 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:124 _42 ] [124])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1543 218 {*adddi_1}
     (nil))
(insn 104 102 105 9 (set (mem:QI (reg/f:DI 0 ax [orig:125 _43 ] [125]) [0 *_43+0 S1 A8])
        (reg:QI 1 dx [orig:126 _44 ] [126])) "libs/src/../include/rapidxml/rapidxml.hpp":1543 84 {*movqi_internal}
     (nil))
(insn 105 104 106 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1543 546 {*lshrdi3_1}
     (nil))
(insn 106 105 107 9 (set (reg:DI 0 ax [167])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 81 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:QI 0 ax [orig:127 _45 ] [127])
        (reg:QI 0 ax [167])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 84 {*movqi_internal}
     (nil))
(insn 108 107 109 9 (parallel [
            (set (reg:QI 0 ax [orig:128 _46 ] [128])
                (and:QI (reg:QI 0 ax [orig:127 _45 ] [127])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1544 392 {*andqi_1}
     (nil))
(insn 109 108 183 9 (parallel [
            (set (reg:QI 0 ax [orig:128 _46 ] [128])
                (ior:QI (reg:QI 0 ax [orig:128 _46 ] [128])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1544 423 {*iorqi_1}
     (nil))
(insn 183 109 110 9 (set (reg:QI 1 dx [orig:129 _47 ] [129])
        (reg:QI 0 ax [orig:128 _46 ] [128])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 84 {*movqi_internal}
     (nil))
(insn 110 183 111 9 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 81 {*movdi_internal}
     (nil))
(insn 111 110 112 9 (set (reg/f:DI 0 ax [orig:130 _48 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [168]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 81 {*movdi_internal}
     (nil))
(insn 112 111 114 9 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _49 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 _48 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1544 218 {*adddi_1}
     (nil))
(insn 114 112 115 9 (set (mem:QI (reg/f:DI 0 ax [orig:131 _49 ] [131]) [0 *_49+0 S1 A8])
        (reg:QI 1 dx [orig:132 _50 ] [132])) "libs/src/../include/rapidxml/rapidxml.hpp":1544 84 {*movqi_internal}
     (nil))
(insn 115 114 116 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1544 546 {*lshrdi3_1}
     (nil))
(insn 116 115 117 9 (set (reg:DI 0 ax [169])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 81 {*movdi_internal}
     (nil))
(insn 117 116 118 9 (set (reg:QI 0 ax [orig:133 _51 ] [133])
        (reg:QI 0 ax [169])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 84 {*movqi_internal}
     (nil))
(insn 118 117 119 9 (parallel [
            (set (reg:QI 0 ax [orig:134 _52 ] [134])
                (and:QI (reg:QI 0 ax [orig:133 _51 ] [133])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1545 392 {*andqi_1}
     (nil))
(insn 119 118 185 9 (parallel [
            (set (reg:QI 0 ax [orig:134 _52 ] [134])
                (ior:QI (reg:QI 0 ax [orig:134 _52 ] [134])
                    (const_int -128 [0xffffffffffffff80])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1545 423 {*iorqi_1}
     (nil))
(insn 185 119 120 9 (set (reg:QI 1 dx [orig:135 _53 ] [135])
        (reg:QI 0 ax [orig:134 _52 ] [134])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 84 {*movqi_internal}
     (nil))
(insn 120 185 121 9 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 81 {*movdi_internal}
     (nil))
(insn 121 120 122 9 (set (reg/f:DI 0 ax [orig:136 _54 ] [136])
        (mem/f:DI (reg/f:DI 0 ax [170]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 81 {*movdi_internal}
     (nil))
(insn 122 121 124 9 (parallel [
            (set (reg/f:DI 0 ax [orig:137 _55 ] [137])
                (plus:DI (reg/f:DI 0 ax [orig:136 _54 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1545 218 {*adddi_1}
     (nil))
(insn 124 122 125 9 (set (mem:QI (reg/f:DI 0 ax [orig:137 _55 ] [137]) [0 *_55+0 S1 A8])
        (reg:QI 1 dx [orig:138 _56 ] [138])) "libs/src/../include/rapidxml/rapidxml.hpp":1545 84 {*movqi_internal}
     (nil))
(insn 125 124 126 9 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                (lshiftrt:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1545 546 {*lshrdi3_1}
     (nil))
(insn 126 125 127 9 (set (reg:DI 0 ax [171])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 81 {*movdi_internal}
     (nil))
(insn 127 126 128 9 (set (reg:QI 0 ax [orig:139 _57 ] [139])
        (reg:QI 0 ax [171])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 84 {*movqi_internal}
     (nil))
(insn 128 127 187 9 (parallel [
            (set (reg:QI 0 ax [orig:139 _57 ] [139])
                (ior:QI (reg:QI 0 ax [orig:139 _57 ] [139])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1546 423 {*iorqi_1}
     (nil))
(insn 187 128 129 9 (set (reg:QI 1 dx [orig:140 _58 ] [140])
        (reg:QI 0 ax [orig:139 _57 ] [139])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 84 {*movqi_internal}
     (nil))
(insn 129 187 130 9 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 81 {*movdi_internal}
     (nil))
(insn 130 129 132 9 (set (reg/f:DI 0 ax [orig:141 _59 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [172]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 81 {*movdi_internal}
     (nil))
(insn 132 130 133 9 (set (mem:QI (reg/f:DI 0 ax [orig:141 _59 ] [141]) [0 *_59+0 S1 A8])
        (reg:QI 1 dx [orig:142 _60 ] [142])) "libs/src/../include/rapidxml/rapidxml.hpp":1546 84 {*movqi_internal}
     (nil))
(insn 133 132 134 9 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1547 81 {*movdi_internal}
     (nil))
(insn 134 133 135 9 (set (reg/f:DI 0 ax [orig:143 _61 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [173]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1547 81 {*movdi_internal}
     (nil))
(insn 135 134 136 9 (parallel [
            (set (reg/f:DI 1 dx [orig:144 _62 ] [144])
                (plus:DI (reg/f:DI 0 ax [orig:143 _61 ] [143])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1547 218 {*adddi_1}
     (nil))
(insn 136 135 137 9 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1547 81 {*movdi_internal}
     (nil))
(insn 137 136 167 9 (set (mem/f:DI (reg/f:DI 0 ax [174]) [3 *text_65(D)+0 S8 A64])
        (reg/f:DI 1 dx [orig:144 _62 ] [144])) "libs/src/../include/rapidxml/rapidxml.hpp":1547 81 {*movdi_internal}
     (nil))
(jump_insn 167 137 168 9 (set (pc)
        (label_ref 159)) "libs/src/../include/rapidxml/rapidxml.hpp":1554 649 {jump}
     (nil)
 -> 159)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 168 167 140)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 145 146 175 176
(code_label 140 168 141 10 577 (nil) [1 uses])
(note 141 140 142 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 10 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(call_insn 143 142 145 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1551 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 145 143 146 10 (set (reg/f:DI 3 bx [orig:146 _64 ] [146])
        (reg/f:DI 0 ax [175])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 146 145 147 10 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 147 146 148 10 (set (reg/f:DI 0 ax [orig:145 _63 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [176]) [3 *text_65(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 148 147 149 10 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:145 _63 ] [145])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 149 148 150 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f441873b990 *.LC25>)) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 150 149 151 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:146 _64 ] [146])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(call_insn 151 150 152 10 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 152 151 153 10 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 153 152 154 10 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(insn 154 153 155 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:146 _64 ] [146])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 81 {*movdi_internal}
     (nil))
(call_insn 155 154 156 10 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1551 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 156 155 159)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [100.0%] 
;;              5 [100.0%] 
;;              3 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 159 156 160 11 572 (nil) [4 uses])
(note 160 159 169 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 169 160 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pure_pred<'\"'>; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_25attribute_value_pure_predILc34EEELi0EEEvRPc, funcdef_no=3517, decl_uid=68625, cgraph_uid=1391, symbol_order=1413)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::attribute_value_pure_pred<'\"'>; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 580 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE25attribute_value_pure_predILc34EE4testEc") [flags 0x3]  <function_decl 0x7f4419019e00 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.96_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.96_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 579 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::attribute_value_pred<Quote>::test(Ch) [with Ch Quote = '\"'; Ch = char] (_ZN8rapidxml12xml_documentIcE20attribute_value_predILc34EE4testEc, funcdef_no=3518, decl_uid=68630, cgraph_uid=1392, symbol_order=1414)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = 2
   Insn 12: point = 5, n_alt = 4
   Insn 11: point = 6, n_alt = 1
   Insn 10: point = 8, n_alt = 0
   Insn 9: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::attribute_value_pred<Quote>::test(Ch) [with Ch Quote = '\"'; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1485 84 {*movqi_internal}
     (nil))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (set (reg:QI 0 ax [orig:87 ch.100_3 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1490 84 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:88 _4 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.100_3 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1490 136 {*zero_extendqisi2}
     (nil))
(insn 11 10 12 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _4 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1490 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE23lookup_attribute_data_2E") [flags 0x2]  <var_decl 0x7f441a7e57e0 lookup_attribute_data_2>)) "libs/src/../include/rapidxml/rapidxml.hpp":1490 81 {*movdi_internal}
     (nil))
(insn 13 12 20 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_attribute_data_2 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1490 84 {*movqi_internal}
     (nil))
(insn 20 13 21 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1492 84 {*movqi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1492 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::text_pred; StopPredPure = rapidxml::xml_document<>::text_pure_no_ws_pred; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE30skip_and_expand_character_refsINS1_9text_predENS1_20text_pure_no_ws_predELi0EEEPcRS5_, funcdef_no=3520, decl_uid=68659, cgraph_uid=1394, symbol_order=1416)

      Creating newreg=208
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=209
Removing SCRATCH in insn #358 (nop 3)
rescanning insn with uid = 358.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r208
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 64:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 79:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 109:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 147:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 150:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 173:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 176:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 177:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 188:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 199:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 202:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 214:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 228:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 237:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=210 from oldreg=187, assigning class GENERAL_REGS to r210
  237: {r210:DI=r210:DI<<0x4;clobber flags:CC;}
      REG_DEAD r187:DI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x18]<<0x4
    Inserting insn reload before:
  426: r210:DI=r187:DI
    Inserting insn reload after:
  427: r144:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 239
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 240:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 256:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 257:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 264:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 265:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 266:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 283:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 284:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 298:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 302:  (0) rm  (1) 0  (2) re {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 307:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 316:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 317:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 334:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 335:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 336:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 337:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 338:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 339:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 349:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r209
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 54
EBB 37
EBB 38
EBB 39
EBB 40
EBB 55
EBB 41
EBB 42
EBB 43
EBB 44
EBB 50
EBB 51
EBB 52
EBB 53
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49

********** Pseudo live ranges #1: **********

  BB 44
   Insn 319: point = 0, n_alt = 0
   Insn 318: point = 0, n_alt = -2
   Insn 317: point = 1, n_alt = 4
   Insn 316: point = 1, n_alt = 4
   Insn 315: point = 1, n_alt = 0
   Insn 314: point = 1, n_alt = -2
   Insn 313: point = 1, n_alt = 4
   Insn 312: point = 1, n_alt = -2
   Insn 311: point = 2, n_alt = 3
   Insn 310: point = 3, n_alt = -2
   Insn 309: point = 5, n_alt = -2
   Insn 308: point = 6, n_alt = 0
   Insn 307: point = 6, n_alt = 2
  BB 48
   Insn 360: point = 6, n_alt = 0
  BB 49
   Insn 363: point = 6, n_alt = -1
  BB 47
   Insn 359: point = 6, n_alt = -1
   Insn 358: point = 6, n_alt = 0
   Insn 357: point = 7, n_alt = -2
   Insn 353: point = 8, n_alt = -2
   Insn 350: point = 10, n_alt = 3
   Insn 349: point = 11, n_alt = 5
   Insn 348: point = 12, n_alt = 3
   Insn 347: point = 13, n_alt = 3
  BB 3
   Insn 26: point = 14, n_alt = -1
   Insn 25: point = 14, n_alt = 0
   Insn 24: point = 15, n_alt = 0
   Insn 23: point = 16, n_alt = 0
   Insn 22: point = 17, n_alt = -2
   Insn 21: point = 18, n_alt = 0
   Insn 20: point = 18, n_alt = -2
   Insn 19: point = 19, n_alt = 0
   Insn 18: point = 21, n_alt = 2
   Insn 17: point = 23, n_alt = 3
  BB 46
   Insn 399: point = 24, n_alt = -1
  BB 43
   Insn 397: point = 24, n_alt = -1
   Insn 302: point = 24, n_alt = 1
  BB 42
   Insn 300: point = 24, n_alt = -1
   Insn 299: point = 24, n_alt = 0
   Insn 298: point = 25, n_alt = 2
   Insn 297: point = 27, n_alt = 3
  BB 37
   Insn 392: point = 28, n_alt = -1
   Insn 251: point = 28, n_alt = 0
   Insn 250: point = 28, n_alt = -2
   Insn 249: point = 29, n_alt = -2
   Insn 248: point = 30, n_alt = 3
   Insn 247: point = 31, n_alt = 3
  BB 54
   Insn 421: point = 32, n_alt = -1
  BB 35
   Insn 230: point = 32, n_alt = -1
   Insn 229: point = 32, n_alt = 0
   Insn 228: point = 32, n_alt = 6
   Insn 227: point = 33, n_alt = 2
   Insn 226: point = 35, n_alt = 4
   Insn 225: point = 36, n_alt = 1
   Insn 224: point = 38, n_alt = 0
   Insn 223: point = 40, n_alt = -2
   Insn 222: point = 42, n_alt = 2
   Insn 221: point = 44, n_alt = 3
  BB 36
   Insn 390: point = 45, n_alt = -1
   Insn 241: point = 45, n_alt = 1
   Insn 240: point = 45, n_alt = 5
   Insn 239: point = 46, n_alt = 0
   Insn 238: point = 48, n_alt = 0
   Insn 427: point = 49, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
   Insn 237: point = 51, n_alt = 0
   Insn 426: point = 51, n_alt = -2
	Hard reg 1 is preferable by r210 with profit 1
	Hard reg 0 is preferable by r210 with profit 1
   Insn 236: point = 53, n_alt = 3
  BB 34
   Insn 219: point = 54, n_alt = 1
   Insn 218: point = 54, n_alt = 5
  BB 41
   Insn 294: point = 54, n_alt = 0
   Insn 293: point = 54, n_alt = -2
   Insn 292: point = 55, n_alt = -2
   Insn 291: point = 56, n_alt = 3
   Insn 290: point = 57, n_alt = 3
  BB 55
   Insn 424: point = 58, n_alt = -1
  BB 39
   Insn 268: point = 58, n_alt = -1
   Insn 267: point = 58, n_alt = 0
   Insn 266: point = 58, n_alt = 6
   Insn 265: point = 59, n_alt = 2
   Insn 264: point = 61, n_alt = 4
   Insn 263: point = 62, n_alt = 1
   Insn 262: point = 64, n_alt = 0
   Insn 261: point = 66, n_alt = -2
   Insn 260: point = 68, n_alt = 2
   Insn 259: point = 70, n_alt = 3
  BB 40
   Insn 395: point = 71, n_alt = -1
   Insn 284: point = 71, n_alt = 1
   Insn 283: point = 71, n_alt = 5
   Insn 282: point = 72, n_alt = 0
   Insn 281: point = 74, n_alt = 0
   Insn 280: point = 75, n_alt = -2
   Insn 279: point = 77, n_alt = -2
   Insn 278: point = 79, n_alt = 0
   Insn 277: point = 81, n_alt = 0
   Insn 276: point = 82, n_alt = 0
   Insn 275: point = 82, n_alt = -2
   Insn 274: point = 83, n_alt = 3
  BB 38
   Insn 257: point = 84, n_alt = 1
   Insn 256: point = 84, n_alt = 5
  BB 33
   Insn 216: point = 84, n_alt = -1
   Insn 215: point = 84, n_alt = 0
   Insn 214: point = 85, n_alt = 2
   Insn 213: point = 87, n_alt = 0
   Insn 212: point = 89, n_alt = 3
  BB 32
   Insn 387: point = 90, n_alt = -1
   Insn 203: point = 90, n_alt = 1
   Insn 202: point = 90, n_alt = 5
   Insn 201: point = 91, n_alt = 0
   Insn 200: point = 93, n_alt = 3
   Insn 199: point = 94, n_alt = 6
   Insn 198: point = 95, n_alt = 3
  BB 29
   Insn 385: point = 96, n_alt = -1
   Insn 177: point = 96, n_alt = 1
   Insn 176: point = 96, n_alt = 5
   Insn 175: point = 97, n_alt = 0
   Insn 174: point = 99, n_alt = 3
   Insn 173: point = 100, n_alt = 6
   Insn 172: point = 101, n_alt = 3
  BB 26
   Insn 383: point = 102, n_alt = -1
   Insn 151: point = 102, n_alt = 1
   Insn 150: point = 102, n_alt = 5
   Insn 149: point = 103, n_alt = 0
   Insn 148: point = 105, n_alt = 3
   Insn 147: point = 106, n_alt = 6
   Insn 146: point = 107, n_alt = 3
  BB 21
   Insn 381: point = 108, n_alt = -1
   Insn 113: point = 108, n_alt = 1
   Insn 112: point = 108, n_alt = 5
   Insn 111: point = 109, n_alt = 0
   Insn 110: point = 111, n_alt = 3
   Insn 109: point = 112, n_alt = 6
   Insn 108: point = 113, n_alt = 3
  BB 16
   Insn 379: point = 114, n_alt = -1
   Insn 79: point = 114, n_alt = 1
   Insn 78: point = 114, n_alt = 5
   Insn 77: point = 115, n_alt = 0
   Insn 76: point = 117, n_alt = 3
   Insn 75: point = 118, n_alt = 6
   Insn 74: point = 119, n_alt = 3
  BB 45
   Insn 339: point = 120, n_alt = 6
   Insn 338: point = 121, n_alt = 2
   Insn 337: point = 123, n_alt = 5
   Insn 336: point = 124, n_alt = 3
   Insn 335: point = 125, n_alt = 3
   Insn 334: point = 126, n_alt = 5
   Insn 333: point = 127, n_alt = 3
   Insn 332: point = 128, n_alt = 3
  BB 51
   Insn 409: point = 129, n_alt = -1
   Insn 408: point = 129, n_alt = -1
  BB 25
   Insn 144: point = 129, n_alt = -1
   Insn 143: point = 129, n_alt = 0
   Insn 142: point = 130, n_alt = 2
   Insn 141: point = 132, n_alt = 0
   Insn 140: point = 134, n_alt = 3
  BB 24
   Insn 138: point = 135, n_alt = -1
   Insn 137: point = 135, n_alt = 0
   Insn 136: point = 136, n_alt = 2
   Insn 135: point = 138, n_alt = 0
   Insn 134: point = 140, n_alt = 3
  BB 23
   Insn 132: point = 141, n_alt = -1
   Insn 131: point = 141, n_alt = 0
   Insn 130: point = 142, n_alt = 2
   Insn 129: point = 144, n_alt = 0
   Insn 128: point = 146, n_alt = 3
  BB 22
   Insn 126: point = 147, n_alt = -1
   Insn 125: point = 147, n_alt = 0
   Insn 124: point = 148, n_alt = 2
   Insn 123: point = 150, n_alt = 0
   Insn 122: point = 152, n_alt = 3
  BB 12
   Insn 377: point = 153, n_alt = -1
  BB 11
   Insn 51: point = 153, n_alt = -1
   Insn 50: point = 153, n_alt = 0
  BB 50
   Insn 404: point = 155, n_alt = -1
   Insn 403: point = 155, n_alt = -1
  BB 20
   Insn 106: point = 155, n_alt = -1
   Insn 105: point = 155, n_alt = 0
   Insn 104: point = 156, n_alt = 2
   Insn 103: point = 158, n_alt = 0
   Insn 102: point = 160, n_alt = 3
  BB 19
   Insn 100: point = 161, n_alt = -1
   Insn 99: point = 161, n_alt = 0
   Insn 98: point = 162, n_alt = 2
   Insn 97: point = 164, n_alt = 0
   Insn 96: point = 166, n_alt = 3
  BB 18
   Insn 94: point = 167, n_alt = -1
   Insn 93: point = 167, n_alt = 0
   Insn 92: point = 168, n_alt = 2
   Insn 91: point = 170, n_alt = 0
   Insn 90: point = 172, n_alt = 3
  BB 17
   Insn 88: point = 173, n_alt = -1
   Insn 87: point = 173, n_alt = 0
   Insn 86: point = 174, n_alt = 2
   Insn 85: point = 176, n_alt = 0
   Insn 84: point = 178, n_alt = 3
  BB 15
   Insn 72: point = 179, n_alt = -1
   Insn 71: point = 179, n_alt = 0
   Insn 70: point = 180, n_alt = 2
   Insn 69: point = 182, n_alt = 0
   Insn 68: point = 184, n_alt = 3
  BB 14
   Insn 66: point = 185, n_alt = -1
   Insn 65: point = 185, n_alt = 0
   Insn 64: point = 186, n_alt = 2
   Insn 63: point = 188, n_alt = 0
   Insn 62: point = 190, n_alt = 3
  BB 13
   Insn 60: point = 191, n_alt = -1
   Insn 59: point = 191, n_alt = 0
   Insn 58: point = 192, n_alt = 2
   Insn 57: point = 194, n_alt = 0
   Insn 56: point = 196, n_alt = 3
  BB 9
   Insn 375: point = 197, n_alt = -1
  BB 8
   Insn 44: point = 197, n_alt = -1
   Insn 43: point = 197, n_alt = 0
  BB 7
   Insn 42: point = 199, n_alt = -1
   Insn 41: point = 199, n_alt = 0
  BB 53
   Insn 418: point = 200, n_alt = -1
  BB 31
   Insn 196: point = 200, n_alt = -1
   Insn 195: point = 200, n_alt = 0
   Insn 194: point = 201, n_alt = 2
   Insn 193: point = 203, n_alt = 0
   Insn 192: point = 205, n_alt = 3
  BB 30
   Insn 190: point = 206, n_alt = -1
   Insn 189: point = 206, n_alt = 0
   Insn 188: point = 207, n_alt = 2
   Insn 187: point = 209, n_alt = 0
   Insn 186: point = 211, n_alt = 3
  BB 10
   Insn 49: point = 212, n_alt = -1
   Insn 48: point = 212, n_alt = 0
  BB 6
   Insn 40: point = 213, n_alt = -1
   Insn 39: point = 213, n_alt = 0
  BB 52
   Insn 414: point = 214, n_alt = -1
   Insn 413: point = 214, n_alt = -1
  BB 28
   Insn 170: point = 214, n_alt = -1
   Insn 169: point = 214, n_alt = 0
   Insn 168: point = 215, n_alt = 2
   Insn 167: point = 217, n_alt = 0
   Insn 166: point = 219, n_alt = 3
  BB 27
   Insn 164: point = 220, n_alt = -1
   Insn 163: point = 220, n_alt = 0
   Insn 162: point = 221, n_alt = 2
   Insn 161: point = 223, n_alt = 0
   Insn 160: point = 225, n_alt = 3
  BB 5
   Insn 38: point = 226, n_alt = -1
   Insn 37: point = 226, n_alt = 0
   Insn 36: point = 226, n_alt = 0
   Insn 35: point = 228, n_alt = 2
   Insn 34: point = 230, n_alt = 0
   Insn 33: point = 232, n_alt = 3
  BB 4
   Insn 31: point = 233, n_alt = -1
   Insn 30: point = 233, n_alt = 0
   Insn 29: point = 234, n_alt = 2
   Insn 28: point = 236, n_alt = 3
  BB 2
   Insn 15: point = 237, n_alt = 5
   Insn 14: point = 238, n_alt = 3
   Insn 13: point = 239, n_alt = 5
   Insn 12: point = 240, n_alt = 3
   Insn 11: point = 242, n_alt = 3
   Insn 10: point = 243, n_alt = 0
   Insn 9: point = 243, n_alt = -2
   Insn 8: point = 244, n_alt = 3
   Insn 4: point = 245, n_alt = 0
   Insn 2: point = 247, n_alt = 5
 r87: [20..21]
 r88: [18..19]
 r89: [16..17]
 r90: [233..234]
 r91: [229..230]
 r92: [227..228]
 r93: [226..226] [212..213] [197..199] [153..154]
 r94: [193..194]
 r95: [191..192]
 r96: [187..188]
 r97: [185..186]
 r98: [181..182]
 r99: [179..180]
 r100: [118..119]
 r101: [116..117]
 r102: [114..115]
 r103: [175..176]
 r104: [173..174]
 r105: [169..170]
 r106: [167..168]
 r107: [163..164]
 r108: [161..162]
 r109: [157..158]
 r110: [155..156]
 r111: [112..113]
 r112: [110..111]
 r113: [108..109]
 r114: [149..150]
 r115: [147..148]
 r116: [143..144]
 r117: [141..142]
 r118: [137..138]
 r119: [135..136]
 r120: [131..132]
 r121: [129..130]
 r122: [106..107]
 r123: [104..105]
 r124: [102..103]
 r125: [222..223]
 r126: [220..221]
 r127: [216..217]
 r128: [214..215]
 r129: [100..101]
 r130: [98..99]
 r131: [96..97]
 r132: [208..209]
 r133: [206..207]
 r134: [202..203]
 r135: [200..201]
 r136: [94..95]
 r137: [92..93]
 r138: [90..91]
 r139: [86..87]
 r140: [84..85]
 r141: [41..42]
 r142: [39..40]
 r143: [37..38]
 r144: [47..49]
 r145: [47..48]
 r146: [67..68]
 r147: [65..66]
 r148: [63..64]
 r149: [73..75]
 r150: [73..74]
 r151: [24..25]
 r152: [122..128]
 r153: [120..125]
 r154: [123..124]
 r155: [120..121]
 r156: [14..15]
 r157: [9..10]
 r158: [0..3]
 r159: [7..8]
 r160: [243..244]
 r161: [241..242]
 r162: [239..240]
 r163: [237..238]
 r164: [22..23]
 r165: [235..236]
 r166: [231..232]
 r167: [195..196]
 r168: [189..190]
 r169: [183..184]
 r170: [177..178]
 r171: [171..172]
 r172: [165..166]
 r173: [159..160]
 r174: [151..152]
 r175: [145..146]
 r176: [139..140]
 r177: [133..134]
 r178: [224..225]
 r179: [218..219]
 r180: [210..211]
 r181: [204..205]
 r182: [88..89]
 r183: [43..44]
 r184: [34..36]
 r185: [34..35]
 r186: [32..33]
 r187: [52..53]
 r188: [45..46]
 r189: [29..31]
 r190: [28..30]
 r191: [69..70]
 r192: [60..62]
 r193: [60..61]
 r194: [58..59]
 r195: [81..83]
 r196: [80..82] [76..77]
 r197: [78..79]
 r198: [71..72]
 r199: [55..57]
 r200: [54..56]
 r201: [26..27]
 r202: [4..5]
 r203: [1..2]
 r204: [126..127]
 r205: [11..13]
 r206: [11..12]
 r208: [245..246]
 r209: [6..6]
 r210: [50..51]
Compressing live ranges: from 247 to 230 - 93%
Ranges after the compression:
 r87: [17..18]
 r88: [15..16]
 r89: [13..14]
 r90: [216..217]
 r91: [212..213]
 r92: [210..211]
 r93: [209..209] [195..196] [181..182] [137..138]
 r94: [177..178]
 r95: [175..176]
 r96: [171..172]
 r97: [169..170]
 r98: [165..166]
 r99: [163..164]
 r100: [105..106]
 r101: [103..104]
 r102: [101..102]
 r103: [159..160]
 r104: [157..158]
 r105: [153..154]
 r106: [151..152]
 r107: [147..148]
 r108: [145..146]
 r109: [141..142]
 r110: [139..140]
 r111: [99..100]
 r112: [97..98]
 r113: [95..96]
 r114: [133..134]
 r115: [131..132]
 r116: [127..128]
 r117: [125..126]
 r118: [121..122]
 r119: [119..120]
 r120: [115..116]
 r121: [113..114]
 r122: [93..94]
 r123: [91..92]
 r124: [89..90]
 r125: [205..206]
 r126: [203..204]
 r127: [199..200]
 r128: [197..198]
 r129: [87..88]
 r130: [85..86]
 r131: [83..84]
 r132: [191..192]
 r133: [189..190]
 r134: [185..186]
 r135: [183..184]
 r136: [81..82]
 r137: [79..80]
 r138: [77..78]
 r139: [73..74]
 r140: [71..72]
 r141: [35..36]
 r142: [33..34]
 r143: [31..32]
 r144: [41..42]
 r145: [41..42]
 r146: [57..58]
 r147: [55..56]
 r148: [53..54]
 r149: [63..64]
 r150: [63..64]
 r151: [21..22]
 r152: [109..112]
 r153: [107..110]
 r154: [109..110]
 r155: [107..108]
 r156: [11..12]
 r157: [7..8]
 r158: [0..1]
 r159: [5..6]
 r160: [226..227]
 r161: [224..225]
 r162: [222..223]
 r163: [220..221]
 r164: [19..20]
 r165: [218..219]
 r166: [214..215]
 r167: [179..180]
 r168: [173..174]
 r169: [167..168]
 r170: [161..162]
 r171: [155..156]
 r172: [149..150]
 r173: [143..144]
 r174: [135..136]
 r175: [129..130]
 r176: [123..124]
 r177: [117..118]
 r178: [207..208]
 r179: [201..202]
 r180: [193..194]
 r181: [187..188]
 r182: [75..76]
 r183: [37..38]
 r184: [29..30]
 r185: [29..30]
 r186: [27..28]
 r187: [45..46]
 r188: [39..40]
 r189: [25..26]
 r190: [25..26]
 r191: [59..60]
 r192: [51..52]
 r193: [51..52]
 r194: [49..50]
 r195: [69..70]
 r196: [69..70] [65..66]
 r197: [67..68]
 r198: [61..62]
 r199: [47..48]
 r200: [47..48]
 r201: [23..24]
 r202: [2..3]
 r203: [0..1]
 r204: [111..112]
 r205: [9..10]
 r206: [9..10]
 r208: [228..229]
 r209: [4..4]
 r210: [43..44]

********** Assignment #1: **********

	 Assigning to 210 (cl=GENERAL_REGS, orig=187, freq=3, tfirst=210, tfreq=3)...
	   Assign 0 to reload r210 (freq=3)
	 Assigning to 208 (cl=INDEX_REGS, orig=208, freq=1, tfirst=208, tfreq=1)...
	   Assign 0 to reload r208 (freq=1)
	 Assigning to 209 (cl=INDEX_REGS, orig=209, freq=1, tfirst=209, tfreq=1)...
	   Assign 2 to reload r209 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 50
changing reg in insn 48
changing reg in insn 43
changing reg in insn 41
changing reg in insn 39
changing reg in insn 37
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 238
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 280
changing reg in insn 281
changing reg in insn 298
changing reg in insn 299
changing reg in insn 332
changing reg in insn 338
changing reg in insn 333
changing reg in insn 335
changing reg in insn 339
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 24
changing reg in insn 25
changing reg in insn 350
changing reg in insn 353
changing reg in insn 310
changing reg in insn 318
changing reg in insn 314
changing reg in insn 353
changing reg in insn 357
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 102
changing reg in insn 103
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 160
changing reg in insn 161
changing reg in insn 166
changing reg in insn 167
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 212
changing reg in insn 213
changing reg in insn 221
changing reg in insn 222
changing reg in insn 225
changing reg in insn 227
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 249
changing reg in insn 248
changing reg in insn 250
changing reg in insn 259
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 274
changing reg in insn 277
changing reg in insn 275
changing reg in insn 277
changing reg in insn 279
changing reg in insn 277
changing reg in insn 276
changing reg in insn 275
changing reg in insn 280
changing reg in insn 278
changing reg in insn 277
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 282
changing reg in insn 283
changing reg in insn 290
changing reg in insn 292
changing reg in insn 291
changing reg in insn 293
changing reg in insn 297
changing reg in insn 298
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 333
changing reg in insn 334
changing reg in insn 347
changing reg in insn 349
changing reg in insn 348
changing reg in insn 349
changing reg in insn 4
changing reg in insn 358
deleting insn with uid = 22.
deleting insn with uid = 223.
deleting insn with uid = 426.
deleting insn with uid = 261.
deleting insn with uid = 279.
deleting insn with uid = 309.
deleting insn with uid = 353.
deleting insn with uid = 357.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 315.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 360.


static Ch* rapidxml::xml_document<Ch>::skip_and_expand_character_refs(Ch*&) [with StopPred = rapidxml::xml_document<>::text_pred; StopPredPure = rapidxml::xml_document<>::text_pure_no_ws_pred; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={116d,115u} r1={21d,14u,1e} r2={11d,1u} r3={1d,2u} r4={13d,4u} r5={16d,8u} r6={1d,144u} r7={1d,63u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={80d,29u} r18={8d} r19={8d} r20={1d,1u,18e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1199{799d,381u,19e} in 252{244 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 161 162 163
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1570 81 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [9 D.70519+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [208])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1570 1002 {stack_tls_protect_set_di}
     (nil))
(insn 8 4 9 2 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE4skipINS1_20text_pure_no_ws_predELi0EEEvRPc") [flags 0x3]  <function_decl 0x7f441902e900 skip>) [0 skip S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1582 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [162])
        (mem/f:DI (reg/f:DI 0 ax [161]) [3 *text_83(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg/f:DI 0 ax [162])) "libs/src/../include/rapidxml/rapidxml.hpp":1585 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
(insn 15 14 342 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [163])) "libs/src/../include/rapidxml/rapidxml.hpp":1586 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              46 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 156 164
(code_label 342 15 16 3 610 (nil) [1 uses])
(note 16 342 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 81 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [164]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 84 {*movqi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 151 {extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1587 82 {*movsi_internal}
     (nil))
(call_insn 21 20 23 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE9text_pred4testEc") [flags 0x3]  <function_decl 0x7f441902e400 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 23 21 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax [orig:156 retval.110_88 ] [156])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 613 {*setcc_qi}
     (nil))
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:156 retval.110_88 ] [156])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 345)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1587 617 {*jcc_1}
     (nil)
 -> 345)
;;  succ:       4 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 165
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 81 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:QI 0 ax [orig:90 _4 ] [90])
        (mem:QI (reg/f:DI 0 ax [165]) [0 *src_66+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1593 84 {*movqi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 _4 ] [90])
            (const_int 38 [0x26]))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 5 {*cmpqi_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 374)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1593 617 {*jcc_1}
     (nil)
 -> 374)
;;  succ:       5 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 166
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 81 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (plus:DI (reg/f:DI 0 ax [166])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1595 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 35 34 36 5 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 _5 ] [91]) [0 *_5+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1595 84 {*movqi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 0 ax [orig:93 _7 ] [93])
        (sign_extend:SI (reg:QI 0 ax [orig:92 _6 ] [92]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 151 {extendqisi2}
     (nil))
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 365 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       27
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 365 38 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 365 40 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 103 [0x67]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 366 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 366 40 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 366 42 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 35 [0x23]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 42 41 367 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 210)
;;  succ:       33
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 367 42 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 367 44 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 97 [0x61]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 44 43 368 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       13
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 368 44 375 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 375 368 376 9 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 376 375 47)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(code_label 47 376 369 10 588 (nil) [1 uses])
(note 369 47 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 369 49 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 108 [0x6c]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 49 48 370 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 184)
;;  succ:       30
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 17 [flags]
(note 370 49 50 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 50 370 51 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _7 ] [93])
            (const_int 113 [0x71]))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 7 {*cmpsi_1}
     (nil))
(jump_insn 51 50 371 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1595 617 {*jcc_1}
     (nil)
 -> 120)
;;  succ:       22
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 371 51 377 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 377 371 378 12 (set (pc)
        (label_ref 374)) "libs/src/../include/rapidxml/rapidxml.hpp":1688 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 378 377 54)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 167
(code_label 54 378 55 13 590 (nil) [1 uses])
(note 55 54 56 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 13 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 57 56 58 13 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 0 ax [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 58 57 59 13 (set (reg:QI 0 ax [orig:95 _9 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [0 *_8+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 59 58 60 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 _9 ] [95])
            (const_int 109 [0x6d]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 60 59 61 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 168
(note 61 60 62 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 14 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 63 62 64 14 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg/f:DI 0 ax [168])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 64 63 65 14 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [0 *_10+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 65 64 66 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 66 65 67 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 169
(note 67 66 68 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 15 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 81 {*movdi_internal}
     (nil))
(insn 69 68 70 15 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (plus:DI (reg/f:DI 0 ax [169])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1600 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 70 69 71 15 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem:QI (reg/f:DI 0 ax [orig:98 _12 ] [98]) [0 *_12+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1600 84 {*movqi_internal}
     (nil))
(insn 71 70 72 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _13 ] [99])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 5 {*cmpqi_1}
     (nil))
(jump_insn 72 71 73 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1600 617 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102
(note 73 72 74 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 16 (set (reg/f:DI 0 ax [orig:100 dest.111_14 ] [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 81 {*movdi_internal}
     (nil))
(insn 75 74 76 16 (set (mem:QI (reg/f:DI 0 ax [orig:100 dest.111_14 ] [100]) [0 *dest.111_14+0 S1 A8])
        (const_int 38 [0x26])) "libs/src/../include/rapidxml/rapidxml.hpp":1602 84 {*movqi_internal}
     (nil))
(insn 76 75 77 16 (set (reg/f:DI 0 ax [orig:101 dest.112_15 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 77 76 78 16 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 dest.112_15 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1603 218 {*adddi_1}
     (nil))
(insn 78 77 79 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 _16 ] [102])) "libs/src/../include/rapidxml/rapidxml.hpp":1603 81 {*movdi_internal}
     (nil))
(insn 79 78 379 16 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1604 218 {*adddi_1}
     (nil))
(jump_insn 379 79 380 16 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1605 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 380 379 82)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 170
(code_label 82 380 83 17 593 (nil) [3 uses])
(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 17 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 85 84 86 17 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 86 85 87 17 (set (reg:QI 0 ax [orig:104 _18 ] [104])
        (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 87 86 88 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 _18 ] [104])
            (const_int 112 [0x70]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       18 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 171
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 18 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 91 90 92 18 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 92 91 93 18 (set (reg:QI 0 ax [orig:106 _20 ] [106])
        (mem:QI (reg/f:DI 0 ax [orig:105 _19 ] [105]) [0 *_19+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 93 92 94 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:106 _20 ] [106])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 94 93 95 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       19 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 172
(note 95 94 96 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 19 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 97 96 98 19 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 98 97 99 19 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem:QI (reg/f:DI 0 ax [orig:107 _21 ] [107]) [0 *_21+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 99 98 100 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 115 [0x73]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 100 99 101 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       20 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 173
(note 101 100 102 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 20 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 81 {*movdi_internal}
     (nil))
(insn 103 102 104 20 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg/f:DI 0 ax [173])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1607 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 104 103 105 20 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _23 ] [109]) [0 *_23+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1607 84 {*movqi_internal}
     (nil))
(insn 105 104 106 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:110 _24 ] [110])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 5 {*cmpqi_1}
     (nil))
(jump_insn 106 105 107 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1607 617 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       21 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113
(note 107 106 108 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 21 (set (reg/f:DI 0 ax [orig:111 dest.113_25 ] [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 81 {*movdi_internal}
     (nil))
(insn 109 108 110 21 (set (mem:QI (reg/f:DI 0 ax [orig:111 dest.113_25 ] [111]) [0 *dest.113_25+0 S1 A8])
        (const_int 39 [0x27])) "libs/src/../include/rapidxml/rapidxml.hpp":1609 84 {*movqi_internal}
     (nil))
(insn 110 109 111 21 (set (reg/f:DI 0 ax [orig:112 dest.114_26 ] [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 111 110 112 21 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:112 dest.114_26 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1610 218 {*adddi_1}
     (nil))
(insn 112 111 113 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:113 _27 ] [113])) "libs/src/../include/rapidxml/rapidxml.hpp":1610 81 {*movdi_internal}
     (nil))
(insn 113 112 381 21 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1611 218 {*adddi_1}
     (nil))
(jump_insn 381 113 382 21 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1612 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 382 381 120)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 174
(code_label 120 382 121 22 592 (nil) [1 uses])
(note 121 120 122 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 22 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 123 122 124 22 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (plus:DI (reg/f:DI 0 ax [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 124 123 125 22 (set (reg:QI 0 ax [orig:115 _29 ] [115])
        (mem:QI (reg/f:DI 0 ax [orig:114 _28 ] [114]) [0 *_28+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 125 124 126 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:115 _29 ] [115])
            (const_int 117 [0x75]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 126 125 127 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       23 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 175
(note 127 126 128 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 23 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 129 128 130 23 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 130 129 131 23 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 131 130 132 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 111 [0x6f]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 132 131 133 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       24 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 176
(note 133 132 134 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 24 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 135 134 136 24 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg/f:DI 0 ax [176])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 136 135 137 24 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem:QI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [0 *_32+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 137 136 138 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 _33 ] [119])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 138 137 139 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       25 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 177
(note 139 138 140 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 25 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 81 {*movdi_internal}
     (nil))
(insn 141 140 142 25 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [177])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1618 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 5 [0x5]))
        (nil)))
(insn 142 141 143 25 (set (reg:QI 0 ax [orig:121 _35 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [0 *_34+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1618 84 {*movqi_internal}
     (nil))
(insn 143 142 144 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 _35 ] [121])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 5 {*cmpqi_1}
     (nil))
(jump_insn 144 143 145 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1618 617 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       26 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124
(note 145 144 146 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 26 (set (reg/f:DI 0 ax [orig:122 dest.115_36 ] [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 81 {*movdi_internal}
     (nil))
(insn 147 146 148 26 (set (mem:QI (reg/f:DI 0 ax [orig:122 dest.115_36 ] [122]) [0 *dest.115_36+0 S1 A8])
        (const_int 34 [0x22])) "libs/src/../include/rapidxml/rapidxml.hpp":1620 84 {*movqi_internal}
     (nil))
(insn 148 147 149 26 (set (reg/f:DI 0 ax [orig:123 dest.116_37 ] [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 149 148 150 26 (parallel [
            (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (plus:DI (reg/f:DI 0 ax [orig:123 dest.116_37 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1621 218 {*adddi_1}
     (nil))
(insn 150 149 151 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 _38 ] [124])) "libs/src/../include/rapidxml/rapidxml.hpp":1621 81 {*movdi_internal}
     (nil))
(insn 151 150 383 26 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1622 218 {*adddi_1}
     (nil))
(jump_insn 383 151 384 26 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1623 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 384 383 158)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 178
(code_label 158 384 159 27 587 (nil) [1 uses])
(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 27 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 161 160 162 27 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (plus:DI (reg/f:DI 0 ax [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 162 161 163 27 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [orig:125 _39 ] [125]) [0 *_39+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 163 162 164 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 164 163 165 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       28 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 179
(note 165 164 166 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 28 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 81 {*movdi_internal}
     (nil))
(insn 167 166 168 28 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1629 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 168 167 169 28 (set (reg:QI 0 ax [orig:128 _42 ] [128])
        (mem:QI (reg/f:DI 0 ax [orig:127 _41 ] [127]) [0 *_41+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1629 84 {*movqi_internal}
     (nil))
(insn 169 168 170 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:128 _42 ] [128])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 5 {*cmpqi_1}
     (nil))
(jump_insn 170 169 171 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 412)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1629 617 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       29 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131
(note 171 170 172 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 29 (set (reg/f:DI 0 ax [orig:129 dest.117_43 ] [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 81 {*movdi_internal}
     (nil))
(insn 173 172 174 29 (set (mem:QI (reg/f:DI 0 ax [orig:129 dest.117_43 ] [129]) [0 *dest.117_43+0 S1 A8])
        (const_int 62 [0x3e])) "libs/src/../include/rapidxml/rapidxml.hpp":1631 84 {*movqi_internal}
     (nil))
(insn 174 173 175 29 (set (reg/f:DI 0 ax [orig:130 dest.118_44 ] [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 175 174 176 29 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 dest.118_44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1632 218 {*adddi_1}
     (nil))
(insn 176 175 177 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:131 _45 ] [131])) "libs/src/../include/rapidxml/rapidxml.hpp":1632 81 {*movdi_internal}
     (nil))
(insn 177 176 385 29 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1633 218 {*adddi_1}
     (nil))
(jump_insn 385 177 386 29 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1634 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 386 385 184)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 180
(code_label 184 386 185 30 591 (nil) [1 uses])
(note 185 184 186 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 30 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 187 186 188 30 (parallel [
            (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
                (plus:DI (reg/f:DI 0 ax [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 188 187 189 30 (set (reg:QI 0 ax [orig:133 _47 ] [133])
        (mem:QI (reg/f:DI 0 ax [orig:132 _46 ] [132]) [0 *_46+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 189 188 190 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:133 _47 ] [133])
            (const_int 116 [0x74]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 190 189 191 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       31 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 135 181
(note 191 190 192 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 31 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 81 {*movdi_internal}
     (nil))
(insn 193 192 194 31 (parallel [
            (set (reg/f:DI 0 ax [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 0 ax [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1640 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 194 193 195 31 (set (reg:QI 0 ax [orig:135 _49 ] [135])
        (mem:QI (reg/f:DI 0 ax [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1640 84 {*movqi_internal}
     (nil))
(insn 195 194 196 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 _49 ] [135])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 5 {*cmpqi_1}
     (nil))
(jump_insn 196 195 197 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 417)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1640 617 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       32 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138
(note 197 196 198 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 32 (set (reg/f:DI 0 ax [orig:136 dest.119_50 ] [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 81 {*movdi_internal}
     (nil))
(insn 199 198 200 32 (set (mem:QI (reg/f:DI 0 ax [orig:136 dest.119_50 ] [136]) [0 *dest.119_50+0 S1 A8])
        (const_int 60 [0x3c])) "libs/src/../include/rapidxml/rapidxml.hpp":1642 84 {*movqi_internal}
     (nil))
(insn 200 199 201 32 (set (reg/f:DI 0 ax [orig:137 dest.120_51 ] [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 201 200 202 32 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:137 dest.120_51 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1643 218 {*adddi_1}
     (nil))
(insn 202 201 203 32 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 0 ax [orig:138 _52 ] [138])) "libs/src/../include/rapidxml/rapidxml.hpp":1643 81 {*movdi_internal}
     (nil))
(insn 203 202 387 32 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1644 218 {*adddi_1}
     (nil))
(jump_insn 387 203 388 32 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1645 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 388 387 210)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 182
(code_label 210 388 211 33 589 (nil) [1 uses])
(note 211 210 212 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 33 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 81 {*movdi_internal}
     (nil))
(insn 213 212 214 33 (parallel [
            (set (reg/f:DI 0 ax [orig:139 _53 ] [139])
                (plus:DI (reg/f:DI 0 ax [182])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1651 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 src+0 S8 A64])
            (const_int 2 [0x2]))
        (nil)))
(insn 214 213 215 33 (set (reg:QI 0 ax [orig:140 _54 ] [140])
        (mem:QI (reg/f:DI 0 ax [orig:139 _53 ] [139]) [0 *_53+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1651 84 {*movqi_internal}
     (nil))
(insn 215 214 216 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:140 _54 ] [140])
            (const_int 120 [0x78]))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 5 {*cmpqi_1}
     (nil))
(jump_insn 216 215 217 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1651 617 {*jcc_1}
     (nil)
 -> 254)
;;  succ:       34 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 217 216 218 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 34 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1653 81 {*movdi_internal}
     (nil))
(insn 219 218 242 34 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1654 218 {*adddi_1}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              36 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 183 184 185 186
(code_label 242 219 220 35 603 (nil) [1 uses])
(note 220 242 221 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 35 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 222 221 224 35 (set (reg:QI 0 ax [orig:141 _55 ] [141])
        (mem:QI (reg/f:DI 0 ax [183]) [0 *src_67+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 224 222 225 35 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (zero_extend:SI (reg:QI 0 ax [orig:142 _56 ] [142]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 136 {*zero_extendqisi2}
     (nil))
(insn 225 224 226 35 (set (reg:DI 1 dx [184])
        (sign_extend:DI (reg:SI 0 ax [orig:143 _57 ] [143]))) "libs/src/../include/rapidxml/rapidxml.hpp":1657 145 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 35 (set (reg:DI 0 ax [185])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1657 81 {*movdi_internal}
     (nil))
(insn 227 226 228 35 (set (reg:QI 0 ax [186])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [184])
                (reg:DI 0 ax [185])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 228 227 229 35 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [186])) "libs/src/../include/rapidxml/rapidxml.hpp":1657 84 {*movqi_internal}
     (nil))
(insn 229 228 230 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 5 {*cmpqi_1}
     (nil))
(jump_insn 230 229 235 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 420)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1658 617 {*jcc_1}
     (nil)
 -> 420)
;;  succ:       54
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 54, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 187 188
(note 235 230 236 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 36 (set (reg:DI 0 ax [187])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 237 236 427 36 (parallel [
            (set (reg:DI 0 ax [187])
                (ashift:DI (reg:DI 0 ax [187])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [8 code+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 427 237 238 36 (set (reg:DI 1 dx [orig:144 _58 ] [144])
        (reg:DI 0 ax [187])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 238 427 239 36 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -57 [0xffffffffffffffc7])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1660 132 {zero_extendqidi2}
     (nil))
(insn 239 238 240 36 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg:DI 1 dx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1660 218 {*adddi_1}
     (nil))
(insn 240 239 241 36 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])
        (reg:DI 0 ax [188])) "libs/src/../include/rapidxml/rapidxml.hpp":1660 81 {*movdi_internal}
     (nil))
(insn 241 240 390 36 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1661 218 {*adddi_1}
     (nil))
(jump_insn 390 241 391 36 (set (pc)
        (label_ref 242)) "libs/src/../include/rapidxml/rapidxml.hpp":1655 649 {jump}
     (nil)
 -> 242)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 391 390 420)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 420 391 419 54 620 (nil) [1 uses])
(note 419 420 421 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 421 419 389 54 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1659 684 {nop}
     (nil))
;;  succ:       37 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 38, flags: (RTL, MODIFIED)
;;  pred:       54 [100.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190
(code_label 389 421 246 37 614 (nil) [0 uses])
(note 246 389 247 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 37 (set (reg:DI 1 dx [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 248 247 249 37 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1663 218 {*adddi_1}
     (nil))
(insn 249 248 250 37 (set (reg:DI 4 si)
        (reg:DI 1 dx [189])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(insn 250 249 251 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 81 {*movdi_internal}
     (nil))
(call_insn 251 250 392 37 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1663 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 392 251 393 37 (set (pc)
        (label_ref 295)) 649 {jump}
     (nil)
 -> 295)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 393 392 254)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 254 393 255 38 600 (nil) [1 uses])
(note 255 254 256 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 38 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1667 81 {*movdi_internal}
     (nil))
(insn 257 256 285 38 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1668 218 {*adddi_1}
     (nil))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;;              40 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 191 192 193 194
(code_label 285 257 258 39 607 (nil) [1 uses])
(note 258 285 259 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 39 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 260 259 262 39 (set (reg:QI 0 ax [orig:146 _60 ] [146])
        (mem:QI (reg/f:DI 0 ax [191]) [0 *src_68+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 262 260 263 39 (set (reg:SI 0 ax [orig:148 _62 ] [148])
        (zero_extend:SI (reg:QI 0 ax [orig:147 _61 ] [147]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 136 {*zero_extendqisi2}
     (nil))
(insn 263 262 264 39 (set (reg:DI 1 dx [192])
        (sign_extend:DI (reg:SI 0 ax [orig:148 _62 ] [148]))) "libs/src/../include/rapidxml/rapidxml.hpp":1671 145 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 39 (set (reg:DI 0 ax [193])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE13lookup_digitsE") [flags 0x2]  <var_decl 0x7f441a7e5900 lookup_digits>)) "libs/src/../include/rapidxml/rapidxml.hpp":1671 81 {*movdi_internal}
     (nil))
(insn 265 264 266 39 (set (reg:QI 0 ax [194])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [192])
                (reg:DI 0 ax [193])) [0 lookup_digits S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 266 265 267 39 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
        (reg:QI 0 ax [194])) "libs/src/../include/rapidxml/rapidxml.hpp":1671 84 {*movqi_internal}
     (nil))
(insn 267 266 268 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8])
            (const_int -1 [0xffffffffffffffff]))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 5 {*cmpqi_1}
     (nil))
(jump_insn 268 267 273 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 423)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1672 617 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       55
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 55, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 195 196 197 198
(note 273 268 274 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 40 (set (reg:DI 1 dx [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 275 274 276 40 (set (reg:DI 0 ax [196])
        (reg:DI 1 dx [195])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 276 275 277 40 (parallel [
            (set (reg:DI 0 ax [196])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 277 276 278 40 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg:DI 0 ax [196])
                    (reg:DI 1 dx [195])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [195])
            (const_int 5 [0x5]))
        (nil)))
(insn 278 277 280 40 (parallel [
            (set (reg:DI 0 ax [197])
                (ashift:DI (reg:DI 0 ax [196])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 512 {*ashldi3_1}
     (nil))
(insn 280 278 281 40 (set (reg:DI 1 dx [orig:149 _63 ] [149])
        (reg:DI 0 ax [196])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 281 280 282 40 (set (reg:DI 0 ax [orig:150 _64 ] [150])
        (zero_extend:DI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -58 [0xffffffffffffffc6])) [0 digit+0 S1 A8]))) "libs/src/../include/rapidxml/rapidxml.hpp":1674 132 {zero_extendqidi2}
     (nil))
(insn 282 281 283 40 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (reg:DI 1 dx [orig:149 _63 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1674 218 {*adddi_1}
     (nil))
(insn 283 282 284 40 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])
        (reg:DI 0 ax [198])) "libs/src/../include/rapidxml/rapidxml.hpp":1674 81 {*movdi_internal}
     (nil))
(insn 284 283 395 40 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1675 218 {*adddi_1}
     (nil))
(jump_insn 395 284 396 40 (set (pc)
        (label_ref 285)) "libs/src/../include/rapidxml/rapidxml.hpp":1669 649 {jump}
     (nil)
 -> 285)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 396 395 423)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 396 422 55 621 (nil) [1 uses])
(note 422 423 424 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 424 422 394 55 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1673 684 {nop}
     (nil))
;;  succ:       41 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 42, flags: (RTL, MODIFIED)
;;  pred:       55 [100.0%]  (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200
(code_label 394 424 289 41 615 (nil) [0 uses])
(note 289 394 290 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 41 (set (reg:DI 1 dx [199])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [8 code+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 291 290 292 41 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1677 218 {*adddi_1}
     (nil))
(insn 292 291 293 41 (set (reg:DI 4 si)
        (reg:DI 1 dx [199])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(insn 293 292 294 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 81 {*movdi_internal}
     (nil))
(call_insn 294 293 295 41 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE22insert_coded_characterILi0EEEvRPcm") [flags 0x3]  <function_decl 0x7f4418fce600 insert_coded_character>) [0 insert_coded_character S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1677 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              37 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 201
(code_label 295 294 296 42 604 (nil) [1 uses])
(note 296 295 297 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 42 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 81 {*movdi_internal}
     (nil))
(insn 298 297 299 42 (set (reg:QI 0 ax [orig:151 _65 ] [151])
        (mem:QI (reg/f:DI 0 ax [201]) [0 *src_69+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1679 84 {*movqi_internal}
     (nil))
(insn 299 298 300 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:151 _65 ] [151])
            (const_int 59 [0x3b]))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 5 {*cmpqi_1}
     (nil))
(jump_insn 300 299 301 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1679 617 {*jcc_1}
     (nil)
 -> 305)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 301 300 302 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 397 43 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1680 218 {*adddi_1}
     (nil))
(jump_insn 397 302 398 43 (set (pc)
        (label_ref 340)) "libs/src/../include/rapidxml/rapidxml.hpp":1683 649 {jump}
     (nil)
 -> 340)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 398 397 305)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 50, flags: (RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 202 203
(code_label 305 398 306 44 608 (nil) [1 uses])
(note 306 305 307 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 44 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 308 307 310 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_allocate_exception") [flags 0x41]  <function_decl 0x7f441930f900 __cxa_allocate_exception>) [0 __cxa_allocate_exception S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1682 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 310 308 311 44 (set (reg/f:DI 3 bx [orig:158 _120 ] [158])
        (reg/f:DI 0 ax [202])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 311 310 312 44 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 312 311 313 44 (set (reg:DI 1 dx)
        (reg:DI 0 ax [203])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 313 312 314 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f44186d81b0 *.LC23>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 314 313 315 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 315 314 316 44 (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorC1EPKcPv") [flags 0x3]  <function_decl 0x7f441a7d9500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 316 315 317 44 (set (reg:DI 1 dx)
        (symbol_ref/i:DI ("_ZN8rapidxml11parse_errorD1Ev") [flags 0x3]  <function_decl 0x7f441a7d9300 __comp_dtor >)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 317 316 318 44 (set (reg:DI 4 si)
        (symbol_ref/i:DI ("_ZTIN8rapidxml11parse_errorE") [flags 0x2]  <var_decl 0x7f441a7ca750 _ZTIN8rapidxml11parse_errorE>)) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(insn 318 317 319 44 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:158 _120 ] [158])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 81 {*movdi_internal}
     (nil))
(call_insn 319 318 320 44 (call (mem:QI (symbol_ref:DI ("__cxa_throw") [flags 0x41]  <function_decl 0x7f441930f800 __cxa_throw>) [0 __cxa_throw S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1682 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 402)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 51, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18
;;              19
;;              20
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 402 320 401 50 616 (nil) [4 uses])
(note 401 402 403 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 403 401 404 50 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1614 684 {nop}
     (nil))
(jump_insn 404 403 405 50 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 407)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       22
;;              25
;;              23
;;              24
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 407 405 406 51 617 (nil) [4 uses])
(note 406 407 408 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 408 406 409 51 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1625 684 {nop}
     (nil))
(jump_insn 409 408 410 51 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 410 409 412)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 412 410 411 52 618 (nil) [2 uses])
(note 411 412 413 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 413 411 414 52 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1636 684 {nop}
     (nil))
(jump_insn 414 413 415 52 (set (pc)
        (label_ref 374)) 649 {jump}
     (nil)
 -> 374)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 415 414 417)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 45, flags: (RTL, MODIFIED)
;;  pred:       30
;;              31
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 417 415 416 53 619 (nil) [2 uses])
(note 416 417 418 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 418 416 374 53 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1647 684 {nop}
     (nil))
;;  succ:       45 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 46, flags: (RTL, MODIFIED)
;;  pred:       52 [100.0%] 
;;              4
;;              53 [100.0%]  (FALLTHRU)
;;              9 [100.0%] 
;;              50 [100.0%] 
;;              12 [100.0%] 
;;              51 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 204
(code_label 374 418 331 45 613 (nil) [6 uses])
(note 331 374 332 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 333 45 (set (reg/f:DI 1 dx [orig:152 src.125_75 ] [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 333 332 334 45 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 1 dx [orig:152 src.125_75 ] [152])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 334 333 335 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])
        (reg:DI 0 ax [204])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 335 334 336 45 (set (reg/f:DI 0 ax [orig:153 dest.126_76 ] [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 336 335 337 45 (parallel [
            (set (reg/f:DI 2 cx [orig:154 _78 ] [154])
                (plus:DI (reg/f:DI 0 ax [orig:153 dest.126_76 ] [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1710 218 {*adddi_1}
     (nil))
(insn 337 336 338 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])
        (reg/f:DI 2 cx [orig:154 _78 ] [154])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 81 {*movdi_internal}
     (nil))
(insn 338 337 339 45 (set (reg:QI 1 dx [orig:155 _79 ] [155])
        (mem:QI (reg/f:DI 1 dx [orig:152 src.125_75 ] [152]) [0 *src.125_75+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
(insn 339 338 340 45 (set (mem:QI (reg/f:DI 0 ax [orig:153 dest.126_76 ] [153]) [0 *dest.127_77+0 S1 A8])
        (reg:QI 1 dx [orig:155 _79 ] [155])) "libs/src/../include/rapidxml/rapidxml.hpp":1710 84 {*movqi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              16 [100.0%] 
;;              21 [100.0%] 
;;              26 [100.0%] 
;;              29 [100.0%] 
;;              32 [100.0%] 
;;              43 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 340 339 341 46 594 (nil) [6 uses])
(note 341 340 399 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(jump_insn 399 341 400 46 (set (pc)
        (label_ref 342)) "libs/src/../include/rapidxml/rapidxml.hpp":1587 649 {jump}
     (nil)
 -> 342)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 400 399 345)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 157 159 205 206
(code_label 345 400 346 47 584 (nil) [1 uses])
(note 346 345 347 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 47 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 348 347 349 47 (set (reg/f:DI 1 dx [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [3 src+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 349 348 350 47 (set (mem/f:DI (reg/f:DI 0 ax [205]) [3 *text_83(D)+0 S8 A64])
        (reg/f:DI 1 dx [206])) "libs/src/../include/rapidxml/rapidxml.hpp":1715 81 {*movdi_internal}
     (nil))
(insn 350 349 358 47 (set (reg/f:DI 0 ax [orig:157 _90 ] [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 dest+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1716 81 {*movdi_internal}
     (nil))
(insn 358 350 359 47 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [9 D.70519+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [209]))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1718 1006 {stack_tls_protect_test_di}
     (nil))
(jump_insn 359 358 372 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 362)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1718 617 {*jcc_1}
     (nil)
 -> 362)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 372 359 360 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(call_insn 360 372 361 48 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f441883d000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "libs/src/../include/rapidxml/rapidxml.hpp":1718 655 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 361 360 362)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 362 361 373 49 612 (nil) [1 uses])
(note 373 362 363 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 363 373 425 49 (use (reg/i:DI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1718 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 425 363 0 NOTE_INSN_DELETED)

;; Function void* __gnu_cxx::__aligned_membuf<_Tp>::_M_addr() [with _Tp = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >] (_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE7_M_addrEv, funcdef_no=3529, decl_uid=65412, cgraph_uid=1403, symbol_order=1425)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


void* __gnu_cxx::__aligned_membuf<_Tp>::_M_addr() [with _Tp = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [101 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/aligned_buffer.h":62 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [101 this+0 S8 A64])) "/usr/include/c++/7/ext/aligned_buffer.h":63 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/ext/aligned_buffer.h":63 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/ext/aligned_buffer.h":63 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl() (_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD2Ev, funcdef_no=3532, decl_uid=68926, cgraph_uid=1405, symbol_order=1427)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [108 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [108 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/bits/stl_vector.h":81 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSaIjED2Ev") [flags 0x3]  <function_decl 0x7f441996a000 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":81 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":81 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (_ZNSt12_Vector_baseIjSaIjEED2Ev, funcdef_no=3534, decl_uid=55301, cgraph_uid=1408, symbol_order=1430)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=101 from oldreg=88, assigning class GENERAL_REGS to r101
   12: {r101:DI=r101:DI-r90:DI;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   30: r101:DI=r88:DI
    Inserting insn reload after:
   31: r91:DI=r101:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = 0
   Insn 24: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = 3
   Insn 22: point = 2, n_alt = 0
   Insn 21: point = 2, n_alt = -2
   Insn 20: point = 3, n_alt = -2
   Insn 19: point = 4, n_alt = -2
   Insn 18: point = 5, n_alt = 3
   Insn 17: point = 6, n_alt = 3
   Insn 16: point = 8, n_alt = 3
   Insn 15: point = 9, n_alt = -2
   Insn 14: point = 11, n_alt = -2
   Insn 13: point = 13, n_alt = 0
   Insn 31: point = 15, n_alt = -2
	Hard reg 0 is preferable by r101 with profit 1
   Insn 12: point = 17, n_alt = 0
   Insn 30: point = 18, n_alt = -2
	Hard reg 0 is preferable by r101 with profit 1
	Hard reg 1 is preferable by r101 with profit 1
   Insn 11: point = 20, n_alt = -2
   Insn 10: point = 22, n_alt = 3
   Insn 9: point = 24, n_alt = 3
   Insn 8: point = 25, n_alt = -2
   Insn 7: point = 27, n_alt = 3
   Insn 6: point = 29, n_alt = 3
   Insn 2: point = 30, n_alt = 5
 r87: [26..27]
 r88: [19..25]
 r89: [21..22]
 r90: [17..20]
 r91: [14..15]
 r92: [10..11]
 r93: [4..9]
 r94: [3..6]
 r95: [0..1]
 r96: [28..29]
 r97: [23..24]
 r98: [12..13]
 r99: [7..8]
 r100: [2..5]
 r101: [16..18]
Compressing live ranges: from 30 to 24 - 80%
Ranges after the compression:
 r87: [20..21]
 r88: [14..19]
 r89: [16..17]
 r90: [12..15]
 r91: [10..11]
 r92: [6..7]
 r93: [2..5]
 r94: [2..3]
 r95: [0..1]
 r96: [22..23]
 r97: [18..19]
 r98: [8..9]
 r99: [4..5]
 r100: [2..3]
 r101: [12..13]

********** Assignment #1: **********

	 Assigning to 101 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=101, tfreq=3)...
	   Assign 1 to reload r101 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
deleting insn with uid = 11.
deleting insn with uid = 30.
deleting insn with uid = 14.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 25.


std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,9u,1e} r1={6d,3u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 211{180d,30u,1e} in 20{18 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":161 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 16 [0x10])) [106 this_11(D)->_M_impl._M_end_of_storage+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 1 dx [orig:88 _2 ] [88])
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [97]) [106 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 12 10 31 2 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (minus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg:DI 0 ax [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 274 {*subdi_1}
     (nil))
(insn 31 12 13 2 (set (reg:DI 0 ax [orig:91 _5 ] [91])
        (reg:DI 1 dx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 13 31 15 2 (parallel [
            (set (reg:DI 0 ax [98])
                (ashiftrt:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_vector.h":163 547 {*ashrdi3_1}
     (expr_list:REG_EQUAL (div:DI (reg:DI 0 ax [orig:91 _5 ] [91])
            (const_int 4 [0x4]))
        (nil)))
(insn 15 13 16 2 (set (reg:DI 1 dx [orig:93 _7 ] [93])
        (reg:DI 0 ax [orig:92 _6 ] [92])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 2 cx [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [99]) [106 this_11(D)->_M_impl._M_start+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 18 17 20 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 20 18 21 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:94 _8 ] [94])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "/usr/include/c++/7/bits/stl_vector.h":162 81 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm") [flags 0x3]  <function_decl 0x7f441996ac00 _M_deallocate>) [0 _M_deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":162 655 {*call}
     (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 _9 ] [95])) "/usr/include/c++/7/bits/stl_vector.h":163 81 {*movdi_internal}
     (nil))
(call_insn 25 24 28 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Vector_baseIjSaIjEE12_Vector_implD1Ev") [flags 0x3]  <function_decl 0x7f4419049600 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":163 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 25 29 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":163 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 29 28 0 NOTE_INSN_DELETED)

;; Function std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv, funcdef_no=3536, decl_uid=55008, cgraph_uid=1410, symbol_order=1432)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":115 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_vector.h":116 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_vector.h":116 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = unsigned int*; _Tp = unsigned int] (_ZSt8_DestroyIPjjEvT_S1_RSaIT0_E, funcdef_no=3537, decl_uid=68737, cgraph_uid=1411, symbol_order=1433)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 9: point = 2, n_alt = 3
   Insn 8: point = 3, n_alt = 3
   Insn 4: point = 4, n_alt = 5
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = unsigned int*; _Tp = unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{94d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [106 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [110 D.68740+0 S8 A64])
        (reg:DI 1 dx [ D.68740 ])) "/usr/include/c++/7/bits/stl_construct.h":203 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [106 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":206 81 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8_DestroyIPjEvT_S1_") [flags 0x3]  <function_decl 0x7f4419054000 _Destroy>) [0 _Destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":206 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 15 12 16 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":207 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function _OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = char*; _Size = long unsigned int; _Tp = char] (_ZSt6fill_nIPcmcET_S1_T0_RKT1_, funcdef_no=3538, decl_uid=68752, cgraph_uid=1412, symbol_order=1434)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 21: point = 1, n_alt = -2
   Insn 18: point = 3, n_alt = -2
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 4, n_alt = -2
   Insn 15: point = 5, n_alt = -2
   Insn 14: point = 6, n_alt = -2
   Insn 13: point = 7, n_alt = 3
   Insn 12: point = 8, n_alt = 3
   Insn 11: point = 9, n_alt = -2
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 10, n_alt = -2
   Insn 8: point = 11, n_alt = 3
   Insn 4: point = 12, n_alt = 5
   Insn 3: point = 12, n_alt = 5
   Insn 2: point = 12, n_alt = 5
 r87: [4..9]
 r88: [2..3]
 r89: [0..1]
 r90: [10..11]
 r91: [6..8]
 r92: [5..7]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]
 r91: [4..5]
 r92: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 18
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
deleting insn with uid = 14.
deleting insn with uid = 18.
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 17.


_OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = char*; _Size = long unsigned int; _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,1u} r4={4d,2u} r5={5d,3u} r6={1d,8u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 197{170d,27u,0e} in 14{12 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":784 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_algobase.h":784 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [111 __value+0 S8 A64])
        (reg:DI 1 dx [ __value ])) "/usr/include/c++/7/bits/stl_algobase.h":784 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__niter_baseIPcET_S1_") [flags 0x3]  <function_decl 0x7f4419054200 __niter_base>) [0 __niter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":789 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 2 cx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 1 dx [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [111 __value+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(insn 13 12 15 2 (set (reg:DI 0 ax [92])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(insn 15 13 16 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":789 81 {*movdi_internal}
     (nil))
(call_insn 17 16 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt10__fill_n_aImcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_") [flags 0x3]  <function_decl 0x7f4419054300 __fill_n_a>) [0 __fill_n_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":789 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 25 17 26 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_algobase.h":790 81 {*movdi_internal}
     (nil))
(insn 26 25 28 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":790 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 28 26 0 NOTE_INSN_DELETED)

;; Function static _ForwardIterator std::__uninitialized_copy<true>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*] (_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_, funcdef_no=3539, decl_uid=68810, cgraph_uid=1413, symbol_order=1435)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = -2
   Insn 15: point = 3, n_alt = -2
   Insn 14: point = 4, n_alt = 0
   Insn 13: point = 4, n_alt = -2
   Insn 12: point = 5, n_alt = -2
   Insn 11: point = 6, n_alt = -2
   Insn 10: point = 7, n_alt = 3
   Insn 9: point = 8, n_alt = 3
   Insn 8: point = 9, n_alt = 3
   Insn 4: point = 10, n_alt = 5
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [6..9]
 r90: [5..8]
 r91: [4..7]
Compressing live ranges: from 10 to 6 - 60%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 22
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
deleting insn with uid = 15.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static _ForwardIterator std::__uninitialized_copy<true>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<char*>; _ForwardIterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 119{96d,23u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [99 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_uninitialized.h":99 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [99 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_uninitialized.h":99 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_uninitialized.h":99 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [99 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [99 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(call_insn 14 13 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_") [flags 0x3]  <function_decl 0x7f4419054700 copy>) [0 copy S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_uninitialized.h":101 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 22 14 23 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_uninitialized.h":101 81 {*movdi_internal}
     (nil))
(insn 23 22 25 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_uninitialized.h":101 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 25 23 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::attribute_value_pure_pred<Quote>::test(Ch) [with Ch Quote = '\''; Ch = char] (_ZN8rapidxml12xml_documentIcE25attribute_value_pure_predILc39EE4testEc, funcdef_no=3540, decl_uid=68829, cgraph_uid=1414, symbol_order=1436)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::attribute_value_pure_pred<Quote>::test(Ch) [with Ch Quote = '\''; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.74_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1502 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.74_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1502 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1502 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE28lookup_attribute_data_1_pureE") [flags 0x2]  <var_decl 0x7f441a7e5750 lookup_attribute_data_1_pure>)) "libs/src/../include/rapidxml/rapidxml.hpp":1502 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_attribute_data_1_pure S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1502 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1506 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1506 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::attribute_value_pure_pred<Quote>::test(Ch) [with Ch Quote = '\"'; Ch = char] (_ZN8rapidxml12xml_documentIcE25attribute_value_pure_predILc34EE4testEc, funcdef_no=3541, decl_uid=68845, cgraph_uid=1415, symbol_order=1437)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = 2
   Insn 12: point = 5, n_alt = 4
   Insn 11: point = 6, n_alt = 1
   Insn 10: point = 8, n_alt = 0
   Insn 9: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::attribute_value_pure_pred<Quote>::test(Ch) [with Ch Quote = '\"'; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1499 84 {*movqi_internal}
     (nil))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (set (reg:QI 0 ax [orig:87 ch.98_3 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1504 84 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:88 _4 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.98_3 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1504 136 {*zero_extendqisi2}
     (nil))
(insn 11 10 12 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _4 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1504 145 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE28lookup_attribute_data_2_pureE") [flags 0x2]  <var_decl 0x7f441a7e5870 lookup_attribute_data_2_pure>)) "libs/src/../include/rapidxml/rapidxml.hpp":1504 81 {*movdi_internal}
     (nil))
(insn 13 12 20 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_attribute_data_2_pure S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1504 84 {*movqi_internal}
     (nil))
(insn 20 13 21 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1506 84 {*movqi_internal}
     (nil))
(insn 21 20 23 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1506 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::text_pred::test(Ch) [with Ch = char] (_ZN8rapidxml12xml_documentIcE9text_pred4testEc, funcdef_no=3544, decl_uid=68859, cgraph_uid=1418, symbol_order=1440)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::text_pred::test(Ch) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1457 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1457 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1457 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.130_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1459 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.130_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1459 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1459 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE11lookup_textE") [flags 0x2]  <var_decl 0x7f441a7e53f0 lookup_text>)) "libs/src/../include/rapidxml/rapidxml.hpp":1459 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_text S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1459 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1460 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1460 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::text_pure_no_ws_pred; int Flags = 0; Ch = char] (_ZN8rapidxml12xml_documentIcE4skipINS1_20text_pure_no_ws_predELi0EEEvRPc, funcdef_no=3545, decl_uid=68884, cgraph_uid=1419, symbol_order=1441)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 21:  (0) rm  (1) 0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 5
   Insn 28: point = 1, n_alt = 3
   Insn 27: point = 2, n_alt = 3
  BB 3
   Insn 19: point = 3, n_alt = -1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 10, n_alt = 2
   Insn 10: point = 12, n_alt = 3
  BB 4
   Insn 33: point = 13, n_alt = -1
   Insn 21: point = 13, n_alt = 1
  BB 2
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 3
   Insn 6: point = 16, n_alt = 3
   Insn 2: point = 17, n_alt = 5
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
 r90: [3..4]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [0..2]
 r95: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [0..1]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void rapidxml::xml_document<Ch>::skip(Ch*&) [with StopPred = rapidxml::xml_document<>::text_pure_no_ws_pred; int Flags = 0; Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,13u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 135{102d,33u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])
        (reg:DI 5 di [ text ])) "libs/src/../include/rapidxml/rapidxml.hpp":1558 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [92])
        (mem/f:DI (reg/f:DI 0 ax [91]) [3 *text_7(D)+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
(insn 8 7 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
        (reg/f:DI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1560 81 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 93
(code_label 22 8 9 3 641 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 81 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:QI 0 ax [orig:87 _1 ] [87])
        (mem:QI (reg/f:DI 0 ax [93]) [0 *tmp_4+0 S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 84 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (sign_extend:SI (reg:QI 0 ax [orig:87 _1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 151 {extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "libs/src/../include/rapidxml/rapidxml.hpp":1561 82 {*movsi_internal}
     (nil))
(call_insn 14 13 16 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZN8rapidxml12xml_documentIcE20text_pure_no_ws_pred4testEc") [flags 0x3]  <function_decl 0x7f4418c4e000 test>) [0 test S1 A8])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 16 14 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _3 ] [89])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:90 retval.128_10 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 613 {*setcc_qi}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 retval.128_10 ] [90])
            (const_int 0 [0]))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "libs/src/../include/rapidxml/rapidxml.hpp":1561 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 33 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "libs/src/../include/rapidxml/rapidxml.hpp":1562 218 {*adddi_1}
     (nil))
(jump_insn 33 21 34 4 (set (pc)
        (label_ref 22)) "libs/src/../include/rapidxml/rapidxml.hpp":1561 649 {jump}
     (nil)
 -> 22)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 25)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94 95
(code_label 25 34 26 5 640 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [87 text+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 1 dx [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 tmp+0 S8 A64])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 29 28 32 5 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 *text_7(D)+0 S8 A64])
        (reg/f:DI 1 dx [95])) "libs/src/../include/rapidxml/rapidxml.hpp":1563 81 {*movdi_internal}
     (nil))
(insn 32 29 35 5 (const_int 0 [0]) "libs/src/../include/rapidxml/rapidxml.hpp":1564 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = unsigned int] (_ZNSaIjED2Ev, funcdef_no=3549, decl_uid=55207, cgraph_uid=1423, symbol_order=1445)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 11: point = 0, n_alt = -1
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r88: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{92d,11u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [112 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [112 this+0 S8 A64])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/allocator.h":139 81 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIjED2Ev") [flags 0x3]  <function_decl 0x7f4419963200 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/allocator.h":139 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 8 12 2 (const_int 0 [0]) "/usr/include/c++/7/bits/allocator.h":139 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 12 11 0 NOTE_INSN_DELETED)

;; Function void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>] (_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjm, funcdef_no=3551, decl_uid=55247, cgraph_uid=1425, symbol_order=1447)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 26: point = 0, n_alt = -1
  BB 3
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 2, n_alt = -2
   Insn 13: point = 3, n_alt = 3
   Insn 12: point = 4, n_alt = 3
   Insn 11: point = 5, n_alt = 3
  BB 2
   Insn 9: point = 6, n_alt = -1
   Insn 8: point = 6, n_alt = 1
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [0..5]
 r88: [2..4]
 r89: [1..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = unsigned int; _Alloc = std::allocator<unsigned int>]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,12u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{96d,28u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/stl_vector.h":176 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_vector.h":179 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) "/usr/include/c++/7/bits/stl_vector.h":179 617 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [109 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [88])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 13 12 15 3 (set (reg:DI 2 cx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 15 13 16 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [89])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_vector.h":180 81 {*movdi_internal}
     (nil))
(call_insn 17 16 25 3 (call (mem:QI (symbol_ref/i:DI ("_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjm") [flags 0x3]  <function_decl 0x7f441992e400 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_vector.h":180 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 17 24 5 645 (nil) [1 uses])
(note 24 25 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 20 5 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_vector.h":181 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 20 26 21 4 643 (nil) [0 uses])
(note 21 20 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 21 0 NOTE_INSN_DELETED)

;; Function void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*] (_ZSt8_DestroyIPjEvT_S1_, funcdef_no=3552, decl_uid=68943, cgraph_uid=1426, symbol_order=1448)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 3
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r87: [1..3]
 r88: [0..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={2d} r4={3d,2u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 110{94d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [106 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_construct.h":127 81 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [106 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "/usr/include/c++/7/bits/stl_construct.h":137 81 {*movdi_internal}
     (nil))
(call_insn 11 10 14 2 (call (mem:QI (symbol_ref/i:DI ("_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_") [flags 0x3]  <function_decl 0x7f4418c4ec00 __destroy>) [0 __destroy S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_construct.h":137 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 11 15 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":138 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 14 0 NOTE_INSN_DELETED)

;; Function _Iterator std::__niter_base(_Iterator) [with _Iterator = char*] (_ZSt12__niter_baseIPcET_S1_, funcdef_no=3553, decl_uid=68947, cgraph_uid=1427, symbol_order=1449)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


_Iterator std::__niter_base(_Iterator) [with _Iterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __it+0 S8 A64])
        (reg:DI 5 di [ __it ])) "/usr/include/c++/7/bits/stl_algobase.h":277 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __it+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":278 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_algobase.h":278 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":278 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, _Tp*>::__type std::__fill_n_a(_Tp*, _Size, const _Tp&) [with _Size = long unsigned int; _Tp = char] (_ZSt10__fill_n_aImcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_, funcdef_no=3554, decl_uid=68953, cgraph_uid=1428, symbol_order=1450)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
   Insn 19: point = 3, n_alt = 0
   Insn 18: point = 5, n_alt = 3
   Insn 17: point = 6, n_alt = 3
   Insn 16: point = 7, n_alt = 0
   Insn 15: point = 7, n_alt = -2
   Insn 14: point = 8, n_alt = -2
   Insn 13: point = 9, n_alt = -2
   Insn 12: point = 10, n_alt = 3
   Insn 11: point = 11, n_alt = 3
   Insn 10: point = 12, n_alt = 3
   Insn 9: point = 14, n_alt = 3
   Insn 8: point = 15, n_alt = 3
   Insn 4: point = 16, n_alt = 5
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r87: [8..12]
 r88: [2..3]
 r89: [0..1]
 r90: [13..15]
 r91: [13..14]
 r92: [9..11]
 r93: [7..10]
 r94: [4..6]
 r95: [4..5]
Compressing live ranges: from 16 to 10 - 62%
Ranges after the compression:
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [8..9]
 r91: [8..9]
 r92: [6..7]
 r93: [6..7]
 r94: [4..5]
 r95: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 14
changing reg in insn 19
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
deleting insn with uid = 13.
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.


typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, _Tp*>::__type std::__fill_n_a(_Tp*, _Size, const _Tp&) [with _Size = long unsigned int; _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={5d,4u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,11u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d} r20={1d,1u,4e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 137{103d,30u,4e} in 16{15 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":761 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])
        (reg:DI 4 si [ __n ])) "/usr/include/c++/7/bits/stl_algobase.h":761 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [111 __c+0 S8 A64])
        (reg:DI 1 dx [ __c ])) "/usr/include/c++/7/bits/stl_algobase.h":761 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 1 dx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg/f:DI 2 cx [orig:87 _1 ] [87])
                (plus:DI (reg/f:DI 1 dx [90])
                    (reg:DI 0 ax [91])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_algobase.h":763 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64]))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [111 __c+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(insn 12 11 14 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(insn 14 12 15 2 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "/usr/include/c++/7/bits/stl_algobase.h":763 81 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_") [flags 0x3]  <function_decl 0x7f4419054900 __fill_a>) [0 __fill_a S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/stl_algobase.h":763 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 16 18 2 (set (reg/f:DI 1 dx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":764 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [95])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":764 81 {*movdi_internal}
     (nil))
(insn 19 18 26 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 _7 ] [88])
                (plus:DI (reg:DI 0 ax [95])
                    (reg/f:DI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_algobase.h":764 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 __first+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [8 __n+0 S8 A64]))
        (nil)))
(insn 26 19 27 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_algobase.h":765 81 {*movdi_internal}
     (nil))
(insn 27 26 29 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":765 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 29 27 0 NOTE_INSN_DELETED)

;; Function _OI std::copy(_II, _II, _OI) [with _II = std::move_iterator<char*>; _OI = char*] (_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_, funcdef_no=3555, decl_uid=68993, cgraph_uid=1429, symbol_order=1451)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 29: point = 0, n_alt = -1
   Insn 28: point = 0, n_alt = -2
   Insn 24: point = 1, n_alt = -2
   Insn 21: point = 3, n_alt = -2
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 4, n_alt = -2
   Insn 18: point = 5, n_alt = -2
   Insn 17: point = 6, n_alt = -2
   Insn 16: point = 7, n_alt = 3
   Insn 15: point = 8, n_alt = -2
   Insn 14: point = 9, n_alt = 0
   Insn 13: point = 9, n_alt = -2
   Insn 12: point = 10, n_alt = 3
   Insn 11: point = 11, n_alt = -2
   Insn 10: point = 12, n_alt = 0
   Insn 9: point = 12, n_alt = -2
   Insn 8: point = 13, n_alt = 3
   Insn 4: point = 14, n_alt = 5
   Insn 3: point = 14, n_alt = 5
   Insn 2: point = 14, n_alt = 5
 r87: [5..11]
 r88: [4..8]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [9..10]
 r93: [6..7]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [4..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 11
changing reg in insn 18
changing reg in insn 15
changing reg in insn 19
changing reg in insn 21
changing reg in insn 24
changing reg in insn 24
changing reg in insn 28
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 21.
deleting insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.


_OI std::copy(_II, _II, _OI) [with _II = std::move_iterator<char*>; _OI = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={8d,8u} r1={5d,2u} r2={5d,1u} r3={1d,1u} r4={5d,2u} r5={7d,4u} r6={1d,8u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 277{245d,32u,0e} in 18{15 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [99 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":446 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [99 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_algobase.h":446 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_algobase.h":446 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [99 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E") [flags 0x3]  <function_decl 0x7f4418c74300 __miter_base>) [0 __miter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":455 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 3 bx [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [92])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [99 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E") [flags 0x3]  <function_decl 0x7f4418c74300 __miter_base>) [0 __miter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":455 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 2 cx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":455 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":456 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 1 dx)
        (reg:DI 0 ax [93])) "/usr/include/c++/7/bits/stl_algobase.h":456 81 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":456 81 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_algobase.h":456 81 {*movdi_internal}
     (nil))
(call_insn 20 19 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_") [flags 0x3]  <function_decl 0x7f4418c74500 __copy_move_a2>) [0 __copy_move_a2 S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":456 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 28 20 29 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:90 <retval> ] [90])) "/usr/include/c++/7/bits/stl_algobase.h":457 81 {*movdi_internal}
     (nil))
(insn 29 28 31 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":457 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 29 0 NOTE_INSN_DELETED)

;; Function static unsigned char rapidxml::xml_document<Ch>::text_pure_no_ws_pred::test(Ch) [with Ch = char] (_ZN8rapidxml12xml_documentIcE20text_pure_no_ws_pred4testEc, funcdef_no=3557, decl_uid=69017, cgraph_uid=1431, symbol_order=1453)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) q  (1) qm {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 2
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 1
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 10, n_alt = 2
   Insn 4: point = 11, n_alt = 6
   Insn 3: point = 12, n_alt = 0
   Insn 2: point = 14, n_alt = -2
 r87: [9..10]
 r88: [7..8]
 r89: [2..3]
 r90: [0..1]
 r91: [13..14]
 r92: [11..12]
 r93: [4..6]
 r94: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r87: [8..9]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [12..13]
 r92: [10..11]
 r93: [4..5]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


static unsigned char rapidxml::xml_document<Ch>::text_pure_no_ws_pred::test(Ch) [with Ch = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;;  ref usage 	r0={8d,8u} r1={2d,1u} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 43{26d,17u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 0 ax [91])
        (reg:SI 5 di [ ch ])) "libs/src/../include/rapidxml/rapidxml.hpp":1466 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [92])
        (reg:QI 0 ax [91])) "libs/src/../include/rapidxml/rapidxml.hpp":1466 84 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])
        (reg:QI 0 ax [92])) "libs/src/../include/rapidxml/rapidxml.hpp":1466 84 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [orig:87 ch.129_1 ] [87])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 ch+0 S1 A32])) "libs/src/../include/rapidxml/rapidxml.hpp":1468 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 ch.129_1 ] [87]))) "libs/src/../include/rapidxml/rapidxml.hpp":1468 136 {*zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [93])
        (sign_extend:DI (reg:SI 0 ax [orig:88 _2 ] [88]))) "libs/src/../include/rapidxml/rapidxml.hpp":1468 145 {*extendsidi2_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [94])
        (symbol_ref/i:DI ("_ZN8rapidxml8internal13lookup_tablesILi0EE22lookup_text_pure_no_wsE") [flags 0x2]  <var_decl 0x7f441a7e5480 lookup_text_pure_no_ws>)) "libs/src/../include/rapidxml/rapidxml.hpp":1468 81 {*movdi_internal}
     (nil))
(insn 12 11 19 2 (set (reg:QI 0 ax [orig:89 _5 ] [89])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0 lookup_text_pure_no_ws S1 A8])) "libs/src/../include/rapidxml/rapidxml.hpp":1468 84 {*movqi_internal}
     (nil))
(insn 19 12 20 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "libs/src/../include/rapidxml/rapidxml.hpp":1469 84 {*movqi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:QI 0 ax)) "libs/src/../include/rapidxml/rapidxml.hpp":1469 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function __gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = unsigned int] (_ZN9__gnu_cxx13new_allocatorIjED2Ev, funcdef_no=3559, decl_uid=55142, cgraph_uid=1433, symbol_order=1455)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,3u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 25{18d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [113 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":86 81 {*movdi_internal}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":86 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 9 8 0 NOTE_INSN_DELETED)

;; Function static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = unsigned int] (_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjm, funcdef_no=3561, decl_uid=54892, cgraph_uid=1435, symbol_order=1457)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = 3
   Insn 9: point = 4, n_alt = 3
   Insn 8: point = 5, n_alt = 3
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
 r87: [2..5]
 r88: [1..4]
 r89: [0..3]
Compressing live ranges: from 6 to 2 - 33%
Ranges after the compression:
 r87: [0..1]
 r88: [0..1]
 r89: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.


static void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,8u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 115{95d,20u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [110 __a+0 S8 A64])
        (reg:DI 5 di [ __a ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])
        (reg:DI 1 dx [ __n ])) "/usr/include/c++/7/bits/alloc_traits.h":461 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [87])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 __n+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [110 __a+0 S8 A64])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 12 10 13 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "/usr/include/c++/7/bits/alloc_traits.h":462 81 {*movdi_internal}
     (nil))
(call_insn 14 13 17 2 (call (mem:QI (symbol_ref/i:DI ("_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjm") [flags 0x3]  <function_decl 0x7f441995b700 deallocate>) [0 deallocate S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/bits/alloc_traits.h":462 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 17 14 18 2 (const_int 0 [0]) "/usr/include/c++/7/bits/alloc_traits.h":462 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*] (_ZNSt12_Destroy_auxILb1EE9__destroyIPjEEvT_S3_, funcdef_no=3562, decl_uid=69131, cgraph_uid=1436, symbol_order=1458)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = unsigned int*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 27{18d,9u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [106 D.69132+0 S8 A64])
        (reg:DI 5 di [ D.69132 ])) "/usr/include/c++/7/bits/stl_construct.h":117 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 D.69133+0 S8 A64])
        (reg:DI 4 si [ D.69133 ])) "/usr/include/c++/7/bits/stl_construct.h":117 81 {*movdi_internal}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_construct.h":117 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 9 0 NOTE_INSN_DELETED)

;; Function typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type std::__fill_a(_Tp*, _Tp*, const _Tp&) [with _Tp = char] (_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_, funcdef_no=3563, decl_uid=69136, cgraph_uid=1437, symbol_order=1459)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 10:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=98 from oldreg=87, assigning class GENERAL_REGS to r98
   13: {r98:DI=r98:DI-r88:DI;clobber flags:CC;}
      REG_DEAD r88:DI
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   38: r98:DI=r87:DI
    Inserting insn reload after:
   39: r89:DI=r98:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpdi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 36: point = 0, n_alt = -1
  BB 3
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = -2
   Insn 24: point = 2, n_alt = -2
   Insn 23: point = 3, n_alt = 3
   Insn 22: point = 4, n_alt = 3
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 7, n_alt = 2
  BB 2
   Insn 16: point = 8, n_alt = -1
   Insn 15: point = 8, n_alt = 1
   Insn 14: point = 8, n_alt = 5
   Insn 39: point = 9, n_alt = -2
	Hard reg 0 is preferable by r98 with profit 1
   Insn 13: point = 11, n_alt = 0
   Insn 38: point = 12, n_alt = -2
	Hard reg 0 is preferable by r98 with profit 1
	Hard reg 1 is preferable by r98 with profit 1
   Insn 12: point = 14, n_alt = 3
   Insn 11: point = 15, n_alt = 3
   Insn 10: point = 16, n_alt = 6
   Insn 9: point = 17, n_alt = 2
   Insn 8: point = 19, n_alt = 3
   Insn 4: point = 20, n_alt = 5
   Insn 3: point = 20, n_alt = 5
   Insn 2: point = 20, n_alt = 5
 r87: [13..15]
 r88: [11..14]
 r89: [8..9]
 r90: [6..7]
 r91: [1..5]
 r92: [18..19]
 r93: [16..17]
 r96: [2..4]
 r97: [0..3]
 r98: [10..12]
Compressing live ranges: from 20 to 14 - 70%
Ranges after the compression:
 r87: [8..9]
 r88: [6..9]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [12..13]
 r93: [10..11]
 r96: [0..1]
 r97: [0..1]
 r98: [6..7]

********** Assignment #1: **********

	 Assigning to 98 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=98, tfreq=3)...
	   Assign 1 to reload r98 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 25
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 26
deleting insn with uid = 38.
deleting insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.


typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type std::__fill_a(_Tp*, _Tp*, const _Tp&) [with _Tp = char]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,6u} r1={5d,4u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,17u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 144{104d,40u,0e} in 21{20 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 92 93
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":703 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_algobase.h":703 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [111 __c+0 S8 A64])
        (reg:DI 1 dx [ __c ])) "/usr/include/c++/7/bits/stl_algobase.h":703 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [111 __c+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":705 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:QI 0 ax [93])
        (mem:QI (reg/f:DI 0 ax [92]) [0 *__c_8(D)+0 S1 A8])) "/usr/include/c++/7/bits/stl_algobase.h":705 84 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -9 [0xfffffffffffffff7])) [0 __tmp+0 S1 A8])
        (reg:QI 0 ax [93])) "/usr/include/c++/7/bits/stl_algobase.h":705 84 {*movqi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 1 dx [orig:87 __last.26_1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":706 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [orig:88 __first.27_2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":706 81 {*movdi_internal}
     (nil))
(insn 13 12 39 2 (parallel [
            (set (reg:DI 1 dx [orig:87 __last.26_1 ] [87])
                (minus:DI (reg:DI 1 dx [orig:87 __last.26_1 ] [87])
                    (reg:DI 0 ax [orig:88 __first.27_2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_algobase.h":706 274 {*subdi_1}
     (nil))
(insn 39 13 14 2 (set (reg:DI 0 ax [orig:89 _3 ] [89])
        (reg:DI 1 dx [orig:87 __last.26_1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":706 81 {*movdi_internal}
     (nil))
(insn 14 39 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 __len+0 S8 A64])
        (reg:DI 0 ax [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_algobase.h":706 81 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [8 __len+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":706 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) "/usr/include/c++/7/bits/stl_algobase.h":706 617 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 96 97
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:QI 0 ax [orig:90 __tmp.28_4 ] [90])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -9 [0xfffffffffffffff7])) [0 __tmp+0 S1 A8])) "/usr/include/c++/7/bits/stl_algobase.h":707 84 {*movqi_internal}
     (nil))
(insn 19 18 22 3 (set (reg:SI 2 cx [orig:91 _5 ] [91])
        (zero_extend:SI (reg:QI 0 ax [orig:90 __tmp.28_4 ] [90]))) "/usr/include/c++/7/bits/stl_algobase.h":707 136 {*zero_extendqisi2}
     (nil))
(insn 22 19 23 3 (set (reg:DI 1 dx [96])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 __len+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":707 81 {*movdi_internal}
     (nil))
(insn 23 22 25 3 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":707 81 {*movdi_internal}
     (nil))
(insn 25 23 26 3 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:91 _5 ] [91])) "/usr/include/c++/7/bits/stl_algobase.h":707 82 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "/usr/include/c++/7/bits/stl_algobase.h":707 81 {*movdi_internal}
     (nil))
(call_insn 27 26 35 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f441c46ac00 __builtin_memset>) [0 __builtin_memset S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":707 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 35 27 34 5 660 (nil) [1 uses])
(note 34 35 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 34 30 5 (const_int 0 [0]) "/usr/include/c++/7/bits/stl_algobase.h":708 684 {nop}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 30 36 31 4 658 (nil) [0 uses])
(note 31 30 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 37 31 0 NOTE_INSN_DELETED)

;; Function decltype (std::__miter_base(__it.base())) std::__miter_base(std::move_iterator<_IteratorL>) [with _Iterator = char*] (_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E, funcdef_no=3564, decl_uid=69154, cgraph_uid=1438, symbol_order=1460)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = -2
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = -2
   Insn 9: point = 5, n_alt = -2
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = -2
   Insn 6: point = 7, n_alt = 3
   Insn 2: point = 8, n_alt = 5
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 9.
deleting insn with uid = 12.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


decltype (std::__miter_base(__it.base())) std::__miter_base(std::move_iterator<_IteratorL>) [with _Iterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,4u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 184{167d,17u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [99 __it+0 S8 A64])
        (reg:DI 5 di [ __it ])) "/usr/include/c++/7/bits/stl_iterator.h":1241 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (parallel [
            (set (reg:DI 0 ax [90])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_iterator.h":1243 218 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "/usr/include/c++/7/bits/stl_iterator.h":1243 81 {*movdi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNKSt13move_iteratorIPcE4baseEv") [flags 0x3]  <function_decl 0x7f4418efcd00 base>) [0 base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_iterator.h":1243 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 8 11 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_iterator.h":1243 81 {*movdi_internal}
     (nil))
(call_insn 11 10 19 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__miter_baseIPcET_S1_") [flags 0x3]  <function_decl 0x7f4418c74200 __miter_base>) [0 __miter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_iterator.h":1243 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 11 20 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:89 <retval> ] [89])) "/usr/include/c++/7/bits/stl_iterator.h":1243 81 {*movdi_internal}
     (nil))
(insn 20 19 22 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_iterator.h":1243 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 22 20 0 NOTE_INSN_DELETED)

;; Function _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = true; _II = char*; _OI = char*] (_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_, funcdef_no=3565, decl_uid=69160, cgraph_uid=1439, symbol_order=1461)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 32: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -2
   Insn 24: point = 3, n_alt = -2
   Insn 23: point = 4, n_alt = 0
   Insn 22: point = 4, n_alt = -2
   Insn 21: point = 5, n_alt = -2
   Insn 20: point = 6, n_alt = -2
   Insn 19: point = 7, n_alt = -2
   Insn 18: point = 8, n_alt = 0
   Insn 17: point = 8, n_alt = -2
   Insn 16: point = 9, n_alt = 3
   Insn 15: point = 10, n_alt = -2
   Insn 14: point = 11, n_alt = 0
   Insn 13: point = 11, n_alt = -2
   Insn 12: point = 12, n_alt = 3
   Insn 11: point = 13, n_alt = -2
   Insn 10: point = 14, n_alt = 0
   Insn 9: point = 14, n_alt = -2
   Insn 8: point = 15, n_alt = 3
   Insn 4: point = 16, n_alt = 5
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r87: [6..13]
 r88: [5..10]
 r89: [4..7]
 r90: [2..3]
 r91: [0..1]
 r92: [14..15]
 r93: [11..12]
 r94: [8..9]
Compressing live ranges: from 16 to 12 - 75%
Ranges after the compression:
 r87: [4..9]
 r88: [4..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [10..11]
 r93: [8..9]
 r94: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 11
changing reg in insn 20
changing reg in insn 15
changing reg in insn 21
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 19.
deleting insn with uid = 24.
deleting insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 23.


_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = true; _II = char*; _OI = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;;  ref usage 	r0={9d,9u} r1={6d,2u} r2={5d} r3={1d,1u} r4={6d,2u} r5={9d,5u} r6={1d,8u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={4d} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={1d,1u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 353{318d,35u,0e} in 20{16 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":420 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_algobase.h":420 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_algobase.h":420 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__niter_baseIPcET_S1_") [flags 0x3]  <function_decl 0x7f4419054200 __niter_base>) [0 __niter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":422 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 41 r12 [orig:87 _1 ] [87])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__niter_baseIPcET_S1_") [flags 0x3]  <function_decl 0x7f4419054200 __niter_base>) [0 __niter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":422 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 3 bx [orig:88 _2 ] [88])
        (reg:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "/usr/include/c++/7/bits/stl_algobase.h":422 81 {*movdi_internal}
     (nil))
(call_insn 18 17 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt12__niter_baseIPcET_S1_") [flags 0x3]  <function_decl 0x7f4419054200 __niter_base>) [0 __niter_base S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":422 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 2 (set (reg:DI 1 dx)
        (reg/f:DI 41 r12 [orig:87 _1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":424 81 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [orig:88 _2 ] [88])) "/usr/include/c++/7/bits/stl_algobase.h":424 81 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "/usr/include/c++/7/bits/stl_algobase.h":424 81 {*movdi_internal}
     (nil))
(call_insn 23 22 31 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_") [flags 0x3]  <function_decl 0x7f4418c82100 __copy_move_a>) [0 __copy_move_a S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":424 666 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 31 23 32 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:91 <retval> ] [91])) "/usr/include/c++/7/bits/stl_algobase.h":425 81 {*movdi_internal}
     (nil))
(insn 32 31 34 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":425 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 32 0 NOTE_INSN_DELETED)

;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = unsigned int] (_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjm, funcdef_no=3566, decl_uid=55091, cgraph_uid=1440, symbol_order=1462)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = 3
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = unsigned int]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 107{92d,15u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [113 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])
        (reg:DI 4 si [ __p ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [8 D.55094+0 S8 A64])
        (reg:DI 1 dx [ D.55094 ])) "/usr/include/c++/7/ext/new_allocator.h":116 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [106 __p+0 S8 A64])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/ext/new_allocator.h":125 81 {*movdi_internal}
     (nil))
(call_insn 10 9 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f441c511f00 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/ext/new_allocator.h":125 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 10 14 2 (const_int 0 [0]) "/usr/include/c++/7/ext/new_allocator.h":126 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 14 13 0 NOTE_INSN_DELETED)

;; Function std::move_iterator<_Iterator>::iterator_type std::move_iterator<_Iterator>::base() const [with _Iterator = char*] (_ZNKSt13move_iteratorIPcE4baseEv, funcdef_no=3567, decl_uid=68077, cgraph_uid=1441, symbol_order=1463)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 3
   Insn 6: point = 5, n_alt = 3
   Insn 2: point = 6, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


std::move_iterator<_Iterator>::iterator_type std::move_iterator<_Iterator>::base() const [with _Iterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 33{21d,12u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [107 this+0 S8 A64])
        (reg:DI 5 di [ this ])) "/usr/include/c++/7/bits/stl_iterator.h":1045 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [107 this+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1046 81 {*movdi_internal}
     (nil))
(insn 7 6 14 2 (set (reg/f:DI 0 ax [orig:87 _3 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [89]) [3 this_2(D)->_M_current+0 S8 A64])) "/usr/include/c++/7/bits/stl_iterator.h":1046 81 {*movdi_internal}
     (nil))
(insn 14 7 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_iterator.h":1046 81 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_iterator.h":1046 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function _Iterator std::__miter_base(_Iterator) [with _Iterator = char*] (_ZSt12__miter_baseIPcET_S1_, funcdef_no=3568, decl_uid=69152, cgraph_uid=1442, symbol_order=1464)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 3
   Insn 2: point = 4, n_alt = 5
 r87: [2..3]
 r88: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


_Iterator std::__miter_base(_Iterator) [with _Iterator = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 31{20d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __it+0 S8 A64])
        (reg:DI 5 di [ __it ])) "/usr/include/c++/7/bits/cpp_type_traits.h":408 81 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 13 2 (set (reg/f:DI 0 ax [orig:87 _2 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 __it+0 S8 A64])) "/usr/include/c++/7/bits/cpp_type_traits.h":409 81 {*movdi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/cpp_type_traits.h":409 81 {*movdi_internal}
     (nil))
(insn 14 13 16 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/cpp_type_traits.h":409 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 14 0 NOTE_INSN_DELETED)

;; Function _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = true; _II = char*; _OI = char*] (_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_, funcdef_no=3569, decl_uid=69181, cgraph_uid=1443, symbol_order=1465)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -2
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = -2
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = -2
   Insn 11: point = 7, n_alt = 3
   Insn 10: point = 8, n_alt = 3
   Insn 9: point = 9, n_alt = 3
   Insn 8: point = 10, n_alt = 6
   Insn 4: point = 10, n_alt = 5
   Insn 3: point = 10, n_alt = 5
   Insn 2: point = 10, n_alt = 5
 r87: [2..3]
 r88: [0..1]
 r89: [6..9]
 r90: [5..8]
 r91: [4..7]
Compressing live ranges: from 10 to 6 - 60%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [4..5]
 r90: [4..5]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 14
deleting insn with uid = 12.
deleting insn with uid = 16.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.


_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = true; _II = char*; _OI = char*]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,9u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 120{96d,24u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":375 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_algobase.h":375 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_algobase.h":375 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [68 __simple+0 S1 A8])
        (const_int 1 [0x1])) "/usr/include/c++/7/bits/stl_algobase.h":380 84 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":386 81 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 2 cx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":386 81 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":386 81 {*movdi_internal}
     (nil))
(insn 13 11 14 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) "/usr/include/c++/7/bits/stl_algobase.h":386 81 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "/usr/include/c++/7/bits/stl_algobase.h":386 81 {*movdi_internal}
     (nil))
(call_insn 15 14 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref/i:DI ("_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_") [flags 0x3]  <function_decl 0x7f4418c82700 __copy_m>) [0 __copy_m S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":386 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 23 15 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "/usr/include/c++/7/bits/stl_algobase.h":387 81 {*movdi_internal}
     (nil))
(insn 24 23 26 2 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":387 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char; bool _IsMove = true] (_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_, funcdef_no=3570, decl_uid=69223, cgraph_uid=1444, symbol_order=1466)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=98 from oldreg=87, assigning class GENERAL_REGS to r98
   10: {r98:DI=r98:DI-r88:DI;clobber flags:CC;}
      REG_DEAD r88:DI
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   37: r98:DI=r87:DI
    Inserting insn reload after:
   38: r93:DI=r98:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 34: point = 0, n_alt = -1
   Insn 33: point = 0, n_alt = -2
   Insn 29: point = 1, n_alt = -2
   Insn 26: point = 3, n_alt = 0
   Insn 25: point = 5, n_alt = 3
   Insn 24: point = 6, n_alt = 3
  BB 3
   Insn 21: point = 7, n_alt = 0
   Insn 20: point = 7, n_alt = -2
   Insn 19: point = 8, n_alt = -2
   Insn 18: point = 9, n_alt = -2
   Insn 17: point = 10, n_alt = 3
   Insn 16: point = 11, n_alt = 3
   Insn 15: point = 12, n_alt = 3
  BB 2
   Insn 13: point = 13, n_alt = -1
   Insn 12: point = 13, n_alt = 1
   Insn 11: point = 13, n_alt = 5
   Insn 38: point = 14, n_alt = -2
	Hard reg 0 is preferable by r98 with profit 1
   Insn 10: point = 16, n_alt = 0
   Insn 37: point = 17, n_alt = -2
	Hard reg 0 is preferable by r98 with profit 1
	Hard reg 1 is preferable by r98 with profit 1
   Insn 9: point = 19, n_alt = 3
   Insn 8: point = 20, n_alt = 3
   Insn 4: point = 21, n_alt = 5
   Insn 3: point = 21, n_alt = 5
   Insn 2: point = 21, n_alt = 5
 r87: [18..20]
 r88: [16..19]
 r89: [9..12]
 r90: [4..6]
 r91: [2..3]
 r92: [0..1]
 r93: [13..14]
 r94: [8..11]
 r95: [7..10]
 r96: [4..5]
 r98: [15..17]
Compressing live ranges: from 21 to 14 - 66%
Ranges after the compression:
 r87: [12..13]
 r88: [10..13]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [8..9]
 r94: [6..7]
 r95: [6..7]
 r96: [4..5]
 r98: [10..11]

********** Assignment #1: **********

	 Assigning to 98 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=98, tfreq=3)...
	   Assign 1 to reload r98 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 18
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 29
changing reg in insn 29
changing reg in insn 33
changing reg in insn 11
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 20
changing reg in insn 25
deleting insn with uid = 37.
deleting insn with uid = 18.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.


static _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char; bool _IsMove = true]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={6d,5u,1e} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,16u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,1u} r18={1d} r19={1d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 148{106d,40u,2e} in 21{20 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 93
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])
        (reg:DI 5 di [ __first ])) "/usr/include/c++/7/bits/stl_algobase.h":357 81 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])
        (reg:DI 4 si [ __last ])) "/usr/include/c++/7/bits/stl_algobase.h":357 81 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
        (reg:DI 1 dx [ __result ])) "/usr/include/c++/7/bits/stl_algobase.h":357 81 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 1 dx [orig:87 __last.22_1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 __last+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":366 81 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [orig:88 __first.23_2 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":366 81 {*movdi_internal}
     (nil))
(insn 10 9 38 2 (parallel [
            (set (reg:DI 1 dx [orig:87 __last.22_1 ] [87])
                (minus:DI (reg:DI 1 dx [orig:87 __last.22_1 ] [87])
                    (reg:DI 0 ax [orig:88 __first.23_2 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_algobase.h":366 274 {*subdi_1}
     (nil))
(insn 38 10 11 2 (set (reg:DI 0 ax [93])
        (reg:DI 1 dx [orig:87 __last.22_1 ] [87])) "/usr/include/c++/7/bits/stl_algobase.h":366 81 {*movdi_internal}
     (nil))
(insn 11 38 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 _Num+0 S8 A64])
        (reg:DI 0 ax [93])) "/usr/include/c++/7/bits/stl_algobase.h":366 81 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [8 _Num+0 S8 A64])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":367 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "/usr/include/c++/7/bits/stl_algobase.h":367 617 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 94 95
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 1 dx [orig:89 _Num.24_3 ] [89])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 _Num+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":368 81 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 2 cx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 __first+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":368 81 {*movdi_internal}
     (nil))
(insn 17 16 19 3 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":368 81 {*movdi_internal}
     (nil))
(insn 19 17 20 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [94])) "/usr/include/c++/7/bits/stl_algobase.h":368 81 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "/usr/include/c++/7/bits/stl_algobase.h":368 81 {*movdi_internal}
     (nil))
(call_insn 21 20 22 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memmove") [flags 0x41]  <function_decl 0x7f441c46a600 __builtin_memmove>) [0 __builtin_memmove S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/bits/stl_algobase.h":368 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 90 91 92 96
(code_label 22 21 23 4 673 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:DI 1 dx [orig:90 _Num.25_4 ] [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [8 _Num+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":369 81 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])) "/usr/include/c++/7/bits/stl_algobase.h":369 81 {*movdi_internal}
     (nil))
(insn 26 25 33 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 _12 ] [91])
                (plus:DI (reg/f:DI 0 ax [96])
                    (reg:DI 1 dx [orig:90 _Num.25_4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/c++/7/bits/stl_algobase.h":369 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 __result+0 S8 A64])
            (reg:DI 1 dx [orig:90 _Num.25_4 ] [90]))
        (nil)))
(insn 33 26 34 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:92 <retval> ] [92])) "/usr/include/c++/7/bits/stl_algobase.h":370 81 {*movdi_internal}
     (nil))
(insn 34 33 36 4 (use (reg/i:DI 0 ax)) "/usr/include/c++/7/bits/stl_algobase.h":370 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 36 34 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=3571, decl_uid=69250, cgraph_uid=1445, symbol_order=1531)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 25: point = 0, n_alt = -1
  BB 4
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 0, n_alt = -2
   Insn 17: point = 1, n_alt = 3
   Insn 16: point = 2, n_alt = 4
   Insn 15: point = 2, n_alt = 4
   Insn 14: point = 2, n_alt = 0
   Insn 13: point = 2, n_alt = 4
  BB 3
   Insn 11: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = 0
  BB 2
   Insn 8: point = 2, n_alt = -1
   Insn 7: point = 2, n_alt = 0
   Insn 3: point = 2, n_alt = 1
   Insn 2: point = 2, n_alt = 1
 r87: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,1u} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 197{169d,28u,0e} in 14{12 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [19 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) "libs/src/TSXParser.cpp":100 82 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [19 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) "libs/src/TSXParser.cpp":100 82 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [19 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) "libs/src/TSXParser.cpp":100 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 26)
            (pc))) "libs/src/TSXParser.cpp":100 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [19 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) "libs/src/TSXParser.cpp":100 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 26)
            (pc))) "libs/src/TSXParser.cpp":100 617 {*jcc_1}
     (nil)
 -> 26)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f4419a92d80 __ioinit>)) "/usr/include/c++/7/iostream":74 81 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7f441a5bc200 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) "/usr/include/c++/7/iostream":74 655 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7f4418c84d80 __dso_handle>)) "/usr/include/c++/7/iostream":74 81 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f4419a92d80 __ioinit>)) "/usr/include/c++/7/iostream":74 81 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 0 ax [87])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7f441a5bc400 __comp_dtor >)
                    ] UNSPEC_GOTPCREL)) [66  S8 A8])) "/usr/include/c++/7/iostream":74 81 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "/usr/include/c++/7/iostream":74 81 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7f441a5bc400 __comp_dtor >)
        (nil)))
(call_insn 19 18 26 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7f4418c82c00 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) "/usr/include/c++/7/iostream":74 666 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 26 19 24 6 677 (nil) [2 uses])
(note 24 26 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 22 6 (const_int 0 [0]) "libs/src/TSXParser.cpp":100 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 22 25 23 5 675 (nil) [0 uses])
(note 23 22 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 23 0 NOTE_INSN_DELETED)

;; Function (static initializers for libs/src/TSXParser.cpp) (_GLOBAL__sub_I__ZN3TSX6ParserC2EPKc, funcdef_no=3572, decl_uid=69257, cgraph_uid=1446, symbol_order=1674)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********


********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for libs/src/TSXParser.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) "libs/src/TSXParser.cpp":100 82 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "libs/src/TSXParser.cpp":100 82 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7f4418c82a00 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) "libs/src/TSXParser.cpp":100 655 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
